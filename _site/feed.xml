<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>咖啡不苦</title>
    <description>赖晨东的博客 | 咖啡不苦</description>
    <link>http://laichendong.com/</link>
    <atom:link href="http://laichendong.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 29 Jul 2016 11:43:45 +0800</pubDate>
    <lastBuildDate>Fri, 29 Jul 2016 11:43:45 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>有效领导</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;知识点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;没有最好的药，只有对症的药。没有最好的领导方式，只有最有效的领导方式&lt;/li&gt;
  &lt;li&gt;员工大都能放进 意愿和能力 两个维度组成的4个象限里&lt;/li&gt;
  &lt;li&gt;领导方式大都能放进 支持和指导 两个维度组成的4个象限里&lt;/li&gt;
  &lt;li&gt;低能力高意愿vs高指导低支持   低能力低意愿vs高指导高支持  高能力低意愿vs低指导高支持 高能力高意愿vs低指导低支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;体会&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;不同阶段的员工应该用不同的领导风格对待&lt;/li&gt;
  &lt;li&gt;安排工作时，在工作需要和员工意愿之间，应该先考虑工作需要&lt;/li&gt;
  &lt;li&gt;授权应该循序渐进，防止授权过渡导致能力不匹配&lt;/li&gt;
  &lt;li&gt;在不同的任务面前，同一个人是可能处在不同象限的&lt;/li&gt;
  &lt;li&gt;领导力发展的过程就是“人格扭曲”的过程&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;行动&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;分析每个员工所处的象限， 以及应该使用的领导风格，用不同的行为模式和话术进行领导&lt;/li&gt;
  &lt;li&gt;尝试将不同象限里的员工进行组合，互相产生良性影响&lt;/li&gt;
  &lt;li&gt;尝试识别和影响“非正式团体”&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/management/2016/07/29/effective-leadership/</link>
        <guid isPermaLink="true">http://laichendong.com/management/2016/07/29/effective-leadership/</guid>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>企业文化就是周围的空气</title>
        <description>&lt;p&gt;领导力培训里有一个环节叫“文化大讲堂”，我听到这个名称的第一反应就是“这一定是这个培训中最无聊的部分了。”，做讲堂的老师是一个HR高管，由于时间冲突，第一天还没讲成。我心里还阴暗的想，“果不其然！”&lt;/p&gt;

&lt;p&gt;但是听完智晖总一个小时的演讲。我已经被深深的折服了。&lt;strong&gt;这显然是这次培训中最精彩的部分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;她首先从她个人经历出发，讲了她的家庭，她的职业经历，为什么在千橡最低谷的时候来北京，最后，她让我们猜，她这样的一个人，她的团队的文化会是怎么样的？进而引出说，文化到底是什么东西？文化是如何被人感知到的？这两个问题。她说，文化，不是写在墙上的标语，不是嘴里喊的口号，&lt;strong&gt;文化就是你周围的空气&lt;/strong&gt; 假设一个人来京东面试，他会用他的眼睛，用他的鼻子，用他的耳朵，皮肤等一切感官感受到京东的文化。而我们作为管理者，传递文化的方式就是去践行它。&lt;/p&gt;

&lt;p&gt;另外，她提出了一个问题，你的职位从M2到M3，哪些东西是变了的，哪些东西是没变的？引发了每个人的思考。进而，她提到了提问的重要性，让我们要学习如何提问。&lt;/p&gt;

&lt;p&gt;其实最打动我的是她演讲完的一个小动作——&lt;strong&gt;她收起了她的录音笔&lt;/strong&gt; 她说每次她自己出去讲东西，都是录下来，回去第一时间复盘，找出能改进的地方。真是应了那句话：比你聪明的人还比你努力！&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/management/2016/07/29/culture-is-air/</link>
        <guid isPermaLink="true">http://laichendong.com/management/2016/07/29/culture-is-air/</guid>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>创新的三大障碍</title>
        <description>&lt;p&gt;关于创新，总共有三大障碍，首当其冲的就是&lt;strong&gt;不能正确认知自己，看不到自己。&lt;/strong&gt;这个怎么说？我们在做事时，往往不能跳出来审视自己正在做的事情是否值得，是否有足够的产出。比如作家一直在纠结写一个惊艳的开头，或者干脆对着稿纸发呆而不动笔；又比如程序员对一个问题调试跟踪了一周，也没想起来问问别人；再比如我们总是忙于开各种各样的会议却不知道是为了什么，会议的结果是什么。&lt;/p&gt;

&lt;p&gt;自己很难发现这些问题，越是效率低下时越难以发现。我们必须借助其他人的帮助，但是当别人说你或者你在说别人时，一定要注意“别生气！”，别让你的老婆来做这件事！&lt;/p&gt;

&lt;p&gt;很多能成为解决问题的领导者的人都在这个障碍中牺牲了！&lt;/p&gt;

&lt;p&gt;第二个障碍是&lt;strong&gt;还没真正理解问题，就急于给出答案， 而且针对所有问题，给出的答案都是一样的！欺骗自己，以为早就知道所有问题的答案&lt;/strong&gt;每一个问题都有其特定的场景和条件，我们必须先理解问题，才有可能给出正确的解决方案。&lt;/p&gt;

&lt;p&gt;最后一个障碍是&lt;strong&gt;认为所有问题都_有且仅有_一个答案。&lt;/strong&gt;不愿意相信还有别的解决办法。其实所有问题，都应该不止有一个解决方案。不是你的解决方案就绝对好，我的就绝对不好。 &lt;strong&gt;要学会包容不同和接受变通&lt;/strong&gt;。&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/read/2016/07/27/three-obstacles-of-innovating/</link>
        <guid isPermaLink="true">http://laichendong.com/read/2016/07/27/three-obstacles-of-innovating/</guid>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>经理、领导、教练</title>
        <description>&lt;p&gt;我们在自己的专业领域，一开始往往都是孤军奋战，一个人搞定各种事儿，对团队做出贡献。这时候叫 &lt;strong&gt;个人贡献者&lt;/strong&gt;。然后我们从优秀的个人贡献者被提拔为 &lt;strong&gt;管理者&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们作为管理者，每天所做的各种管理行为，其实背后是由3种角色来支撑的——经理，领导，教练。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;经理&lt;/strong&gt;，对应的英文是 &lt;strong&gt;manager&lt;/strong&gt; 是man+age+r， 哈哈，这貌似是说一个人上了年纪就可以当经理了！其实真的差不多。 &lt;strong&gt;经理关注的是事儿，关注的是当下。&lt;/strong&gt; 经理的典型话语是：“小伙儿，这事儿应该 1，2，3 这么干，这么干”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;领导&lt;/strong&gt; 对应的英文是 &lt;strong&gt;leader&lt;/strong&gt; ，用词根分析是 &lt;code class=&quot;highlighter-rouge&quot;&gt;path finder&lt;/code&gt; 的意思。 &lt;strong&gt;在未知的领域找到路并且带人走过去&lt;/strong&gt; 这人就是领导。这里面有两层含义，一层是要 &lt;strong&gt;找到路&lt;/strong&gt; ，这关注的是 &lt;strong&gt;对未来的洞见的能力&lt;/strong&gt; 。另一层是 &lt;strong&gt;带到人&lt;/strong&gt; ，这关注的是 &lt;strong&gt;对人的影响力&lt;/strong&gt; 。领导的典型话语是：“小伙儿，跟我好好干，一定有前途。”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;教练&lt;/strong&gt; 对应的英文是 &lt;strong&gt;coach&lt;/strong&gt; ，coach的中文意思是“四轮马车”，意思是将一个人从一个地方带到另一个地方。在管理上的引申意义就是将一个人从某个状态提升到另一个状态。如果你要改变一个人，首先要做到的就是要了解一个人，因人施教。要有 &lt;strong&gt;同理心&lt;/strong&gt; 。注意同理心和同情心的不同：&lt;code class=&quot;highlighter-rouge&quot;&gt;同理心=同情心+发掘+引导&lt;/code&gt;，同理心要求的不光是能感同身受，还要能从中发掘到潜在的有价值的信号，并且加以引导往好的方向发展。作为经理，是职位赋予的能力；作为领导，是个人魅力赋予的能力，而作为教练，能赋予你能力的是&lt;strong&gt;信任&lt;/strong&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;信任=（亲密度*能力*信誉度）/自私度&lt;/code&gt; 。教练的典型话语是：”小伙儿，这事儿你是怎么想的？哦，这样这样会不会好一点？“&lt;/p&gt;

&lt;p&gt;上面说了三种角色，每种角色有自己的关注点和典型的行为模式。其实这背后是有理论支撑的。这个理论叫&lt;strong&gt;神经语言学,NLP( &lt;a href=&quot;https://en.wikipedia.org/wiki/Neuro-linguistic_programming&quot;&gt;Neuro-linguistic programming&lt;/a&gt; )&lt;/strong&gt; 他是一个7层模型。研究的是 &lt;strong&gt;特定的环境&lt;/strong&gt; 让不同的人做出不同的 &lt;strong&gt;行为&lt;/strong&gt;，而支撑行为的是 &lt;strong&gt;知识和技能&lt;/strong&gt; ，知识和技能背后的是 &lt;strong&gt;想法&lt;/strong&gt;，想法背后的是 &lt;strong&gt;价值观&lt;/strong&gt; 而影响价值观的是所处的 &lt;strong&gt;角色&lt;/strong&gt;。最高层面的就是 &lt;strong&gt;精神归属了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;刚从优秀的个人贡献者转成初级管理者的同学。往往保持思维的惯性，做事的风格是和经理很像。但其实我们在做一个管理行为前，首先应该想想这是一个什么样的环境（场景），针对这种场景，应该使用什么样的行为去对待。也就是说你背后要以什么角色去处理这件事情。不要用第一反应，应该先想想，我是管理者，我要用什么角色。当遇见一个场景不用再刻意的想用什么角色应对都能处理的很好了。就成熟了。&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/management/2016/07/27/manager-leader-coach/</link>
        <guid isPermaLink="true">http://laichendong.com/management/2016/07/27/manager-leader-coach/</guid>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>《成为技术领导者》</title>
        <description>&lt;p&gt;在成长的过程中，通常伴随着痛苦！而我们会找各种理由来逃避这些痛苦。同时，&lt;strong&gt;也逃避了成长！&lt;/strong&gt;&lt;br /&gt;
以下是一些最典型的&lt;strong&gt;借口&lt;/strong&gt;：&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;我不是主管&lt;/h2&gt;
&lt;p&gt;最常见的借口莫过于说我不是主管，我没有头衔，所以我不能（不用）领导。实际上，_潜在的领导_比_被任命的领导_要&lt;strong&gt;多得多&lt;/strong&gt;。&lt;br /&gt;
人们往往把&lt;strong&gt;最薄弱的&lt;/strong&gt;的环节和最&lt;strong&gt;最关键的&lt;/strong&gt;的环节弄混淆。比如，发动机中火花塞最容易坏，他是最薄弱的环节，但不是最关键的环节。设计良好的发动机，可能就没有火花塞（比如柴油机），至少，也是设计成火花塞是容易替换的。在一个团队里，被任命的领导就像火花塞一样。其实他是最薄弱的环节，而不是最关键的环节。所以，设计良好的团队。领导者力应该是来自每一个人的，而不是来自那个被任命的领导。如果你要解决问题，现在就施展你的领导力吧。不用等着被任命！&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;我不是当领导的那类人&lt;/h2&gt;
&lt;p&gt;大家一提到领导，可能都是刘强东，马云那样的，特别能忽悠，特别能激励人心。而技术人员，往往在领袖魅力和组织技巧上相对较弱。所以就因此丧失信心，说出“我不是当领导的那类人”这样的丧气话。&lt;br /&gt;
其实，作为技术领导者，我们依靠的不是激励，也不是组织，我们依靠的是创新。我们依靠的是给团队提供更多的解决问题的办法。换句话说，我们的技术能力，我们的专业能力能弥补这方面的不足。想想马化腾和李彦宏吧。他们不像马云那么能忽悠，生意做得一样大！创新型领导力，激励型领导力和组织型领导力是相辅相成可以互相促进的。任何人都能学会，无论你是否觉得你是不是能当领导的那类人&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;我的技术会退步&lt;/h2&gt;
&lt;p&gt;这是一个很痛苦的事儿，成为技术领导者之前大多都是技术精英。但这个过程中需要牺牲一些技术资本来提升交际能力。许多人包括我对此非常痛苦。但要意识到，我们通过从自己的专业领域跳出来，从而掌握一些通用的能力，这也非常好。用MOI的专业术语来说就是要在三个因素之间求得平衡，降低一些创新技能，换取一些激励和组织能力。这种折中&lt;strong&gt;无可避免&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;成长的压力很大&lt;/h2&gt;
&lt;p&gt;承认自己技术退步，是一件非常痛苦的事儿。要成长，就意味着改变，就会有压力，当然如果你不想成长，你就可以一直保持现状，从而获得安逸的状态，但是一旦外界环境改变，迫使你要改变的时候，带来的压力就会非常巨大，比如国企改革导致的下岗。要改变，就必须付出点什么！&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;我不用那么强大&lt;/h2&gt;
</description>
        <pubDate>Sat, 16 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/read/2016/07/16/i-cant-beacause/</link>
        <guid isPermaLink="true">http://laichendong.com/read/2016/07/16/i-cant-beacause/</guid>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>失乐园</title>
        <description>&lt;p&gt;看完的书需要有一些收获也好，有些念想也好。我想每看完一本，至少应该留下些什么吧。&lt;br /&gt;
这次看完渡边淳一的《失乐园》，心情还是挺复杂的。不是很舒服，很虐心的感觉。&lt;br /&gt;
两个人相爱，或者说被性吸引，以至于叛离现实生活，众叛亲离，最后一起自杀赴死！感觉人的感情实在太强大了。让人害怕。&lt;br /&gt;
另外感觉日本小说都有一种魔力，能够构建起某种场，在阅读的时候一直是某种氛围或者某种情愫萦绕其上。&lt;br /&gt;
很平实的词汇，很真实的细节，很有画面感，在阅读的时候甚至能想象出要是改编成电影的 话，男女主角的语气，甚至表情是什么样的。&lt;br /&gt;
其中很多场景的描写也会让人想起自己的过去和经历过的女人们，有些不愿意，又不自觉的将自己往男主身上套。&lt;br /&gt;
平 但 震撼人心，让我想起了也是一部日本的电影《入殓师》&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/read/2016/07/12/paradise-lost/</link>
        <guid isPermaLink="true">http://laichendong.com/read/2016/07/12/paradise-lost/</guid>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>在服务端将HTML转成图片</title>
        <description>&lt;p&gt;有一些场景，需要&lt;strong&gt;将网页转换成图篇&lt;/strong&gt;。比如为了兼容性把网页图表生成截图随邮件发送，网页热力图的底图等等。&lt;/p&gt;

&lt;p&gt;我想总不能搞个浏览器，将网页放进去然后截图吧。浏览器还不一定开放了这种接口呢。出于效率和规模的考虑，也不现实啊。&lt;/p&gt;

&lt;p&gt;然后搜了一下。发现一些办法：&lt;/p&gt;

&lt;h2 id=&quot;awtswing&quot;&gt;1. 使用awt或者swing&lt;/h2&gt;
&lt;p&gt;思路基本上是现在 AWT or Swing 的Panel上显示网页，在把Panel输出为 image 文件。java 本身的API有提供相关的结果，但是直接产生的效果不是很好&lt;/p&gt;

&lt;h2 id=&quot;h5apicanvas&quot;&gt;2. 使用h5的api，将网页画到canvas上&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://html2canvas.hertzen.com/screenshots.html&quot;&gt;html2canvas&lt;/a&gt;就是这样的一个东西。但是兼容性不好，中文字体啦，处理懒加载啦，各种问题。&lt;/p&gt;

&lt;h2 id=&quot;phantomjs&quot;&gt;3. 使用类似phantomjs这样的东西&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://phantomjs.org/&quot;&gt;phantomjs&lt;/a&gt;是一个没有界面的，提供了js API的WebKit。他很快，且原生支持各种web标准，比如Dom处理，CSS选择器等等。&lt;br /&gt;
使用phantomjs，首先要在服务器上安装phantomjs。然后用JNI调用本地命令和他交互就好了，就像imageMagic一样。&lt;br /&gt;
据官网介绍，他用来做页面的自动化测试也是非常棒的！&lt;br /&gt;
与他相似的还有&lt;a href=&quot;https://slimerjs.org/&quot;&gt;slimerjs&lt;/a&gt;,只是他基于Gecko。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;4. 还有一些其他的类库&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/java-html2image/&quot;&gt;Html2Image&lt;/a&gt;, &lt;a href=&quot;http://lobobrowser.org/&quot;&gt;Cobra&lt;/a&gt; 等等&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2016/07/11/server-side-html-to-image/</link>
        <guid isPermaLink="true">http://laichendong.com/2016/07/11/server-side-html-to-image/</guid>
        
        
      </item>
    
      <item>
        <title>导出的CSV在excel中打开乱码</title>
        <description>&lt;p&gt;在项目中经常会遇到需要到导出excel的场景，为了简化和兼容性，常常会变成“导出csv”。&lt;br /&gt;
这其中发现一个怪现象：&lt;strong&gt;UTF-8编码的csv文件用excel打开会乱码，而GBK编码的不会。&lt;/strong&gt;&lt;br /&gt;
作为高端大气的应用，显然不希望生成个GBK编码的文件啊。（GBK在我mac下用sublime打开也会是乱码的）&lt;br /&gt;
在网上查到说excel是使用ANSI编码打开文件的。而ANSI在大陆就是GBK。so，貌似问题无解啊，就得用GBK！&lt;br /&gt;
后来继续google，发现如果excel打开的是带BOM的UTF-8文件的话，是不会有问题的。&lt;br /&gt;
于是，&lt;strong&gt;生成文件时，加上UTF-8的BOM头&lt;/strong&gt;，搞定！&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xEF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xBF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 写U8 BOM 否则excel打开会乱码&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSVWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;扩展阅读&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ANSI编码&lt;br /&gt;
ANSI是美国国家标准学会（American National Standards Institute，ANSI）的缩写，他是国际标准化组织和国际电工委员会的成员。如果ANSI作为一种编码来说。不同的国家制定了不同的标准。&lt;br /&gt;
比如：中国大陆的GBK，台湾的BIG5等等，不同地区的标准还互不兼容！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F&quot;&gt;BOM头&lt;/a&gt;&lt;br /&gt;
BOM是字节顺序标记（byte-order mark）的缩写，如字面意思，他是用来标记文件里的字节的顺序的，告诉读文件的人如何解析。&lt;br /&gt;
UTF-8的BOM为&lt;code class=&quot;highlighter-rouge&quot;&gt;EF BB BF&lt;/code&gt;, UTF-16 大端序的BOM为&lt;code class=&quot;highlighter-rouge&quot;&gt;FE FF&lt;/code&gt;, 小端序为&lt;code class=&quot;highlighter-rouge&quot;&gt;FF FE&lt;/code&gt;。&lt;br /&gt;
一些编辑器能直接显示文件编码，比如windows下的Notepad++，而我用的sublime Text 2 则需要额外安装插件：Show Encoding.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2016/07/08/export-csv-and-open-in-ms-excel/</link>
        <guid isPermaLink="true">http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2016/07/08/export-csv-and-open-in-ms-excel/</guid>
        
        
        <category>不好分类的</category>
        
      </item>
    
      <item>
        <title>zsh等shell软件如何通过github实现自动更新功能</title>
        <description>&lt;p&gt;我的shell装了&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;zsh&lt;/a&gt;,不用说，这是一个很棒的shell增强软件。注意到他和其他一些基于github的软件一样，貌似直接把github当成更新服务器了。这让我觉得很cool啊。就看了下大概是怎么实现的。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;1、如何检测更新&lt;/h1&gt;
&lt;p&gt;要自动更新自然就要先能检测到软件有更新。如果自动升级选项开启的话，zsh会首先执行&lt;code class=&quot;highlighter-rouge&quot;&gt;$ZSH/tools/check_for_upgrade.sh&lt;/code&gt;文件来检查是否有更新。&lt;br /&gt;
zsh会用&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zsh-update&lt;/code&gt;来存储最近一次更新的日期，如果当前日期和上次更新的日期差了一定天数（默认13天）则会提示为你是否要更新，不管选择是或否 都会更新&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zsh-update&lt;/code&gt;文件的内容。如果具备其他的更新条件，比如有文件夹的鞋权限，比如git命令可用等等就具体执行更新动作了。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;2、执行更新&lt;/h1&gt;
&lt;p&gt;具体的更新动作是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;$ZSH/tools/upgrade.sh&lt;/code&gt;完成的。看了下这个文件，so easy！ 大部分都是用来设置输出格式的。核心的就只有一句：&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull --rebase --stat origin master&lt;/code&gt; ok，这就将要更新的东西更新下来了。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;3、扩展知识点&lt;/h1&gt;
&lt;p&gt;在看zsh实现的过程中，做为一个shell门外的菜鸟，了解到了如下一些知识点：&lt;/p&gt;

&lt;p&gt;1、 &lt;code class=&quot;highlighter-rouge&quot;&gt;$EPOCHSECONDS&lt;/code&gt;显示当前epoch时间（从1970年1月1日 0点到现在的时间）的秒数，这是一个内置环境变量？&lt;/p&gt;

&lt;p&gt;2、 &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;[[]]&lt;/code&gt;。代码中大量看到这两种结构，单中括号是shell的内部命令，和&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;等同，可以用一些参数表示不同的测试功能，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;测试文件是否存在，&lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt;测试文件是否可写，&lt;code class=&quot;highlighter-rouge&quot;&gt;-z&lt;/code&gt;测试字符串是否为空等等，更多参考&lt;a href=&quot;http://blog.csdn.net/king_on/article/details/7281341&quot;&gt;随便找的一篇文章&lt;/a&gt;.而双中括号是shell里的关键字，比前者更加通用，括起来的字符会发生“参数扩展”和“命令替换”——这句没看懂~&lt;/p&gt;

&lt;p&gt;3、用&lt;code class=&quot;highlighter-rouge&quot;&gt;whence&lt;/code&gt;命令检查软件是否安装。whence xxx将显示xxx命令的路径或者别名定义。 如果一个命令的路径是 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt; 那说明这个命令没有被正确安装，不可用！比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;whence git &amp;gt;/dev/null || return 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4、&lt;code class=&quot;highlighter-rouge&quot;&gt;tput&lt;/code&gt;他可以控制终端的光标文本等。zsh绚丽的终端界面就是用的这玩意儿，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;RED=&quot;$(tput setaf 1)&quot;  NORMAL=&quot;$(tput sgr0)&quot;&lt;/code&gt;然后&lt;code class=&quot;highlighter-rouge&quot;&gt;${RED}我是红的${NORMAL}我又正常了&lt;/code&gt;，其他功能介绍看&lt;a href=&quot;http://blog.csdn.net/l1905/article/details/8994705&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5、在命令行画画！相信很多人都见过纯文本的流程图，字符画什么的，觉得很cool。zsh也用了。我找了找，赠送两个装B网站：&lt;a href=&quot;http://asciiflow.com/&quot;&gt;asciiflow&lt;/a&gt; AND  &lt;a href=&quot;http://search.cpan.org/dist/App-Asciio/lib/App/Asciio.pm&quot;&gt;Asciio&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2016/06/20/shell-software-how-to-auto-upgrade-with-github/</link>
        <guid isPermaLink="true">http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2016/06/20/shell-software-how-to-auto-upgrade-with-github/</guid>
        
        
        <category>不好分类的</category>
        
      </item>
    
      <item>
        <title>东东学python</title>
        <description>&lt;p&gt;这是我看&lt;a href=&quot;http://www.swaroopch.com/notes/python/&quot;&gt;a byte of python&lt;/a&gt;的笔记，如果你也是java程序员，希望你能感到亲切。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单引号和双引号都可以做字符串字面量，三引号更强，里面可以随意使用单引号和双引号，还可以换行，用于&lt;code class=&quot;highlighter-rouge&quot;&gt;文档字符串&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;格式化占位符用&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;位置|名字&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;，格式指定类似c，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;{0:.3f}&#39;.format(1.0/3)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;命名习惯用下划线连接，而非驼峰方式或其他&lt;/li&gt;
  &lt;li&gt;分号可以用来分割行（语句），但强烈建议直接换行。&lt;code class=&quot;highlighter-rouge&quot;&gt;在一个物理行内只写一个逻辑行&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;while循环可以配一个else，在循环结束时执行else块.for循环同理&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for..in&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;函数用&lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;定义&lt;/li&gt;
  &lt;li&gt;参数采用值传递，作用域在函数体内，改变值不会影响外部。如果想影响外部，采用&lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt;语句&lt;/li&gt;
  &lt;li&gt;函数参数可以设置默认值 &lt;code class=&quot;highlighter-rouge&quot;&gt;def func(a,b=1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;函数调用时，可以通过指定参数名字，改变传参顺序和个数&lt;/li&gt;
  &lt;li&gt;变长参数列表：&lt;code class=&quot;highlighter-rouge&quot;&gt;*param&lt;/code&gt;用来声明普通的变长参数集合，&lt;code class=&quot;highlighter-rouge&quot;&gt;**param&lt;/code&gt;用来声明带名字的变长参数集合&lt;/li&gt;
  &lt;li&gt;一个简单的py文件就是一个模块，运行时可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__=‘__main__’&lt;/code&gt;来判断，当前程序是独立运行还是被当做模块被引用&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from mymodule import *&lt;/code&gt;可以引入模块里的所有公有names，但不引入&lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt;开头的私有names&lt;/li&gt;
  &lt;li&gt;list是一种基本的数据结构，比java的list和array都强哦。可以包含不同数据类型的元素，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;l = [1, &#39;2&#39;, (3,4)]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;tuple是另一种数据结构，和list相似，但没有list那么多功能，且元组是“不可变”的&lt;/li&gt;
  &lt;li&gt;Dictionary类似map，&lt;code class=&quot;highlighter-rouge&quot;&gt;for k, v in dic.items()&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;dic[&#39;key&#39;]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;sequence， list  tuple  string 这些都是sequence，他的主要功能是判断in 和 not in。还有按序号访问，最重要的是支持切片操作&lt;/li&gt;
  &lt;li&gt;用tuple可以实现“多个返回值”的效果&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;os.sep&lt;/code&gt;路径分隔符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;os.system&lt;/code&gt;调用系统命令，返回0标示成功，否则返回错误码&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Software is grown, not built.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;相当于this&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;myObject.method(arg1, arg2)&lt;/code&gt;会被python转换为&lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass.method(myObject, arg1, arg2)&lt;/code&gt;调用。所以,如果一个方法没参数，最少都有一个参数是&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class Person&lt;/code&gt; 不是用def&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pass&lt;/code&gt; 表示一个空块&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt;相当于构造方法&lt;/li&gt;
  &lt;li&gt;类变量，共享给这个类的所有对象访问。类比静态变量&lt;/li&gt;
  &lt;li&gt;对象变量，就是某个对象私有了，类比成员变量&lt;/li&gt;
  &lt;li&gt;用两个下划线开头的 为私有变量名 &lt;code class=&quot;highlighter-rouge&quot;&gt;__privatevar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class Man(Person)&lt;/code&gt; 这样就声明了Man继承Person&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;raw_input()&lt;/code&gt; 等待用户输入&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;open(&#39;poem.txt&#39;, &#39;w&#39;)&lt;/code&gt;打开文件，模式有r读，w写，a追加，t文本，b二进制，记得&lt;code class=&quot;highlighter-rouge&quot;&gt;close()&lt;/code&gt; ^_^&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;try..except&lt;/code&gt;处理异常&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class ShortInputException(Exception)&lt;/code&gt; 通过继承Exception来定义异常&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;raise ShortInputException(...)&lt;/code&gt;向上抛出异常&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Oct 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/python/2015/10/25/python/</link>
        <guid isPermaLink="true">http://laichendong.com/python/2015/10/25/python/</guid>
        
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
