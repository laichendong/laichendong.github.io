<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>咖啡不苦</title>
    <description>赖晨东的博客 | 咖啡不苦</description>
    <link>http://laichendong.com/</link>
    <atom:link href="http://laichendong.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 11 Jul 2016 18:36:41 +0800</pubDate>
    <lastBuildDate>Mon, 11 Jul 2016 18:36:41 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>在服务端将HTML转成图片</title>
        <description>&lt;p&gt;有一些场景，需要&lt;strong&gt;将网页转换成图篇&lt;/strong&gt;。比如为了兼容性把网页图表生成截图随邮件发送，网页热力图的底图等等。&lt;/p&gt;

&lt;p&gt;我想总不能搞个浏览器，将网页放进去然后截图吧。浏览器还不一定开放了这种接口呢。出于效率和规模的考虑，也不现实啊。&lt;/p&gt;

&lt;p&gt;然后搜了一下。发现一些办法：&lt;/p&gt;

&lt;h2 id=&quot;awtswing&quot;&gt;1. 使用awt或者swing&lt;/h2&gt;
&lt;p&gt;思路基本上是现在 AWT or Swing 的Panel上显示网页，在把Panel输出为 image 文件。java 本身的API有提供相关的结果，但是直接产生的效果不是很好&lt;/p&gt;

&lt;h2 id=&quot;h5apicanvas&quot;&gt;2. 使用h5的api，将网页画到canvas上&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://html2canvas.hertzen.com/screenshots.html&quot;&gt;html2canvas&lt;/a&gt;就是这样的一个东西。但是兼容性不好，中文字体啦，处理懒加载啦，各种问题。&lt;/p&gt;

&lt;h2 id=&quot;phantomjs&quot;&gt;3. 使用类似phantomjs这样的东西&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://phantomjs.org/&quot;&gt;phantomjs&lt;/a&gt;是一个没有界面的，提供了js API的WebKit。他很快，且原生支持各种web标准，比如Dom处理，CSS选择器等等。&lt;br /&gt;
使用phantomjs，首先要在服务器上安装phantomjs。然后用JNI调用本地命令和他交互就好了，就像imageMagic一样。&lt;br /&gt;
据官网介绍，他用来做页面的自动化测试也是非常棒的！&lt;br /&gt;
与他相似的还有&lt;a href=&quot;https://slimerjs.org/&quot;&gt;slimerjs&lt;/a&gt;,只是他基于Gecko。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;4. 还有一些其他的类库&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/java-html2image/&quot;&gt;Html2Image&lt;/a&gt;, &lt;a href=&quot;http://lobobrowser.org/&quot;&gt;Cobra&lt;/a&gt; 等等&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2016/07/11/server-side-html-to-image/</link>
        <guid isPermaLink="true">http://laichendong.com/2016/07/11/server-side-html-to-image/</guid>
        
        
      </item>
    
      <item>
        <title>导出的CSV在excel中打开乱码</title>
        <description>&lt;p&gt;在项目中经常会遇到需要到导出excel的场景，为了简化和兼容性，常常会变成“导出csv”。&lt;br /&gt;
这其中发现一个怪现象：&lt;strong&gt;UTF-8编码的csv文件用excel打开会乱码，而GBK编码的不会。&lt;/strong&gt;&lt;br /&gt;
作为高端大气的应用，显然不希望生成个GBK编码的文件啊。（GBK在我mac下用sublime打开也会是乱码的）&lt;br /&gt;
在网上查到说excel是使用ANSI编码打开文件的。而ANSI在大陆就是GBK。so，貌似问题无解啊，就得用GBK！&lt;br /&gt;
后来继续google，发现如果excel打开的是带BOM的UTF-8文件的话，是不会有问题的。&lt;br /&gt;
于是，&lt;strong&gt;生成文件时，加上UTF-8的BOM头&lt;/strong&gt;，搞定！&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xEF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xBF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 写U8 BOM 否则excel打开会乱码&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSVWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;扩展阅读&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ANSI编码&lt;br /&gt;
ANSI是美国国家标准学会（American National Standards Institute，ANSI）的缩写，他是国际标准化组织和国际电工委员会的成员。如果ANSI作为一种编码来说。不同的国家制定了不同的标准。&lt;br /&gt;
比如：中国大陆的GBK，台湾的BIG5等等，不同地区的标准还互不兼容！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F&quot;&gt;BOM头&lt;/a&gt;&lt;br /&gt;
BOM是字节顺序标记（byte-order mark）的缩写，如字面意思，他是用来标记文件里的字节的顺序的，告诉读文件的人如何解析。&lt;br /&gt;
UTF-8的BOM为&lt;code class=&quot;highlighter-rouge&quot;&gt;EF BB BF&lt;/code&gt;, UTF-16 大端序的BOM为&lt;code class=&quot;highlighter-rouge&quot;&gt;FE FF&lt;/code&gt;, 小端序为&lt;code class=&quot;highlighter-rouge&quot;&gt;FF FE&lt;/code&gt;。&lt;br /&gt;
一些编辑器能直接显示文件编码，比如windows下的Notepad++，而我用的sublime Text 2 则需要额外安装插件：Show Encoding.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2016/07/08/export-csv-and-open-in-ms-excel/</link>
        <guid isPermaLink="true">http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2016/07/08/export-csv-and-open-in-ms-excel/</guid>
        
        
        <category>不好分类的</category>
        
      </item>
    
      <item>
        <title>zsh等shell软件如何通过github实现自动更新功能</title>
        <description>&lt;p&gt;我的shell装了&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;zsh&lt;/a&gt;,不用说，这是一个很棒的shell增强软件。注意到他和其他一些基于github的软件一样，貌似直接把github当成更新服务器了。这让我觉得很cool啊。就看了下大概是怎么实现的。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;1、如何检测更新&lt;/h1&gt;
&lt;p&gt;要自动更新自然就要先能检测到软件有更新。如果自动升级选项开启的话，zsh会首先执行&lt;code class=&quot;highlighter-rouge&quot;&gt;$ZSH/tools/check_for_upgrade.sh&lt;/code&gt;文件来检查是否有更新。&lt;br /&gt;
zsh会用&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zsh-update&lt;/code&gt;来存储最近一次更新的日期，如果当前日期和上次更新的日期差了一定天数（默认13天）则会提示为你是否要更新，不管选择是或否 都会更新&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zsh-update&lt;/code&gt;文件的内容。如果具备其他的更新条件，比如有文件夹的鞋权限，比如git命令可用等等就具体执行更新动作了。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;2、执行更新&lt;/h1&gt;
&lt;p&gt;具体的更新动作是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;$ZSH/tools/upgrade.sh&lt;/code&gt;完成的。看了下这个文件，so easy！ 大部分都是用来设置输出格式的。核心的就只有一句：&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull --rebase --stat origin master&lt;/code&gt; ok，这就将要更新的东西更新下来了。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;3、扩展知识点&lt;/h1&gt;
&lt;p&gt;在看zsh实现的过程中，做为一个shell门外的菜鸟，了解到了如下一些知识点：&lt;/p&gt;

&lt;p&gt;1、 &lt;code class=&quot;highlighter-rouge&quot;&gt;$EPOCHSECONDS&lt;/code&gt;显示当前epoch时间（从1970年1月1日 0点到现在的时间）的秒数，这是一个内置环境变量？&lt;/p&gt;

&lt;p&gt;2、 &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;[[]]&lt;/code&gt;。代码中大量看到这两种结构，单中括号是shell的内部命令，和&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;等同，可以用一些参数表示不同的测试功能，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;测试文件是否存在，&lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt;测试文件是否可写，&lt;code class=&quot;highlighter-rouge&quot;&gt;-z&lt;/code&gt;测试字符串是否为空等等，更多参考&lt;a href=&quot;http://blog.csdn.net/king_on/article/details/7281341&quot;&gt;随便找的一篇文章&lt;/a&gt;.而双中括号是shell里的关键字，比前者更加通用，括起来的字符会发生“参数扩展”和“命令替换”——这句没看懂~&lt;/p&gt;

&lt;p&gt;3、用&lt;code class=&quot;highlighter-rouge&quot;&gt;whence&lt;/code&gt;命令检查软件是否安装。whence xxx将显示xxx命令的路径或者别名定义。 如果一个命令的路径是 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt; 那说明这个命令没有被正确安装，不可用！比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;whence git &amp;gt;/dev/null || return 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4、&lt;code class=&quot;highlighter-rouge&quot;&gt;tput&lt;/code&gt;他可以控制终端的光标文本等。zsh绚丽的终端界面就是用的这玩意儿，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;RED=&quot;$(tput setaf 1)&quot;  NORMAL=&quot;$(tput sgr0)&quot;&lt;/code&gt;然后&lt;code class=&quot;highlighter-rouge&quot;&gt;${RED}我是红的${NORMAL}我又正常了&lt;/code&gt;，其他功能介绍看&lt;a href=&quot;http://blog.csdn.net/l1905/article/details/8994705&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5、在命令行画画！相信很多人都见过纯文本的流程图，字符画什么的，觉得很cool。zsh也用了。我找了找，赠送两个装B网站：&lt;a href=&quot;http://asciiflow.com/&quot;&gt;asciiflow&lt;/a&gt; AND  &lt;a href=&quot;http://search.cpan.org/dist/App-Asciio/lib/App/Asciio.pm&quot;&gt;Asciio&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2016/06/20/shell-software-how-to-auto-upgrade-with-github/</link>
        <guid isPermaLink="true">http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2016/06/20/shell-software-how-to-auto-upgrade-with-github/</guid>
        
        
        <category>不好分类的</category>
        
      </item>
    
      <item>
        <title>东东学python</title>
        <description>&lt;p&gt;这是我看&lt;a href=&quot;http://www.swaroopch.com/notes/python/&quot;&gt;a byte of python&lt;/a&gt;的笔记，如果你也是java程序员，希望你能感到亲切。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单引号和双引号都可以做字符串字面量，三引号更强，里面可以随意使用单引号和双引号，还可以换行，用于&lt;code class=&quot;highlighter-rouge&quot;&gt;文档字符串&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;格式化占位符用&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;位置|名字&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;，格式指定类似c，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;{0:.3f}&#39;.format(1.0/3)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;命名习惯用下划线连接，而非驼峰方式或其他&lt;/li&gt;
  &lt;li&gt;分号可以用来分割行（语句），但强烈建议直接换行。&lt;code class=&quot;highlighter-rouge&quot;&gt;在一个物理行内只写一个逻辑行&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;while循环可以配一个else，在循环结束时执行else块.for循环同理&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for..in&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;函数用&lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;定义&lt;/li&gt;
  &lt;li&gt;参数采用值传递，作用域在函数体内，改变值不会影响外部。如果想影响外部，采用&lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt;语句&lt;/li&gt;
  &lt;li&gt;函数参数可以设置默认值 &lt;code class=&quot;highlighter-rouge&quot;&gt;def func(a,b=1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;函数调用时，可以通过指定参数名字，改变传参顺序和个数&lt;/li&gt;
  &lt;li&gt;变长参数列表：&lt;code class=&quot;highlighter-rouge&quot;&gt;*param&lt;/code&gt;用来声明普通的变长参数集合，&lt;code class=&quot;highlighter-rouge&quot;&gt;**param&lt;/code&gt;用来声明带名字的变长参数集合&lt;/li&gt;
  &lt;li&gt;一个简单的py文件就是一个模块，运行时可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__=‘__main__’&lt;/code&gt;来判断，当前程序是独立运行还是被当做模块被引用&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from mymodule import *&lt;/code&gt;可以引入模块里的所有公有names，但不引入&lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt;开头的私有names&lt;/li&gt;
  &lt;li&gt;list是一种基本的数据结构，比java的list和array都强哦。可以包含不同数据类型的元素，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;l = [1, &#39;2&#39;, (3,4)]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;tuple是另一种数据结构，和list相似，但没有list那么多功能，且元组是“不可变”的&lt;/li&gt;
  &lt;li&gt;Dictionary类似map，&lt;code class=&quot;highlighter-rouge&quot;&gt;for k, v in dic.items()&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;dic[&#39;key&#39;]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;sequence， list  tuple  string 这些都是sequence，他的主要功能是判断in 和 not in。还有按序号访问，最重要的是支持切片操作&lt;/li&gt;
  &lt;li&gt;用tuple可以实现“多个返回值”的效果&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;os.sep&lt;/code&gt;路径分隔符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;os.system&lt;/code&gt;调用系统命令，返回0标示成功，否则返回错误码&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Software is grown, not built.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;相当于this&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;myObject.method(arg1, arg2)&lt;/code&gt;会被python转换为&lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass.method(myObject, arg1, arg2)&lt;/code&gt;调用。所以,如果一个方法没参数，最少都有一个参数是&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class Person&lt;/code&gt; 不是用def&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pass&lt;/code&gt; 表示一个空块&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt;相当于构造方法&lt;/li&gt;
  &lt;li&gt;类变量，共享给这个类的所有对象访问。类比静态变量&lt;/li&gt;
  &lt;li&gt;对象变量，就是某个对象私有了，类比成员变量&lt;/li&gt;
  &lt;li&gt;用两个下划线开头的 为私有变量名 &lt;code class=&quot;highlighter-rouge&quot;&gt;__privatevar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class Man(Person)&lt;/code&gt; 这样就声明了Man继承Person&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;raw_input()&lt;/code&gt; 等待用户输入&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;open(&#39;poem.txt&#39;, &#39;w&#39;)&lt;/code&gt;打开文件，模式有r读，w写，a追加，t文本，b二进制，记得&lt;code class=&quot;highlighter-rouge&quot;&gt;close()&lt;/code&gt; ^_^&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;try..except&lt;/code&gt;处理异常&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class ShortInputException(Exception)&lt;/code&gt; 通过继承Exception来定义异常&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;raise ShortInputException(...)&lt;/code&gt;向上抛出异常&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Oct 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/python/2015/10/25/python/</link>
        <guid isPermaLink="true">http://laichendong.com/python/2015/10/25/python/</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>jekyll设置语法高亮</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2015年09月11日，重要更新：
以下都是扯淡。现在jekyll已经原生支持语法高亮了。
直接将代码放到  {% highlight language %} 和 {% endhighlight %} 之间就ok了。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;使用jekyll的人，我想大部分都应该经常和代码打交道吧。那代码高亮自然少不了，今天就讲讲如何在jekyll中配置代码高亮。&lt;/p&gt;

&lt;p&gt;代码高亮的工具有很多。jekyll原生支持的是&lt;a href=&quot;http://pygments.org/&quot;&gt;pygments&lt;/a&gt;.&lt;br /&gt;
使的博客上的代码高亮的原理是用pygments生成一个css文件供页面引用，然后用jekyll的pygments插件将博客源文件中的代码处理成能使用该css的html代码。最后在浏览器的渲染下，代码就亮起来了。&lt;/p&gt;

&lt;p&gt;看名字就应该知道这pygments是一个python写的东西了。那就可以用&lt;a href=&quot;https://pypi.python.org/pypi/pip&quot;&gt;pip&lt;/a&gt;来安装了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;pip install Pygments&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;至于pip是什么，以及如何安装pip，就请自行google了。&lt;/p&gt;

&lt;p&gt;安装完之后就应该用他来生成css文件了：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;blogRoot &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pygmentize -S default -f html &amp;gt; css/pygments.css&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这条命令的两个参数分别指定的是默认的配色方案和目标格式是html。关于参数解释和其他可选参数请看&lt;a href=&quot;http://pygments.org/docs/cmdline/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有了这个css文件，要生效当然要在页面里引用。对于我这偷懒的人来说，就直接放在&lt;em&gt;_includes/head.html&lt;/em&gt;里了，这样做的好处和坏处都是每个页面都有这个css了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/css/pygments.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在css已经具备了。接下来要做的就是将页面上的代码转换成符合这个css的html了。我们先用gem安装pygment.rb&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install pygments.rb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后在配置文件&lt;em&gt;_config.yml&lt;/em&gt;中添加一行，告诉jekyll用pygment来处理高亮。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;highlighter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pygments&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们在源文件中，将代码放到  {% highlight language %} 和 {% endhighlight %} 之间就ok了。 其中language支持那些以及怎么写依然可以参照&lt;a href=&quot;http://pygments.org/docs/lexers/&quot;&gt;官网&lt;/a&gt;。&lt;br /&gt;
如果官方提供的300多种语言都不够用的话，那你干脆自己写一个得了。反正pygments支持自定义。&lt;br /&gt;
到这，你的代码就应该亮起来了！&lt;/p&gt;

&lt;p&gt;说句题外话。jekyll的口号是：什么都不用管，只用关心你的博客内容。我觉得就是扯淡。会自己搭博客的人。这应该是最烂的广告了。如果什么都没得折腾。那还用你干嘛。直接oschina上注册一个账号不是更好？&lt;br /&gt;
就是因为可以各种折腾，我才选用jekyll的。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;生命不息，折腾不止。&lt;/h1&gt;

</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/jekyll/2015/09/09/set-syntax-highlight-in-jekyll/</link>
        <guid isPermaLink="true">http://laichendong.com/jekyll/2015/09/09/set-syntax-highlight-in-jekyll/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>加班记（二）</title>
        <description>&lt;p&gt;今天又去公司处理了一个线上问题：我们依赖的一个接口可用率为0了！&lt;/p&gt;

&lt;p&gt;故事大概是这样的：我们依赖的一个写接口，最早主键是int类型的。虽然我们的sequence工具生成的是long型的数，但是为了“适应”接口就强转成int后再调用接口了。某一天，接口提供方意识到用int类型做为主键，随着业务发展很可能突破上限而造成麻烦。于是接口提供方将入参类型改成了long。于是我们的某位码农又将int强转成long给了接口！今天，就在今天。终于这个sequence的值超过了21亿+，就是有符号整形的最大值。然后将这个值强转成int后（其实是个负数）。用这个负数去调接口，然后就都out of range了。然后就没有然后了。&lt;/p&gt;

&lt;p&gt;解决的办法当然是将“画蛇添足”的程序逻辑修正。去掉long-&amp;gt;int-&amp;gt;long的过程，另外也发现数据库的字段类型是int(10)，顺手改成了bigint(20)。一切妥当后，可用率恢复。&lt;/p&gt;

&lt;p&gt;现在回过头来复盘，发现可以改进甚至避免这场“灾难”的地方太多了。&lt;/p&gt;

&lt;p&gt;在最初期，需要调用一个以int作为主键的接口时应该就是最好的避免灾难的时刻。这个时候如果调用方（我们）能提出疑问并协调修改的话。应该就不会有后面的事儿了。一方面，说明我们有业务主键类型最好别用int的意识。另一方面，又说明我们可能有“各人自扫门前雪，莫管他人瓦上霜”的坏毛病。或者，这可能是由于“跨部门合作太难了”之类的借口。但那真的是借口。更多的是自己的懒惰，不愿意推动罢了。&lt;/p&gt;

&lt;p&gt;然后是当接口提供方意识到问题，将入参类型进行了调整之后。我们的做法居然又是在入口做了一次强转！这几乎是一个不能容忍的低级错误!至于解决方案，除了强调，宣贯，恐怕就只能招有更好的习惯的人了,（当然，招人带来的其他一系列问题不在今天的讨论范围内）&lt;/p&gt;

&lt;p&gt;再然后是为什么我要跑到公司去处理这个问题。还好我去公司还算方便，十几分钟车程便到。但作为一个码农，这种工作方式还是挺丢人的。我的借口是公司的vpn难用，难申请。自己找的小软件又关键时刻掉链子。擦，这些都是借口好吗。回去上班第一件事儿就先把vpn申请下来吧！&lt;/p&gt;

&lt;p&gt;最后又是一个鄙视自己的地方了。都不好意思在这说，我改完代码，预发验证，通过，上正式，遗憾的是期待的可用率飙升并没有到来。百思不得其解之际down了一下刚上线的包。纳尼，竟然没有我刚改的代码！wtf，在git里只commit而没有push就build线上包了！好吧，自己面壁去了。&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2015/09/06/thinking-on-work-over-time-2/</link>
        <guid isPermaLink="true">http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2015/09/06/thinking-on-work-over-time-2/</guid>
        
        
        <category>不好分类的</category>
        
      </item>
    
      <item>
        <title>用jekyll和github pages写博客</title>
        <description>&lt;p&gt;题外话，在当今这个微博都还没来得及高兴一下就被朋友圈拉下神坛的年代，说如何搭建自己的博客系统似乎已经太过于过时了。&lt;br /&gt;
如果你有这样的想法，恐怕这篇文章不是非常适合你了。建议你把它关了去刷朋友圈。如果你和我一样，还是愿意折腾，并且愿意将折腾记录下来。那么，我们交个朋友吧。一起去刷朋友圈。&lt;/p&gt;

&lt;p&gt;工欲善其事，必先利其器。介绍一下我们要用到的两个工具。&lt;br /&gt;
首先登场的是：&lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;是&lt;em&gt;github&lt;/em&gt;提供的，免费的，类似于网页空间，一样的一种服务，每个账号和每个项目都可以对应一个pages站点。&lt;br /&gt;
今天的另一个主角叫&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;是一个用ruby写的，开源在github上的将纯文本文件转换成静态博客网站的一个工具。&lt;/p&gt;

&lt;p&gt;其实，有了github pages你就完全可以想怎么玩就怎么玩了。因为他就是一个网页空间。将html文件扔上去就行了。下面我们一步一步看如何配置你的github pages。我们要做的是个人博客，当然是账号级别的比较好。&lt;/p&gt;

&lt;p&gt;第一步，当然是要在github里建立一个仓库。注意：这个仓库的名字特别重要，需要这种格式：&lt;em&gt;你的用户名.github.io&lt;/em&gt;， 比如我，就是laichendong.github.io&lt;/p&gt;

&lt;p&gt;第二步，将这个仓库克隆到本地。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ git clone https://github.com/username/username.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第三步，写一个hello world到你的博客里。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ cd username.github.io
~ $ echo &quot;Hello World&quot; &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第四步，提交，推到远端。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add --all
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Initial commit&quot;&lt;/span&gt;
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;第五步，没有第五步了。浏览器里访问一下：http://username.github.io&lt;/p&gt;

&lt;p&gt;到这里，你已经拥有了一个你自己的博客站点。想写什么就写什么了！但是，开什么玩笑！我来是想些博客的。不是想来做网站的！这个时候就该jekyll上场了。&lt;/p&gt;

&lt;p&gt;第一步，安装jekyll&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;很悲催的是，国内的网络环境可能导致你在这一步就失败了。于是，我们求助于万能的淘宝，&lt;a href=&quot;http://ruby.taobao.org/&quot;&gt;http://ruby.taobao.org/&lt;/a&gt;是淘宝搭建的ruby gems镜像。感谢！&lt;br /&gt;
换源：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gem sources --remove https://rubygems.org/
~ $ gem sources -a https://ruby.taobao.org/
~ $ gem sources -l
	*** CURRENT SOURCES ***
	https://ruby.taobao.org
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这时候再运行安装命令应该就没问题了。&lt;/p&gt;

&lt;p&gt;第二步，新建一个博客&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ jekyll new myblog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第三步，运行博客服务器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ cd myblog
~/myblog $ jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这时候你你再浏览器里敲&lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;就能看到效果了。&lt;/p&gt;

&lt;p&gt;虽然在浏览器里你看到了一个页面，但你可能还有点蒙。我们回到myblog文件夹里看看，都是怎么回事儿。文件夹里的目录大概应该像这样，不完全一样也别大惊小怪。都是些一看就懂的东西&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── _config.yml // 博客配置文件
├── _drafts // 博客草稿
|   ├── begin-with-the-crazy-ideas.textile
|   └── on-simplicity-in-technology.markdown
├── _includes // 包含文件，公共头尾什么的
|   ├── footer.html
|   └── header.html
├── _layouts // 布局文件，用来组装页面架子的
|   ├── default.html
|   └── post.html
├── _posts // 你的博客原文
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile
|   └── 2009-04-26-barcamp-boston-4-roundup.textile
├── _site // 最终生成的博客站点
├── .jekyll-metadata // jekyll自己用的一些元数据，最好别把它放到git里区管理
└── index.html // 这个你懂的拉
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;假如你新写了一篇文章在&lt;em&gt;_posts&lt;/em&gt;里。先运行一下build在server就能看到了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ jekyll build
~ $ jekyll s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你不会想问我，怎么将jekyll生成的网站弄到github pages上去吧？额，很简单。把&lt;strong&gt;整个目录&lt;/strong&gt; 注意是整个目录，包括源文件配置文件等等，都扔到你的username.github.io这个仓库里去就行了。github pages能自动识别出来 _site 下才是你的站点。真是太tmd贴心了！&lt;/p&gt;

&lt;p&gt;如果你看到这了都还没放弃，说明我们已经是朋友了。&lt;br /&gt;
就再说两招吧：&lt;/p&gt;

&lt;p&gt;一，没事儿多看官网的文档。这才是王道。英文头疼的话，jekyll还有好心人翻译了中文的：&lt;a href=&quot;http://jekyllcn.com/&quot;&gt;http://jekyllcn.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;二，如果你像我一样，有自己的域名，切不喜欢github.io的二级域名的话，也可以配置解析，让github pages用自己的域名&lt;/p&gt;

&lt;p&gt;第一步是在你的仓库里建立一个&lt;em&gt;CNAME&lt;/em&gt;文件。这个文件里就写你的域名就行了，比如&lt;em&gt;laichendong.com&lt;/em&gt;，别有别的了。如果正确设置了CNAME文件，在你的仓库设置页面，应该能看到这样一行字。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Your site is published at http://laichendong.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第二步就是将你的域名解析指向到你的github给你的二级域名上就ok了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;器已经善了，工才是王道。博客已经搭建起来了，里面的博文才是最重要的。愿你记录非凡人生。&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 29 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/jekyll/2015/08/29/write-your-blog-with-jekyll-and-github-pages/</link>
        <guid isPermaLink="true">http://laichendong.com/jekyll/2015/08/29/write-your-blog-with-jekyll-and-github-pages/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>加班记</title>
        <description>&lt;p&gt;故事还得从一个需求说起。&lt;br /&gt;
某一天，运营提出一个需求要对某些商家下的所有商品打上某一个特殊标识用于做某个维度的销量统计。&lt;br /&gt;
今天，线上出现了一些价格极低的商品，被下了很多订单。出事故了！&lt;br /&gt;
这两者之间有什么关联？对，这两者之间并没什么卵关系。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;一&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关于批量处理数据。&lt;/strong&gt;我想这是一个不能避免的东西。在业务的发展过程中肯定会存在对历史数据的批量处理，迁移甚至是处理+迁移的需要。&lt;br /&gt;
如果是一个小得系统。就是一个数据库+上面几个页面展示。那好说。基本上是一条sql搞定的事情。但是随着系统越来越复杂，数据通常异构的存在不同的地方：DB，索引，缓存，还有下游系统。。。中。&lt;br /&gt;
这时一条sql显然就搞不定这事儿了。需要一个脚本（程序）来完成一系列的动作，才能保证整个系统的各个数据源保持一致。而要正确写出这个程序的人必须完全理解整个系统中这些数据的存储方式和计算逻辑。。。。mission impossible！&lt;br /&gt;
还要有模块化！一般某个数据源有横向的切面接口或某个业务有纵向的业务接口。这时候写这个脚本的人要做的就仅仅是理解并组合这些接口了。&lt;br /&gt;
这里有几个难点，一，这些接口要能被理解。这主要依赖于业务语义清晰。二，这些接口行为要正确，这主要依赖于接口的实现者理解接口的定义并正确的实现以及单元测试。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;二&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关于事故。&lt;/strong&gt;当事故已经发生了。那唯一能做的就是消除影响，查找原因和修复故障。注意，这三者是有顺序的。首先得用最快的速度消除影响至少不让影响扩大。比如这个例子中可以让商品下架。然后再查找愿意，只有知道了原因，才能正确修复故障。&lt;br /&gt;
找原因时一定要避免变成问责，那是后面的事儿。找原因时一定要避免变成问责，那是后面的事儿。找原因时一定要避免变成问责，那是后面的事儿。重要的事儿说三遍。有必要的话，还可以做个复盘反思。同样，反思一定要避免问责。反思一定要避免问责。反思一定要避免问责。&lt;br /&gt;
当事儿都解决了。如果需要的话，那就问责吧。责任一定在leader，而不在具体的执行者。责任一定在leader，而不在具体的执行者。责任一定在leader，而不在具体的执行者。&lt;br /&gt;
当然，最重要的，最重要的，最重要的是在事故发生前的所有时刻的工作中如何尽可能的降低事故发生的概率。（事故永远可能发生）&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;三&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关于推倒重来。&lt;/strong&gt;不要推到重来！不要推到重来！不要推到重来！不论你对已有的系统是多么的看不上，不论已有的系统看上去或实际上是多么的一坨屎。都应该调整他，而不是推倒重来。因为推倒重来只可以解决一些你已经看到的问题。但。。。不说了，都是泪。不要推倒重来，到重来，重来，来。&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2015/08/26/thinking-on-work-over-time/</link>
        <guid isPermaLink="true">http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2015/08/26/thinking-on-work-over-time/</guid>
        
        
        <category>不好分类的</category>
        
      </item>
    
      <item>
        <title>mac下设置JAVA_HOME</title>
        <description>&lt;p&gt;应该是我装了xcode的原因，我没有显式安装java，mac里也有java的环境了。然后当我想在命令行下运行mvn的命令时。就提示我要设置JAVA_HOME了。&lt;br /&gt;
当我去找JAVA_HOME在哪的时候。发现是“乱七八糟”的。高冷的mac怎么会那么烂？我肯定是错过了什么。于是求助于万能的google。果然：&lt;br /&gt;
可以这样&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=&quot;$(/usr/libexec/java_home)&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;甚至可以指定版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=&quot;$(/usr/libexec/java_home -v 1.6)&quot;
export JAVA_HOME=&quot;$(/usr/libexec/java_home -v 1.7)&quot;
export JAVA_HOME=&quot;$(/usr/libexec/java_home -v 1.8)&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;牛了逼的。果然高冷！&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/mac/2015/08/25/set-java-home-on-mac/</link>
        <guid isPermaLink="true">http://laichendong.com/mac/2015/08/25/set-java-home-on-mac/</guid>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>Open Terminal Here In Mac Os Finder</title>
        <description>&lt;p&gt;在windows中，可以配置“在当前位置打开命令行”，非常方便好用。所以想找一下在mac下有没有类似的功能。&lt;br /&gt;
找来找去，很遗憾，没找到很perfect的方法。&lt;/p&gt;

&lt;p&gt;1 可以通过“服务”实现“新建位于文件夹位置的终端标签/窗口”来实现。&lt;br /&gt;
“系统偏好设置” 》 “键盘” 》 “快捷键” 》 “服务” 》 “新建位于文件夹位置的终端标签/窗口”&lt;br /&gt;
甚至还可以设置快捷键，让我激动了一下。结果~~~&lt;br /&gt;
这并不是像windows中那样在打开的文件夹中 on fly用的。&lt;br /&gt;
而是要返回到上一级，选中这个文件夹才可以~&lt;/p&gt;

&lt;p&gt;2 可以将文件夹的图标拖动到终端的图标上去。可是拖动还是不够方便&lt;/p&gt;

&lt;p&gt;3 还可以执行 open -a terminal path/to/dir  的命令。 ~~~如果都已经开了命令行窗口，还要这干嘛，直接cd就ok啊。貌似这是第二条的原理。&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/mac/2015/08/24/open-terminal-here-in-mac-os-finder/</link>
        <guid isPermaLink="true">http://laichendong.com/mac/2015/08/24/open-terminal-here-in-mac-os-finder/</guid>
        
        
        <category>mac</category>
        
      </item>
    
  </channel>
</rss>
