<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>咖啡不苦</title>
    <description>赖晨东的博客 | 咖啡不苦</description>
    <link>http://laichendong.com/</link>
    <atom:link href="http://laichendong.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 23 Mar 2017 15:30:27 +0800</pubDate>
    <lastBuildDate>Thu, 23 Mar 2017 15:30:27 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>慕课网分析</title>
        <description>&lt;p&gt;学习能力应该是现代人最重要的一种能力没有之一了。现在基于互联网的在线学习正方兴未艾。前两年，达内、传智播客这些培训机构基本上是干掉了计算机的本科教育。很多本科毕业的学生在找到“码农”工作之前都要去这些培训机构回一次炉。通过这些机构速成出来的学生，就像练了“21天学会XXX”宝典一样。如果自身的再次学习能力不强，很容易沦为“搬砖汉”。近几年，随着互联网的发展，各种在线教育网站层出不穷。内容创业或者说知识创业的人也很多。慕课网就是这其中一家。&lt;/p&gt;

&lt;p&gt;我学Python也是在网上自学。在慕课网上看了些教程，也就直接用他来练手了。现在交下作业^_^&lt;/p&gt;

&lt;p&gt;目前慕课网上的课程涉及到前端，后端，设计，运维等8个方向。最热（课程数最多）的当然是前端，后端和移动三个了。云计算&amp;amp;大数据虽然也很热，但课程数方面，较之移动开发还是差了一大截。&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;580&quot; src=&quot;//jsfiddle.net/laichendong/24qLm0sw/13/embedded/result/&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;再细化到具体技术来看，最先映入眼球的居然是Android。像PHP也占据了很大的一片空间，国内哪些比较大的公司还在大面积的使用PHP？&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;580&quot; src=&quot;//jsfiddle.net/laichendong/sc6cbgbn/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;同样是具体的技术，从学习者的角度看，情况发生了一些有意思的小变化，并不是课程多的学习者就一定多。像前端工具，设计工具，Html5，css3等学习者的数量和课程的数量都形成了比较大的反差。这似乎在说，前端的技术，比你想象的还热！&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;580&quot; src=&quot;//jsfiddle.net/laichendong/qLwhprqj/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;最后，我们来关心一下技术方向，课程数量，难度，学习人数和评分这几个指标的关系如何。首先绝大部分的课程学习人数都在20W或更少以下，学习人数最多的两个课程分别是属于前端的《HTML + CSS基础课程》和属于后端开发的《Java入门第一季》。其次是难度，入门课程数量较多，学习的人数也较多。最后是评分，这玩意儿在慕课显然也是没玩太好，大多课程的评分相差都不大，因为每个圆圈的面积都差不多。&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;580&quot; src=&quot;//jsfiddle.net/laichendong/gvaLa6o3/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;现在再来说实现就比较简单了。首先是写个爬虫，依次访问课程详情页把数据爬回来存成文件。然后再写个脚本把抓回来的数据进行汇总计算。最终把计算结果用echarts这样的图表可视化出来。&lt;/p&gt;

&lt;p&gt;在实现过程中学习到两个小技巧：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;现在很多页面都是js加载数据的，靠原来直接访问URL再直接从response的html里提取数据的做法已经不行了。通常的做法是使用selenium驱动一个浏览器，让这个浏览器去访问要抓取的url。回来的response也在浏览器里实际运行。等数据都load回来了之后后再从浏览器里获得想要的数据。本例中我直接使用的是chrome。在速度和资源要求更高的场景里，可以使用PhantomJs这种“无界面的浏览器”来替代chrome。也可以加上多线程，多进程抓取等等。这是一个合格的爬虫应有的素质。&lt;/li&gt;
  &lt;li&gt;在将分析结果输出成图表的过程中，觉得如果这就用个模板引擎的话，有点牛刀杀鸡的味道了。于是就直接用了&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;&#39;.format()&lt;/code&gt;应急。但是模板里有js代码，js代码里有&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;,转义啊简直是噩梦！然后，机制的我就把所有带大括号的js代码都挪到外部js文件里，然后引入了。效果杠杠滴，机智如我啊^_^&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 13 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/python/2017/03/13/imooc-analyse-by-python/</link>
        <guid isPermaLink="true">http://laichendong.com/python/2017/03/13/imooc-analyse-by-python/</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>2017-OKR</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;目标1：锻炼 跑步1000公里&lt;/h1&gt;

&lt;h1 id=&quot;section-1&quot;&gt;目标2：完成旅行计划&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;KR1：出国一次，暂定巴厘岛&lt;/li&gt;
  &lt;li&gt;KR2：600公里以上自驾游一次，达达线&lt;/li&gt;
  &lt;li&gt;KR3：学习照片管理和处理软件LightRoom&lt;/li&gt;
  &lt;li&gt;KR4：制作4本摄影集，以前的两本，17年的两本&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-2&quot;&gt;目标3：完成学习计划&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;KR1：认真读10本书，再快快地读10本
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;《边城》&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;《像艺术家一样思考》&lt;/li&gt;
      &lt;li&gt;&lt;del&gt;《二手时间》&lt;/del&gt; 不了解白俄历史，没感觉，看不下去了&lt;/li&gt;
      &lt;li&gt;《精进》&lt;/li&gt;
      &lt;li&gt;《巨人的陨落》&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;KR2：学完斯坦福的“机器学习”课程&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;KR3：用Python实现这个玩意儿：https://xlzd.me/2016/03/05/sc-internet&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2017/02/06/2017-okr/</link>
        <guid isPermaLink="true">http://laichendong.com/2017/02/06/2017-okr/</guid>
        
        
      </item>
    
      <item>
        <title>提升创新能力</title>
        <description>&lt;p&gt;提升创新能力有三个方法：&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;犯错&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;剽窃&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;交配&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;犯错的意思是说要去试错，有创意的犯错，从犯错中发现创新想法。&lt;/p&gt;

&lt;p&gt;剽窃的意思是借鉴别人的思路，别人的想法，形成自己的创新想法。&lt;/p&gt;

&lt;p&gt;交配是指让多种不同的想法进行“交配”产生新的创新想法。&lt;/p&gt;

&lt;p&gt;这三者和“创新的三大障碍”是一一对应的。如果不能认识到自己，那就不能意识到自己在犯错。更别提从犯错中发现创新想法了。&lt;/p&gt;

&lt;p&gt;如果只相信自己，各种问题都给出自己习惯上的答案，就不可能去借鉴别人的想法。&lt;/p&gt;

&lt;p&gt;如果认为所有的问题都有且仅有一个答案，那自然也不会去综合不同的想法，让想法相互交配产生新的想法了。&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/read/2016/07/31/improve-ability-of-innovating/</link>
        <guid isPermaLink="true">http://laichendong.com/read/2016/07/31/improve-ability-of-innovating/</guid>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>有效领导</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;知识点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;没有最好的药，只有对症的药。没有最好的领导方式，只有最有效的领导方式&lt;/li&gt;
  &lt;li&gt;员工大都能放进 意愿和能力 两个维度组成的4个象限里&lt;/li&gt;
  &lt;li&gt;领导方式大都能放进 支持和指导 两个维度组成的4个象限里&lt;/li&gt;
  &lt;li&gt;低能力高意愿vs高指导低支持   低能力低意愿vs高指导高支持  高能力低意愿vs低指导高支持 高能力高意愿vs低指导低支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;体会&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;不同阶段的员工应该用不同的领导风格对待&lt;/li&gt;
  &lt;li&gt;安排工作时，在工作需要和员工意愿之间，应该先考虑工作需要&lt;/li&gt;
  &lt;li&gt;授权应该循序渐进，防止授权过渡导致能力不匹配&lt;/li&gt;
  &lt;li&gt;在不同的任务面前，同一个人是可能处在不同象限的&lt;/li&gt;
  &lt;li&gt;领导力发展的过程就是“人格扭曲”的过程&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;行动&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;分析每个员工所处的象限， 以及应该使用的领导风格，用不同的行为模式和话术进行领导&lt;/li&gt;
  &lt;li&gt;尝试将不同象限里的员工进行组合，互相产生良性影响&lt;/li&gt;
  &lt;li&gt;尝试识别和影响“非正式团体”&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/management/2016/07/29/effective-leadership/</link>
        <guid isPermaLink="true">http://laichendong.com/management/2016/07/29/effective-leadership/</guid>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>企业文化就是周围的空气</title>
        <description>&lt;p&gt;领导力培训里有一个环节叫“文化大讲堂”，我听到这个名称的第一反应就是“这一定是这个培训中最无聊的部分了。”，做讲堂的老师是一个HR高管，由于时间冲突，第一天还没讲成。我心里还阴暗的想，“果不其然！”&lt;/p&gt;

&lt;p&gt;但是听完智晖总一个小时的演讲。我已经被深深的折服了。&lt;strong&gt;这显然是这次培训中最精彩的部分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;她首先从她个人经历出发，讲了她的家庭，她的职业经历，为什么在千橡最低谷的时候来北京，最后，她让我们猜，她这样的一个人，她的团队的文化会是怎么样的？进而引出说，文化到底是什么东西？文化是如何被人感知到的？这两个问题。她说，文化，不是写在墙上的标语，不是嘴里喊的口号，&lt;strong&gt;文化就是你周围的空气&lt;/strong&gt; 假设一个人来京东面试，他会用他的眼睛，用他的鼻子，用他的耳朵，皮肤等一切感官感受到京东的文化。而我们作为管理者，传递文化的方式就是去践行它。&lt;/p&gt;

&lt;p&gt;另外，她提出了一个问题，你的职位从M2到M3，哪些东西是变了的，哪些东西是没变的？引发了每个人的思考。进而，她提到了提问的重要性，让我们要学习如何提问。&lt;/p&gt;

&lt;p&gt;其实最打动我的是她演讲完的一个小动作——&lt;strong&gt;她收起了她的录音笔&lt;/strong&gt; 她说每次她自己出去讲东西，都是录下来，回去第一时间复盘，找出能改进的地方。真是应了那句话：比你聪明的人还比你努力！&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/management/2016/07/29/culture-is-air/</link>
        <guid isPermaLink="true">http://laichendong.com/management/2016/07/29/culture-is-air/</guid>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>创新的三大障碍</title>
        <description>&lt;p&gt;关于创新，总共有三大障碍，首当其冲的就是&lt;strong&gt;不能正确认知自己，看不到自己。&lt;/strong&gt;这个怎么说？我们在做事时，往往不能跳出来审视自己正在做的事情是否值得，是否有足够的产出。比如作家一直在纠结写一个惊艳的开头，或者干脆对着稿纸发呆而不动笔；又比如程序员对一个问题调试跟踪了一周，也没想起来问问别人；再比如我们总是忙于开各种各样的会议却不知道是为了什么，会议的结果是什么。&lt;/p&gt;

&lt;p&gt;自己很难发现这些问题，越是效率低下时越难以发现。我们必须借助其他人的帮助，但是当别人说你或者你在说别人时，一定要注意“别生气！”，别让你的老婆来做这件事！&lt;/p&gt;

&lt;p&gt;很多能成为解决问题的领导者的人都在这个障碍中牺牲了！&lt;/p&gt;

&lt;p&gt;第二个障碍是&lt;strong&gt;还没真正理解问题，就急于给出答案， 而且针对所有问题，给出的答案都是一样的！欺骗自己，以为早就知道所有问题的答案&lt;/strong&gt;每一个问题都有其特定的场景和条件，我们必须先理解问题，才有可能给出正确的解决方案。&lt;/p&gt;

&lt;p&gt;最后一个障碍是&lt;strong&gt;认为所有问题都_有且仅有_一个答案。&lt;/strong&gt;不愿意相信还有别的解决办法。其实所有问题，都应该不止有一个解决方案。不是你的解决方案就绝对好，我的就绝对不好。 &lt;strong&gt;要学会包容不同和接受变通&lt;/strong&gt;。&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/read/2016/07/27/three-obstacles-of-innovating/</link>
        <guid isPermaLink="true">http://laichendong.com/read/2016/07/27/three-obstacles-of-innovating/</guid>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>经理、领导、教练</title>
        <description>&lt;p&gt;我们在自己的专业领域，一开始往往都是孤军奋战，一个人搞定各种事儿，对团队做出贡献。这时候叫 &lt;strong&gt;个人贡献者&lt;/strong&gt;。然后我们从优秀的个人贡献者被提拔为 &lt;strong&gt;管理者&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们作为管理者，每天所做的各种管理行为，其实背后是由3种角色来支撑的——经理，领导，教练。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;经理&lt;/strong&gt;，对应的英文是 &lt;strong&gt;manager&lt;/strong&gt; 是man+age+r， 哈哈，这貌似是说一个人上了年纪就可以当经理了！其实真的差不多。 &lt;strong&gt;经理关注的是事儿，关注的是当下。&lt;/strong&gt; 经理的典型话语是：“小伙儿，这事儿应该 1，2，3 这么干，这么干”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;领导&lt;/strong&gt; 对应的英文是 &lt;strong&gt;leader&lt;/strong&gt; ，用词根分析是 &lt;code class=&quot;highlighter-rouge&quot;&gt;path finder&lt;/code&gt; 的意思。 &lt;strong&gt;在未知的领域找到路并且带人走过去&lt;/strong&gt; 这人就是领导。这里面有两层含义，一层是要 &lt;strong&gt;找到路&lt;/strong&gt; ，这关注的是 &lt;strong&gt;对未来的洞见的能力&lt;/strong&gt; 。另一层是 &lt;strong&gt;带到人&lt;/strong&gt; ，这关注的是 &lt;strong&gt;对人的影响力&lt;/strong&gt; 。领导的典型话语是：“小伙儿，跟我好好干，一定有前途。”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;教练&lt;/strong&gt; 对应的英文是 &lt;strong&gt;coach&lt;/strong&gt; ，coach的中文意思是“四轮马车”，意思是将一个人从一个地方带到另一个地方。在管理上的引申意义就是将一个人从某个状态提升到另一个状态。如果你要改变一个人，首先要做到的就是要了解一个人，因人施教。要有 &lt;strong&gt;同理心&lt;/strong&gt; 。注意同理心和同情心的不同：&lt;code class=&quot;highlighter-rouge&quot;&gt;同理心=同情心+发掘+引导&lt;/code&gt;，同理心要求的不光是能感同身受，还要能从中发掘到潜在的有价值的信号，并且加以引导往好的方向发展。作为经理，是职位赋予的能力；作为领导，是个人魅力赋予的能力，而作为教练，能赋予你能力的是&lt;strong&gt;信任&lt;/strong&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;信任=（亲密度*能力*信誉度）/自私度&lt;/code&gt; 。教练的典型话语是：”小伙儿，这事儿你是怎么想的？哦，这样这样会不会好一点？“&lt;/p&gt;

&lt;p&gt;上面说了三种角色，每种角色有自己的关注点和典型的行为模式。其实这背后是有理论支撑的。这个理论叫&lt;strong&gt;神经语言学,NLP( &lt;a href=&quot;https://en.wikipedia.org/wiki/Neuro-linguistic_programming&quot;&gt;Neuro-linguistic programming&lt;/a&gt; )&lt;/strong&gt; 他是一个7层模型。研究的是 &lt;strong&gt;特定的环境&lt;/strong&gt; 让不同的人做出不同的 &lt;strong&gt;行为&lt;/strong&gt;，而支撑行为的是 &lt;strong&gt;知识和技能&lt;/strong&gt; ，知识和技能背后的是 &lt;strong&gt;想法&lt;/strong&gt;，想法背后的是 &lt;strong&gt;价值观&lt;/strong&gt; 而影响价值观的是所处的 &lt;strong&gt;角色&lt;/strong&gt;。最高层面的就是 &lt;strong&gt;精神归属了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;刚从优秀的个人贡献者转成初级管理者的同学。往往保持思维的惯性，做事的风格是和经理很像。但其实我们在做一个管理行为前，首先应该想想这是一个什么样的环境（场景），针对这种场景，应该使用什么样的行为去对待。也就是说你背后要以什么角色去处理这件事情。不要用第一反应，应该先想想，我是管理者，我要用什么角色。当遇见一个场景不用再刻意的想用什么角色应对都能处理的很好了。就成熟了。&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/management/2016/07/27/manager-leader-coach/</link>
        <guid isPermaLink="true">http://laichendong.com/management/2016/07/27/manager-leader-coach/</guid>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>《成为技术领导者》</title>
        <description>&lt;p&gt;在成长的过程中，通常伴随着痛苦！而我们会找各种理由来逃避这些痛苦。同时，&lt;strong&gt;也逃避了成长！&lt;/strong&gt;&lt;br /&gt;
以下是一些最典型的&lt;strong&gt;借口&lt;/strong&gt;：&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;我不是主管&lt;/h2&gt;
&lt;p&gt;最常见的借口莫过于说我不是主管，我没有头衔，所以我不能（不用）领导。实际上，_潜在的领导_比_被任命的领导_要&lt;strong&gt;多得多&lt;/strong&gt;。&lt;br /&gt;
人们往往把&lt;strong&gt;最薄弱的&lt;/strong&gt;的环节和最&lt;strong&gt;最关键的&lt;/strong&gt;的环节弄混淆。比如，发动机中火花塞最容易坏，他是最薄弱的环节，但不是最关键的环节。设计良好的发动机，可能就没有火花塞（比如柴油机），至少，也是设计成火花塞是容易替换的。在一个团队里，被任命的领导就像火花塞一样。其实他是最薄弱的环节，而不是最关键的环节。所以，设计良好的团队。领导者力应该是来自每一个人的，而不是来自那个被任命的领导。如果你要解决问题，现在就施展你的领导力吧。不用等着被任命！&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;我不是当领导的那类人&lt;/h2&gt;
&lt;p&gt;大家一提到领导，可能都是刘强东，马云那样的，特别能忽悠，特别能激励人心。而技术人员，往往在领袖魅力和组织技巧上相对较弱。所以就因此丧失信心，说出“我不是当领导的那类人”这样的丧气话。&lt;br /&gt;
其实，作为技术领导者，我们依靠的不是激励，也不是组织，我们依靠的是创新。我们依靠的是给团队提供更多的解决问题的办法。换句话说，我们的技术能力，我们的专业能力能弥补这方面的不足。想想马化腾和李彦宏吧。他们不像马云那么能忽悠，生意做得一样大！创新型领导力，激励型领导力和组织型领导力是相辅相成可以互相促进的。任何人都能学会，无论你是否觉得你是不是能当领导的那类人&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;我的技术会退步&lt;/h2&gt;
&lt;p&gt;这是一个很痛苦的事儿，成为技术领导者之前大多都是技术精英。但这个过程中需要牺牲一些技术资本来提升交际能力。许多人包括我对此非常痛苦。但要意识到，我们通过从自己的专业领域跳出来，从而掌握一些通用的能力，这也非常好。用MOI的专业术语来说就是要在三个因素之间求得平衡，降低一些创新技能，换取一些激励和组织能力。这种折中&lt;strong&gt;无可避免&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;成长的压力很大&lt;/h2&gt;
&lt;p&gt;承认自己技术退步，是一件非常痛苦的事儿。要成长，就意味着改变，就会有压力，当然如果你不想成长，你就可以一直保持现状，从而获得安逸的状态，但是一旦外界环境改变，迫使你要改变的时候，带来的压力就会非常巨大，比如国企改革导致的下岗。要改变，就必须付出点什么！&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;我不用那么强大&lt;/h2&gt;
</description>
        <pubDate>Sat, 16 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/read/2016/07/16/i-cant-beacause/</link>
        <guid isPermaLink="true">http://laichendong.com/read/2016/07/16/i-cant-beacause/</guid>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>失乐园</title>
        <description>&lt;p&gt;看完的书需要有一些收获也好，有些念想也好。我想每看完一本，至少应该留下些什么吧。&lt;br /&gt;
这次看完渡边淳一的《失乐园》，心情还是挺复杂的。不是很舒服，很虐心的感觉。&lt;br /&gt;
两个人相爱，或者说被性吸引，以至于叛离现实生活，众叛亲离，最后一起自杀赴死！感觉人的感情实在太强大了。让人害怕。&lt;br /&gt;
另外感觉日本小说都有一种魔力，能够构建起某种场，在阅读的时候一直是某种氛围或者某种情愫萦绕其上。&lt;br /&gt;
很平实的词汇，很真实的细节，很有画面感，在阅读的时候甚至能想象出要是改编成电影的 话，男女主角的语气，甚至表情是什么样的。&lt;br /&gt;
其中很多场景的描写也会让人想起自己的过去和经历过的女人们，有些不愿意，又不自觉的将自己往男主身上套。&lt;br /&gt;
平 但 震撼人心，让我想起了也是一部日本的电影《入殓师》&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/read/2016/07/12/paradise-lost/</link>
        <guid isPermaLink="true">http://laichendong.com/read/2016/07/12/paradise-lost/</guid>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>在服务端将HTML转成图片</title>
        <description>&lt;p&gt;有一些场景，需要&lt;strong&gt;将网页转换成图篇&lt;/strong&gt;。比如为了兼容性把网页图表生成截图随邮件发送，网页热力图的底图等等。&lt;/p&gt;

&lt;p&gt;我想总不能搞个浏览器，将网页放进去然后截图吧。浏览器还不一定开放了这种接口呢。出于效率和规模的考虑，也不现实啊。&lt;/p&gt;

&lt;p&gt;然后搜了一下。发现一些办法：&lt;/p&gt;

&lt;h2 id=&quot;awtswing&quot;&gt;1. 使用awt或者swing&lt;/h2&gt;
&lt;p&gt;思路基本上是现在 AWT or Swing 的Panel上显示网页，在把Panel输出为 image 文件。java 本身的API有提供相关的结果，但是直接产生的效果不是很好&lt;/p&gt;

&lt;h2 id=&quot;h5apicanvas&quot;&gt;2. 使用h5的api，将网页画到canvas上&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://html2canvas.hertzen.com/screenshots.html&quot;&gt;html2canvas&lt;/a&gt;就是这样的一个东西。但是兼容性不好，中文字体啦，处理懒加载啦，各种问题。&lt;/p&gt;

&lt;h2 id=&quot;phantomjs&quot;&gt;3. 使用类似phantomjs这样的东西&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://phantomjs.org/&quot;&gt;phantomjs&lt;/a&gt;是一个没有界面的，提供了js API的WebKit。他很快，且原生支持各种web标准，比如Dom处理，CSS选择器等等。&lt;br /&gt;
使用phantomjs，首先要在服务器上安装phantomjs。然后用JNI调用本地命令和他交互就好了，就像imageMagic一样。&lt;br /&gt;
据官网介绍，他用来做页面的自动化测试也是非常棒的！&lt;br /&gt;
与他相似的还有&lt;a href=&quot;https://slimerjs.org/&quot;&gt;slimerjs&lt;/a&gt;,只是他基于Gecko。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;4. 还有一些其他的类库&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/java-html2image/&quot;&gt;Html2Image&lt;/a&gt;, &lt;a href=&quot;http://lobobrowser.org/&quot;&gt;Cobra&lt;/a&gt; 等等&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/2016/07/11/server-side-html-to-image/</link>
        <guid isPermaLink="true">http://laichendong.com/2016/07/11/server-side-html-to-image/</guid>
        
        
      </item>
    
  </channel>
</rss>
