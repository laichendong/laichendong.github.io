<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>咖啡不苦</title>
    <description></description>
    <link>http://laichendong.com/</link>
    <atom:link href="http://laichendong.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 11 Sep 2015 22:55:51 +0800</pubDate>
    <lastBuildDate>Fri, 11 Sep 2015 22:55:51 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>jekyll设置语法高亮</title>
        <description>&lt;pre&gt;&lt;code&gt;2015年09月11日，重要更新：
以下都是扯淡。现在jekyll已经原生支持语法高亮了。
直接将代码放到  {% highlight language %} 和 {% endhighlight %} 之间就ok了。
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;使用jekyll的人，我想大部分都应该经常和代码打交道吧。那代码高亮自然少不了，今天就讲讲如何在jekyll中配置代码高亮。&lt;/p&gt;

&lt;p&gt;代码高亮的工具有很多。jekyll原生支持的是&lt;a href=&quot;http://pygments.org/&quot;&gt;pygments&lt;/a&gt;.
使的博客上的代码高亮的原理是用pygments生成一个css文件供页面引用，然后用jekyll的pygments插件将博客源文件中的代码处理成能使用该css的html代码。最后在浏览器的渲染下，代码就亮起来了。&lt;/p&gt;

&lt;p&gt;看名字就应该知道这pygments是一个python写的东西了。那就可以用&lt;a href=&quot;https://pypi.python.org/pypi/pip&quot;&gt;pip&lt;/a&gt;来安装了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;pip install Pygments&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;至于pip是什么，以及如何安装pip，就请自行google了。&lt;/p&gt;

&lt;p&gt;安装完之后就应该用他来生成css文件了：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;blogRoot &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pygmentize -S default -f html &amp;gt; css/pygments.css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这条命令的两个参数分别指定的是默认的配色方案和目标格式是html。关于参数解释和其他可选参数请看&lt;a href=&quot;http://pygments.org/docs/cmdline/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有了这个css文件，要生效当然要在页面里引用。对于我这偷懒的人来说，就直接放在&lt;em&gt;_includes/head.html&lt;/em&gt;里了，这样做的好处和坏处都是每个页面都有这个css了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/css/pygments.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在css已经具备了。接下来要做的就是将页面上的代码转换成符合这个css的html了。我们先用gem安装pygment.rb&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install pygments.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在配置文件&lt;em&gt;_config.yml&lt;/em&gt;中添加一行，告诉jekyll用pygment来处理高亮。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;highlighter&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pygments&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们在源文件中，将代码放到  {% highlight language %} 和 {% endhighlight %} 之间就ok了。 其中language支持那些以及怎么写依然可以参照&lt;a href=&quot;http://pygments.org/docs/lexers/&quot;&gt;官网&lt;/a&gt;。
如果官方提供的300多种语言都不够用的话，那你干脆自己写一个得了。反正pygments支持自定义。
到这，你的代码就应该亮起来了！&lt;/p&gt;

&lt;p&gt;说句题外话。jekyll的口号是：什么都不用管，只用关心你的博客内容。我觉得就是扯淡。会自己搭博客的人。这应该是最烂的广告了。如果什么都没得折腾。那还用你干嘛。直接oschina上注册一个账号不是更好？
就是因为可以各种折腾，我才选用jekyll的。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;生命不息，折腾不止。&lt;/h1&gt;

</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/jekyll/2015/09/09/set-syntax-highlight-in-jekyll.html</link>
        <guid isPermaLink="true">http://laichendong.com/jekyll/2015/09/09/set-syntax-highlight-in-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>加班记（二）</title>
        <description>&lt;p&gt;今天又去公司处理了一个线上问题：我们依赖的一个接口可用率为0了！&lt;/p&gt;

&lt;p&gt;故事大概是这样的：我们依赖的一个写接口，最早主键是int类型的。虽然我们的sequence工具生成的是long型的数，但是为了“适应”接口就强转成int后再调用接口了。某一天，接口提供方意识到用int类型做为主键，随着业务发展很可能突破上限而造成麻烦。于是接口提供方将入参类型改成了long。于是我们的某位码农又将int强转成long给了接口！今天，就在今天。终于这个sequence的值超过了21亿+，就是有符号整形的最大值。然后将这个值强转成int后（其实是个负数）。用这个负数去调接口，然后就都out of range了。然后就没有然后了。&lt;/p&gt;

&lt;p&gt;解决的办法当然是将“画蛇添足”的程序逻辑修正。去掉long-&amp;gt;int-&amp;gt;long的过程，另外也发现数据库的字段类型是int(10)，顺手改成了bigint(20)。一切妥当后，可用率恢复。&lt;/p&gt;

&lt;p&gt;现在回过头来复盘，发现可以改进甚至避免这场“灾难”的地方太多了。&lt;/p&gt;

&lt;p&gt;在最初期，需要调用一个以int作为主键的接口时应该就是最好的避免灾难的时刻。这个时候如果调用方（我们）能提出疑问并协调修改的话。应该就不会有后面的事儿了。一方面，说明我们有业务主键类型最好别用int的意识。另一方面，又说明我们可能有“各人自扫门前雪，莫管他人瓦上霜”的坏毛病。或者，这可能是由于“跨部门合作太难了”之类的借口。但那真的是借口。更多的是自己的懒惰，不愿意推动罢了。&lt;/p&gt;

&lt;p&gt;然后是当接口提供方意识到问题，将入参类型进行了调整之后。我们的做法居然又是在入口做了一次强转！这几乎是一个不能容忍的低级错误!至于解决方案，除了强调，宣贯，恐怕就只能招有更好的习惯的人了,（当然，招人带来的其他一系列问题不在今天的讨论范围内）&lt;/p&gt;

&lt;p&gt;再然后是为什么我要跑到公司去处理这个问题。还好我去公司还算方便，十几分钟车程便到。但作为一个码农，这种工作方式还是挺丢人的。我的借口是公司的vpn难用，难申请。自己找的小软件又关键时刻掉链子。擦，这些都是借口好吗。回去上班第一件事儿就先把vpn申请下来吧！&lt;/p&gt;

&lt;p&gt;最后又是一个鄙视自己的地方了。都不好意思在这说，我改完代码，预发验证，通过，上正式，遗憾的是期待的可用率飙升并没有到来。百思不得其解之际down了一下刚上线的包。纳尼，竟然没有我刚改的代码！wtf，在git里只commit而没有push就build线上包了！好吧，自己面壁去了。&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2015/09/06/thinking-on-work-over-time-2.html</link>
        <guid isPermaLink="true">http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2015/09/06/thinking-on-work-over-time-2.html</guid>
        
        
        <category>不好分类的</category>
        
      </item>
    
      <item>
        <title>用jekyll和github pages写博客</title>
        <description>&lt;p&gt;题外话，在当今这个微博都还没来得及高兴一下就被朋友圈拉下神坛的年代，说如何搭建自己的博客系统似乎已经太过于过时了。
如果你有这样的想法，恐怕这篇文章不是非常适合你了。建议你把它关了去刷朋友圈。如果你和我一样，还是愿意折腾，并且愿意将折腾记录下来。那么，我们交个朋友吧。一起去刷朋友圈。&lt;/p&gt;

&lt;p&gt;工欲善其事，必先利其器。介绍一下我们要用到的两个工具。
首先登场的是：&lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;是&lt;em&gt;github&lt;/em&gt;提供的，免费的，类似于网页空间，一样的一种服务，每个账号和每个项目都可以对应一个pages站点。
今天的另一个主角叫&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;是一个用ruby写的，开源在github上的将纯文本文件转换成静态博客网站的一个工具。&lt;/p&gt;

&lt;p&gt;其实，有了github pages你就完全可以想怎么玩就怎么玩了。因为他就是一个网页空间。将html文件扔上去就行了。下面我们一步一步看如何配置你的github pages。我们要做的是个人博客，当然是账号级别的比较好。&lt;/p&gt;

&lt;p&gt;第一步，当然是要在github里建立一个仓库。注意：这个仓库的名字特别重要，需要这种格式：&lt;em&gt;你的用户名.github.io&lt;/em&gt;， 比如我，就是laichendong.github.io&lt;/p&gt;

&lt;p&gt;第二步，将这个仓库克隆到本地。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ $ git clone https://github.com/username/username.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第三步，写一个hello world到你的博客里。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ $ cd username.github.io
~ $ echo &quot;Hello World&quot; &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第四步，提交，推到远端。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add --all
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Initial commit&amp;quot;&lt;/span&gt;
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第五步，没有第五步了。浏览器里访问一下：http://username.github.io&lt;/p&gt;

&lt;p&gt;到这里，你已经拥有了一个你自己的博客站点。想写什么就写什么了！但是，开什么玩笑！我来是想些博客的。不是想来做网站的！这个时候就该jekyll上场了。&lt;/p&gt;

&lt;p&gt;第一步，安装jekyll&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ $ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很悲催的是，国内的网络环境可能导致你在这一步就失败了。于是，我们求助于万能的淘宝，&lt;a href=&quot;http://ruby.taobao.org/&quot;&gt;http://ruby.taobao.org/&lt;/a&gt;是淘宝搭建的ruby gems镜像。感谢！
换源：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ $ gem sources --remove https://rubygems.org/
~ $ gem sources -a https://ruby.taobao.org/
~ $ gem sources -l
	*** CURRENT SOURCES ***
	https://ruby.taobao.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时候再运行安装命令应该就没问题了。&lt;/p&gt;

&lt;p&gt;第二步，新建一个博客&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ $ jekyll new myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第三步，运行博客服务器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ $ cd myblog
~/myblog $ jekyll serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时候你你再浏览器里敲&lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;就能看到效果了。&lt;/p&gt;

&lt;p&gt;虽然在浏览器里你看到了一个页面，但你可能还有点蒙。我们回到myblog文件夹里看看，都是怎么回事儿。文件夹里的目录大概应该像这样，不完全一样也别大惊小怪。都是些一看就懂的东西&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── _config.yml // 博客配置文件
├── _drafts // 博客草稿
|   ├── begin-with-the-crazy-ideas.textile
|   └── on-simplicity-in-technology.markdown
├── _includes // 包含文件，公共头尾什么的
|   ├── footer.html
|   └── header.html
├── _layouts // 布局文件，用来组装页面架子的
|   ├── default.html
|   └── post.html
├── _posts // 你的博客原文
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile
|   └── 2009-04-26-barcamp-boston-4-roundup.textile
├── _site // 最终生成的博客站点
├── .jekyll-metadata // jekyll自己用的一些元数据，最好别把它放到git里区管理
└── index.html // 这个你懂的拉
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假如你新写了一篇文章在&lt;em&gt;_posts&lt;/em&gt;里。先运行一下build在server就能看到了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ $ jekyll build
~ $ jekyll s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你不会想问我，怎么将jekyll生成的网站弄到github pages上去吧？额，很简单。把&lt;strong&gt;整个目录&lt;/strong&gt; 注意是整个目录，包括源文件配置文件等等，都扔到你的username.github.io这个仓库里去就行了。github pages能自动识别出来 _site 下才是你的站点。真是太tmd贴心了！&lt;/p&gt;

&lt;p&gt;如果你看到这了都还没放弃，说明我们已经是朋友了。
就再说两招吧：&lt;/p&gt;

&lt;p&gt;一，没事儿多看官网的文档。这才是王道。英文头疼的话，jekyll还有好心人翻译了中文的：&lt;a href=&quot;http://jekyllcn.com/&quot;&gt;http://jekyllcn.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;二，如果你像我一样，有自己的域名，切不喜欢github.io的二级域名的话，也可以配置解析，让github pages用自己的域名&lt;/p&gt;

&lt;p&gt;第一步是在你的仓库里建立一个&lt;em&gt;CNAME&lt;/em&gt;文件。这个文件里就写你的域名就行了，比如&lt;em&gt;laichendong.com&lt;/em&gt;，别有别的了。如果正确设置了CNAME文件，在你的仓库设置页面，应该能看到这样一行字。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Your site is published at http://laichendong.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二步就是将你的域名解析指向到你的github给你的二级域名上就ok了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;器已经善了，工才是王道。博客已经搭建起来了，里面的博文才是最重要的。愿你记录非凡人生。&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 29 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/jekyll/2015/08/29/write-your-blog-with-jekyll-and-github-pages.html</link>
        <guid isPermaLink="true">http://laichendong.com/jekyll/2015/08/29/write-your-blog-with-jekyll-and-github-pages.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>加班记</title>
        <description>&lt;p&gt;故事还得从一个需求说起。
某一天，运营提出一个需求要对某些商家下的所有商品打上某一个特殊标识用于做某个维度的销量统计。
今天，线上出现了一些价格极低的商品，被下了很多订单。出事故了！
这两者之间有什么关联？对，这两者之间并没什么卵关系。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;一&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关于批量处理数据。&lt;/strong&gt;我想这是一个不能避免的东西。在业务的发展过程中肯定会存在对历史数据的批量处理，迁移甚至是处理+迁移的需要。
如果是一个小得系统。就是一个数据库+上面几个页面展示。那好说。基本上是一条sql搞定的事情。但是随着系统越来越复杂，数据通常异构的存在不同的地方：DB，索引，缓存，还有下游系统。。。中。
这时一条sql显然就搞不定这事儿了。需要一个脚本（程序）来完成一系列的动作，才能保证整个系统的各个数据源保持一致。而要正确写出这个程序的人必须完全理解整个系统中这些数据的存储方式和计算逻辑。。。。mission impossible！
还要有模块化！一般某个数据源有横向的切面接口或某个业务有纵向的业务接口。这时候写这个脚本的人要做的就仅仅是理解并组合这些接口了。
这里有几个难点，一，这些接口要能被理解。这主要依赖于业务语义清晰。二，这些接口行为要正确，这主要依赖于接口的实现者理解接口的定义并正确的实现以及单元测试。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;二&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关于事故。&lt;/strong&gt;当事故已经发生了。那唯一能做的就是消除影响，查找原因和修复故障。注意，这三者是有顺序的。首先得用最快的速度消除影响至少不让影响扩大。比如这个例子中可以让商品下架。然后再查找愿意，只有知道了原因，才能正确修复故障。
找原因时一定要避免变成问责，那是后面的事儿。找原因时一定要避免变成问责，那是后面的事儿。找原因时一定要避免变成问责，那是后面的事儿。重要的事儿说三遍。有必要的话，还可以做个复盘反思。同样，反思一定要避免问责。反思一定要避免问责。反思一定要避免问责。
当事儿都解决了。如果需要的话，那就问责吧。责任一定在leader，而不在具体的执行者。责任一定在leader，而不在具体的执行者。责任一定在leader，而不在具体的执行者。
当然，最重要的，最重要的，最重要的是在事故发生前的所有时刻的工作中如何尽可能的降低事故发生的概率。（事故永远可能发生）&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;三&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关于推倒重来。&lt;/strong&gt;不要推到重来！不要推到重来！不要推到重来！不论你对已有的系统是多么的看不上，不论已有的系统看上去或实际上是多么的一坨屎。都应该调整他，而不是推倒重来。因为推倒重来只可以解决一些你已经看到的问题。但。。。不说了，都是泪。不要推倒重来，到重来，重来，来。&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2015/08/26/thinking-on-work-over-time.html</link>
        <guid isPermaLink="true">http://laichendong.com/%E4%B8%8D%E5%A5%BD%E5%88%86%E7%B1%BB%E7%9A%84/2015/08/26/thinking-on-work-over-time.html</guid>
        
        
        <category>不好分类的</category>
        
      </item>
    
      <item>
        <title>mac下设置JAVA_HOME</title>
        <description>&lt;p&gt;应该是我装了xcode的原因，我没有显式安装java，mac里也有java的环境了。然后当我想在命令行下运行mvn的命令时。就提示我要设置JAVA_HOME了。
当我去找JAVA_HOME在哪的时候。发现是“乱七八糟”的。高冷的mac怎么会那么烂？我肯定是错过了什么。于是求助于万能的google。果然：
可以这样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export JAVA_HOME=&quot;$(/usr/libexec/java_home)&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;甚至可以指定版本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export JAVA_HOME=&quot;$(/usr/libexec/java_home -v 1.6)&quot;
export JAVA_HOME=&quot;$(/usr/libexec/java_home -v 1.7)&quot;
export JAVA_HOME=&quot;$(/usr/libexec/java_home -v 1.8)&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;牛了逼的。果然高冷！&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/mac/2015/08/25/set-JAVA_HOME-on-mac.html</link>
        <guid isPermaLink="true">http://laichendong.com/mac/2015/08/25/set-JAVA_HOME-on-mac.html</guid>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>Open Terminal Here In Mac Os Finder</title>
        <description>&lt;p&gt;在windows中，可以配置“在当前位置打开命令行”，非常方便好用。所以想找一下在mac下有没有类似的功能。
找来找去，很遗憾，没找到很perfect的方法。&lt;/p&gt;

&lt;p&gt;1 可以通过“服务”实现“新建位于文件夹位置的终端标签/窗口”来实现。
“系统偏好设置” 》 “键盘” 》 “快捷键” 》 “服务” 》 “新建位于文件夹位置的终端标签/窗口”
甚至还可以设置快捷键，让我激动了一下。结果~~~
这并不是像windows中那样在打开的文件夹中 on fly用的。
而是要返回到上一级，选中这个文件夹才可以~&lt;/p&gt;

&lt;p&gt;2 可以将文件夹的图标拖动到终端的图标上去。可是拖动还是不够方便&lt;/p&gt;

&lt;p&gt;3 还可以执行 open -a terminal path/to/dir  的命令。 ~~~如果都已经开了命令行窗口，还要这干嘛，直接cd就ok啊。貌似这是第二条的原理。&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/mac/2015/08/24/open-terminal-here-in-mac-os-finder.html</link>
        <guid isPermaLink="true">http://laichendong.com/mac/2015/08/24/open-terminal-here-in-mac-os-finder.html</guid>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>让你的shell更好</title>
        <description>&lt;p&gt;码农们一定知道shell有多高效。但是linux和的版本很多，mac啊什么的。每个系统的shell都长的不太一样，我是说样子。
今天配置我的mac时，发现一个很棒的项目。可以让你的shell变得很棒。&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;on-my-zsh&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/misc/QQ20150823-1@2x.png&quot; alt=&quot;安装过程截图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;装完之后，shell长这样了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/misc/QQ20150823-3@2x.png&quot; alt=&quot;oh-my-zsh效果图&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/mac/2015/08/23/get-the-better-shell.html</link>
        <guid isPermaLink="true">http://laichendong.com/mac/2015/08/23/get-the-better-shell.html</guid>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>你的灯还亮着吗？——发现问题的真正所在</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;序言&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt; ：没人会读序言
 &lt;strong&gt;解决办法&lt;/strong&gt; ：把序言作为第一章
 &lt;strong&gt;解决方法带来新的问题&lt;/strong&gt; ：第一章很无聊
 &lt;strong&gt;新的解决方法&lt;/strong&gt; ：删了第一章，把第二章作为第一章&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;第一部分：问题是什么&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;第一章： 一个问题&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;__背景故事：__一个办公楼（雷龙大厦）的电梯不够用了。有的租户威胁说，如果不尽快改善电梯服务，他们就要退租。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过电梯不够用的场景，引出：
&amp;gt; * 问题是什么？
&amp;gt; * 谁碰到了问题？
&amp;gt; * 问题的本质是什么？&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;第二章：皮特发起了一个请愿&lt;/h3&gt;
&lt;p&gt;从不同的人出发的不同的角度，看到的问题不同
-  上班族的角度：怎样花最少的时间和精力，受最少的气完成工作
-  房东的角度：我要怎么处理这些该死的投诉。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;__故事进展：__皮特为了吸引房东的注意力，发起了一个请愿，让所有员工签名，联合起来，惊动了各个公司（租户）的高管。最后，由房东，公司高管，老公代表大会三方会谈，取得以下一致：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;房东感到不满是因为备受骚扰&lt;/li&gt;
    &lt;li&gt;公司高管不满是因为职员闹情绪&lt;/li&gt;
    &lt;li&gt;职员不满是因为电梯服务不到位，更因为房东无视了他们的诉求&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;em&gt;发现电梯问题仍然包括三个层面：&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;我们应该如何确定“是哪里出了问题”&lt;/li&gt;
    &lt;li&gt;到底是哪里出了问题&lt;/li&gt;
    &lt;li&gt;我们可以做些什么&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-4&quot;&gt;第三章：你的问题是什么&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;问题就是理想状态和现实状态的差别&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;“忽略问题”是一种古老但有效的方法，这种方法其实是让我们降低敏感度&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;幻象问题&lt;/strong&gt; ：比如室温是25℃，一般来说够暖了，但只要你觉得冷，那就是一个问题，不管“实际的温度”是多少。这个问题中，不适感主要来自于你对外界的感知&lt;/li&gt;
  &lt;li&gt;幻象问题是真实存在的问题。“房间里太冷了？”可以转化成“为什么我觉得房间里很冷？”或“我发烧了吗？”&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;__故事进展：__皮特发现，电梯问题的 &lt;em&gt;理想&lt;/em&gt; 状态时电梯应该只需要等一小会儿， &lt;em&gt;现实&lt;/em&gt; 状态则等的时间太长了。所以从这个角度出发，要么就真的缩短等电梯的时间，要么就让等电梯的时间 &lt;em&gt;显得&lt;/em&gt; 短一点
所以皮特想的办法就是在电梯间装了一面镜子。等电梯的时候都照镜子，觉得时间没那么漫长了，问题貌似解决了。
电梯年检的时候，工程师觉得在电梯间装镜子已让人觉得等电梯不那么漫长简直是对他们的侮辱。后来他们发现，是有一只老鼠咬断了电线。随着老鼠的清除，电梯速度终于正常了。问题解决了。
由于电梯提速了，下班时，大家都一窝蜂的涌到了地铁里。结果，将房东撞下了轨道，死了！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-5&quot;&gt;第二部分：这次的问题是什么&lt;/h2&gt;

&lt;h3 id=&quot;section-6&quot;&gt;第四章：比利战胜投标人&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;故事背景：&lt;/strong&gt; 这是一个政府剩余财产竞购。竞购采用密封投标法。由4家公司竞购11件物品。
公司高层向一个官员行贿，换取所有公司的全部投标信息，并获得一次修改自己投标价的机会。悲剧的是，规则太复杂，知道了这些，高层还是不知道应该怎么投标。
最终，高层求助审计，审计说让程序员设计一个程序来解这个问题：列出所有排列组合（4的11次方，约4百万种）。然后按照政府的收益倒排，从中找到政府收益最高且符合规则的投标方案。
一共剩24小时，跑程序就要12个小时。剩下的时间太少了。程序员比利说，只要能向他再透露一点政府的竞购规则，计算量就能减少到原来的10%，而且，结果也更简单。
最初，审计不愿意透露规则，后来被说服了。比利看过柜子之后，只用了一点点逻辑思维和常识，在5分钟内就将问题彻底解决了！然后又花了20分钟向高层证明自己真的解决问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;不要把别人的解决方法当作定义问题的方法&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如果你解决问题太过于神速，别人根本不会相信你真的解决了问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-7&quot;&gt;第五章：比利忍住没说&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;故事背景：&lt;/strong&gt; 第二年，比利去了另一个公司，这个公司有各种“程序包”，能解决各种标准问题，然后对这些程序包进行组合，能解决定制化的问题。
一个同事向他说起去年他们用程序包解决了一个投标问题。（没错，就是比利参与的那个，但是比利没说他也参与了）他们通过程序包的排列组合，只用了3天，和1400美元就解决了那个问题，并且，这个公司知道比利上家公司有什么手段作弊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;别把问题的解决方案误当做问题的定义，尤其是解决方案是由问题解决者自己提出来的时候。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;第六章：比利反思投标案&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;故事发展：&lt;/strong&gt; 比利还在想投标的事情，“另外两家公司是怎么做的？”“他们找谁解决的？花了多少钱？”越想越觉得没那么简单&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;也许，问题应该是：各方都在修改标价，并且都认为自己才有这个特权的时候，该怎么修改自己的标价&lt;/li&gt;
    &lt;li&gt;也许，问题应该是：各方都知道你知道他们可以修改自己的标价，也都知道你会基于此，修改自己的标价。大家在重新定价时改怎么定价&lt;/li&gt;
    &lt;li&gt;也许，问题应该是：一个公司知道他的投标价会被其他公司看到，第一次出价的时候如何误导对手&lt;/li&gt;
    &lt;li&gt;也许，问题应该是：如何爆出一个初次报价，诱导其他公司往某一方向改价，同时，还要保证自己的意图不被识破&lt;/li&gt;
    &lt;li&gt;也许，问题应该是：……&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;即使问题已经解决了，你也无法确定你的问题定义是正确的。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;不要仓促下结论，但也不要忽视第一映像&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;面对问题时，真正重要的一点在于，你要知道，问题时永远得不到解答的，但只要你一直提出问题，就没关系。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;从来没什么东西是最终的解决方案&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;你永远无法确定已经找到的问题的定义是正确的，但是永远不要停下寻找正确定义的脚步。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-9&quot;&gt;第三部分：问题到底是什么&lt;/h2&gt;

&lt;h3 id=&quot;section-10&quot;&gt;第七章：无尽的链条&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;故事背景：&lt;/strong&gt; 一家生产打印机的公司，研发了一款新打印机，速度非常快。唯一的缺点是定位不准。于是工程师开始想办法解决这个问题
 德林提出在打印纸上标出记号，每两厘米一个。大部分工程师想出的是往纸上打印上印记（很难做到）。但德林像的是制造一个工具往纸上打孔。
 工具做出来了，一个板子上两个钉子。
 但是发现，默认情况下这个工具总是钉子朝上放着，容易扎着人。
 于是德林有给工具装了个圆角，这样钉子就不会朝上了，解决了这个问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;因为任何一个问题都是理想状态和现实状态之间的差别。所以当人们通过改变状态来“解决”一个问题的时候，通常会制造出一个新的问题。简单- 的说  &lt;strong&gt;每一个解决方案都是下一个问题的来源。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;我们永远无法“避开”问题。问题，解决方案，新问题构成了一个链条，无尽的出现&lt;/li&gt;
  &lt;li&gt;某些问题最困难的部分就是发现问题的存在&lt;/li&gt;
  &lt;li&gt;看看你对问题的理解，如果你想不到至少三种可能出错的地方，你就没有真正理解这个问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-11&quot;&gt;第八章：忽视不协调之处&lt;/h3&gt;

&lt;p&gt;举了一些例子来说明&lt;em&gt;人的适应能力非常强，经常忽略掉不协调之处。&lt;/em&gt; 比如，如果一个人被刮胡刀割破了手，人们大都会觉得是那个人不够小心，而不是觉得刮胡刀的设计有什么问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;问题的关键就是要意识到问题的存在，或者说让设计者意识到问题的存在。&lt;/li&gt;
  &lt;li&gt;绝大部分不协调之处一经被发现，就很容易被解决。&lt;/li&gt;
  &lt;li&gt;刚拿到新的解决方案时，比较容易发现不协调之处。一旦陌生感褪去（习惯了），就很容易忽略不协调之处。所以 &lt;strong&gt;不要仓促下结论，也不要忽视第一映像&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;如果陌生感已经褪去，可以借助外人（外国人，盲人，小孩等）来检查你对问题的定义或者自己站在“外人”的角度来检查。&lt;/li&gt;
  &lt;li&gt;每转换一次视角，都会发现新的不协调之处&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-12&quot;&gt;第九章：找到问题所属的层面&lt;/h3&gt;

&lt;p&gt;举了一个“问圆是什么”的例子，来说明&lt;em&gt;问题的表述方式非常重要&lt;/em&gt;
&amp;gt; - 图中所示，是一个非常常见的东西，他是什么？
&amp;gt; - 图中所示，是一个东西，他是什么？
&amp;gt; - 图中所示，是一个常见的东西，他是什么？
&amp;gt; - 图中所示，是一个非常不常见的东西，他是什么？
&amp;gt; - 图中所示，是一个非常不常见的东西，想想他可能是什么，给出一个最不合常规的答案。&lt;/p&gt;

&lt;p&gt;因为“只要可行，人们会首先把问题置于让自己觉得最舒适的语义层面上。”所以，“阐述你的观点”的问题好回答，“我怎么说的”的问题不好回答。对比下面两个问题：
&amp;gt; - 为什么亨利八世杀死了自己的妻子？阐述你的观点，并评价他杀妻的手段。
&amp;gt; - 为什么亨利八世杀死了自己的妻子？他的杀妻手段如何？关于这两个问题我在上课的时候是怎么说的？&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;第十章：注意你所表达的含义&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“有关例外情况的信息也存储在xxx文件夹中”&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;程序员理解的是：&lt;strong&gt;另外一个&lt;/strong&gt;存储有例外情况相关信息的&lt;strong&gt;地方&lt;/strong&gt;是xxx文件夹&lt;/li&gt;
    &lt;li&gt;业务费的意思是：xxx文件夹中存储的另一类信息是与例外情况相关的信息&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;又举了一个例子：
&amp;gt; - 玛丽曾有一只小羔羊
&amp;gt; - &lt;strong&gt;玛丽&lt;/strong&gt;曾有一只小羔羊 （不是汤姆）
&amp;gt; - 玛丽&lt;strong&gt;曾有&lt;/strong&gt;一只小羔羊 （现在没有）
&amp;gt; - 玛丽曾有&lt;strong&gt;一只&lt;/strong&gt;小羔羊 （不是两只）
&amp;gt; - 玛丽曾有一只&lt;strong&gt;小&lt;/strong&gt;羔羊 （不是大的）
&amp;gt; - 玛丽曾有一只小&lt;strong&gt;羔羊&lt;/strong&gt; （不是狗）&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;第四部分：问题该由谁来解决&lt;/h2&gt;

&lt;h3 id=&quot;section-15&quot;&gt;第十一章： 烟雾缭绕&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;故事背景：&lt;/strong&gt;老师和同学在教室里讨论问题，只有一个学生会抽烟。讨论完，满屋子烟雾缭绕，不抽烟的同学脸都绿了。问，这个问题应该由谁来解决？&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;不抽烟的学生&lt;/li&gt;
    &lt;li&gt;抽烟的学生&lt;/li&gt;
    &lt;li&gt;老师&lt;/li&gt;
    &lt;li&gt;教务主任&lt;/li&gt;
    &lt;li&gt;校长&lt;/li&gt;
    &lt;li&gt;没有正确答案&lt;/li&gt;
    &lt;li&gt;以上全部&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;故事发展：&lt;/strong&gt;认为应该由不抽烟的学生和抽烟的学生来解决这个问题。学生们发起了一场讨论，想解决这个问题，结果是抽烟的同学培养其他习惯，其他同学每周带些零食来分享。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;反思：&lt;/strong&gt;如果认为老师应该是问题的解决者，那可能得到的解决方案是：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;规定不准吸烟 （吸烟的同学退学）&lt;/li&gt;
    &lt;li&gt;规定可以吸烟 （不吸烟的同学翘课）&lt;/li&gt;
    &lt;li&gt;规定135不准吸烟，246能吸烟 。。。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;当别人可以妥善解决自己的问题时，不要越俎代庖&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果这是别人的问题，就把它当做别人的问题&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;第十二章：校园停车难问题&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;故事背景：&lt;/strong&gt;大学校园里出现了停车难问题，校长和残疾人有预留车位。问，这个问题应该由谁来解决:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;学生&lt;/li&gt;
    &lt;li&gt;老师&lt;/li&gt;
    &lt;li&gt;校长&lt;/li&gt;
    &lt;li&gt;州立法机关&lt;/li&gt;
    &lt;li&gt;州长&lt;/li&gt;
    &lt;li&gt;没有正确答案&lt;/li&gt;
    &lt;li&gt;以上全部&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;校长是可能的答案，但是校长本身有预留车位，他并不意识到这个问题有多重要&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;如果一个人处于解决问题的位置，却并不受问题困扰，那就采取一些行动，使他也能亲身体验到问题&lt;/strong&gt;
&lt;strong&gt;为了改变局面，试着把责任归到自己身上，——哪怕只有一会儿也行。（从自身找原因）&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-17&quot;&gt;第十三章：隧道尽头的灯光&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;故事背景：&lt;/strong&gt;一个隧道的入口有一个标示“注意，前方有隧道，请开启大灯。”出了这个隧道，就是一片风景区，很多人下车看风景回来才发现因为大灯没关，车没电了。为了解决这个问题，工程师想出的最好的办法是在隧道的出口也写一个标示，出于严谨考虑，标语是这样的，“如果是白天，且车灯亮着，那就把车灯关上；如果是晚上，且车灯关着，那就把车灯打开；如果是白天，且车灯关着，那就关着吧；如果是晚上，且车灯亮着，那就亮着吧。”太长了。根本不行！最后想出的标示是“&lt;strong&gt;你的灯亮着吗？&lt;/strong&gt;”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;如果人们真的开着灯，一个提醒可能比复杂的解决方案更有效。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-18&quot;&gt;第五部分：问题来自哪里&lt;/h2&gt;

&lt;h3 id=&quot;section-19&quot;&gt;第十四章：詹尼特·贾沃斯基遇上了混蛋&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;故事背景：&lt;/strong&gt;詹尼特·贾沃斯基在冷战后从美国去华沙，在转机的时候，办签证的人说应该有八份副本，而她只给了七份，贾沃斯基认为是在故意为难她。换句话说。那个官员——迈特兹锡恩是个混蛋。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-20&quot;&gt;第十五章：迈特兹锡恩先生解决了问题&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;就像某些大学校长，银行副总裁和其他中层干部一样。他被选出来，正是因为他能力不足。他在自己的工作范围内对自己的上级负责。同时又不至于威胁到他们的职位。&lt;/em&gt;
&amp;gt; &lt;strong&gt;故事背景：&lt;/strong&gt;詹尼特·贾沃斯基思考她为什么会受到这样的无理待遇，想来想去，她想到，来找他办事的人的态度可能会决定他对办事的人的态度。所以，她用了很亲和的方式和他拉起了家常。然后还相谈甚欢。然后当然八份副本的问题当然也不是问题了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;大多情况下，问题来自你自己！&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-21&quot;&gt;第十六章：找事儿让人做的人和领赏的人&lt;/h3&gt;

&lt;p&gt;不是所有官僚问题都能用微笑（充满人情味）的方式解决。因为官僚通常以书面形式出现。
&amp;gt; &lt;strong&gt;故事背景：&lt;/strong&gt;你收到一封老总发的邮件。上面说的是征求如何正确使用分号的方法。（总之，就是一封让人看了就想笑的官僚文件。）这时，你该怎么办？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个问题来自哪里？每当我们看到一份大规模群发的，充满官僚色彩的文件的时候。共觉得好像面对着一个&lt;strong&gt;不知道冲何而来的问题。&lt;/strong&gt;或者更准确的说，&lt;strong&gt;问题来自于他本身！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;在问题解决者的世界中，国王或者总统或者院长是问题的制造者&lt;/strong&gt;
 &lt;strong&gt;世界上有两种人，一种人做事，一种人制造出事来让其他人做。远离那些找事儿让别人做的人。你就能好好的过日子了。&lt;/strong&gt;
&lt;strong&gt;世界上有两种人，一种人做事，一种人领赏。做第一种人吧。那里的斗争比较少。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-22&quot;&gt;第十七章：考试和其他谜题&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;举了一个考试的例子，所有的课后练习所用到的知识默认都是上节课所讲的内容。所以很容易应付。但是到期末的考试的时候，你不知道这道题到底是要用哪节课的知识来求解，所以比较难。所以，&lt;em&gt;问题是从哪里来的&lt;/em&gt;是解决问题的一个重要线索。
有时候，甚至不用看问题，只要考虑一下&lt;em&gt;问题是谁出的？他想对我做什么？&lt;/em&gt;就能解决问题。
但有时候，出题的人为了提高难度。会故意迷惑对方。比如在军事通信中。迷惑敌人的最简单的方法就是直接用明文发送信息。“黎明时发动进攻！”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-23&quot;&gt;第六部分：你真的想解决问题吗&lt;/h2&gt;

&lt;h3 id=&quot;section-24&quot;&gt;第十八章：不怕累的汤姆被玩具耍了&lt;/h3&gt;

&lt;p&gt;大多数人觉得自己绝大多数时候都在面对问题，因为问题只是理想状态和现实状态的差距。 如果一个人认为自己碰到问题了，那就肯定是碰到问题来。但要知道问题是什么。那就是另外一回事。很多觉得自己知道问题是什么，不过大部分情况下，他们是错的。
我们在学校的环境，养成了找解决方案的习惯，而不是找问题的习惯。老师说问题是什么，问题就是什么。
根据问题的表象直接找解决方案的方法，叫做“蒙眼跳法”。这种方法被广为流传的一个原因是他的确有点用。比如第一章电梯的例子。直接给出电梯需要修理的解决方法。问题就真的解决来。还有一个原因是“解决问题”是一件很有趣的事儿。每天感觉自己解决来一堆问题。很爽！
&amp;gt; 举了个例子。说一家公司在全国有三家工厂。然后经销商遍地，每个工厂的生产成本不同，运费不同。一个年轻的问题解决者说计算机能解决任何问题。于是，三个副总就找这个年轻人说要他帮忙解决问题。年轻人经过分析和了解。这是一个运筹学的问题。只需要给出一些数据，就能知道订单如何分配给三个工厂生产最省钱。然后数据收上来了。发现其实其中一个工厂的成本非常低。只要关闭其他两家工厂。所有订单都到这家工厂生产就可以。而这些情况。三个副总也很清楚。但他们却认为这种方法不行。因为，两个工厂的所在地是董事长和CEO的家乡。他们不愿意搬家！他们希望也用计算机的结果说服老板搬家。三个副总说：他们不愿意搬家，不论公司的成本如何，反正他们能承受，但他们希望公司的效率能高一点，因为，他们还没发财呢！
这个故事中。年轻的问题解决者学到了：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无论表面上表现得如何。在你提供他们所要求的东西之前，他们极少知道自己想要什么。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-25&quot;&gt;第十九章：佩欣丝的计谋&lt;/h3&gt;

&lt;p&gt;有的时候，人们很清楚自己想要什么，但对那些“为解决方案找问题”的人来说。问题还没有结束。
&amp;gt; 州长为了政绩，要求在官僚体制能掌控的范围内，有必要尽量的多的使用计算机。，佩欣丝被分配到财务部解决一个问题，（而财务部在之前从来不用计算机来解决问题）：将新修建道路的评估总额在可以从中收益的道路沿线各业主之间进行分配。本来估计程序用一周能够写完，但是最后延长到了三个月才完成。因为财政部长在过程中总是提出各种小修改。到最后，财政部长仍不满意。因为总额为1300万美元的结果中有一美分的误差。然后财政部长觉得为了遵守法律。必须搞定者一美分。然后佩欣丝使了一个计谋。问这个程序一年会运行几次。部长说10次。他的大部分时间都是用来计算这种评估了。然后佩欣丝说拿出一美元。说，我把这一美元捐给财政部。这够10年的由于我的程序的误差导致的损失了。等钱用完了，她还可以再捐。
佩欣丝并没有觉得她解决了财务部的问题。而事实上也是如此。在这个问题上浪费了三个月的时间后，财务部觉得最好的办法还是彻底忘掉用计算机这回事。当然，这才是真正的问题的解决方法！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从最后的情况看。想要真正解决问题的人并不是很多。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-26&quot;&gt;第二十章：一项优先任务&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个问题解决者得到一个代号为“虚张声势”的任务：破译一个欧洲小国在外交工作中使用的密码。在前18个月，毫无进展。终于发现这是一个“书码”，然后又用两个月缩小密钥使用的书的范围。最后找出来书名。最后他抑制不住激动的心情。对密码进行了破译。结果发现，破译出来的信息全是“二十三瓶威士忌，五十九瓶葡萄酒”这样的无关紧要的账目。两周后，这个情报员觉得受到来打击，离开了情报机构，做了老师。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;我真的想要找到解决方案吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有时一得出解决方案，就发现他根本不受欢迎，甚至问题解决者会因此丢掉工作。比如前面提到的裁军的问题。&lt;/p&gt;

&lt;p&gt;人们永远没有足够的时间把它做好，但永远有足够的时间重新来过。&lt;/p&gt;

&lt;p&gt;人们永远没有足够的时间趣考虑到底是不是想要他，但永远有足够的时间来去为之后悔。&lt;/p&gt;

&lt;p&gt;即使真的想得到解决方案，人们可能每注意到，每种解决方案都伴随着不可避免的额外的后果。&lt;/p&gt;

&lt;p&gt;鱼总是最后一个看到水的（因为水是环境的一部分）&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://laichendong.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2015/08/19/are-your-lights-on.html</link>
        <guid isPermaLink="true">http://laichendong.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2015/08/19/are-your-lights-on.html</guid>
        
        
        <category>读书笔记</category>
        
      </item>
    
  </channel>
</rss>
